// generated 2001/8/29 14:12:47 CEST by thoma@Tiger.
// using glademm V0.6.2_cvs
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- /home/thoma/rollenspiel/sound/sound_gtk/sound_gtk.glade
// for gtk 1.2.8 and gtkmm 1.2.5
//
// Please modify the corresponding derived classes in ./src/main_window.cc

#include "config.h"
#include "main_window.hh"
#include <gtk--/table.h>
#include <gtk--/button.h>
#include <gtk--/label.h>
#include <gtk--/scrolledwindow.h>
#include <gtk--/eventbox.h>

main_window_glade::main_window_glade(
) : Gtk::Window(GTK_WINDOW_TOPLEVEL)
{   
   
   Gtk::Window *main_window = this;
   scrolledwindow_auswahl = manage(new class Gtk::ScrolledWindow());
   
   Gtk::Table *table2 = manage(new class Gtk::Table(1, 2, false));
   Gtk::Button *button_close = manage(new class Gtk::Button("Close"));
   Gtk::Button *button_kill = manage(new class Gtk::Button("F3: Kill all now"));
   kill_on_new_button = manage(new class Gtk::ToggleButton("F2: Kill on new Sound"));
   
   Gtk::Button *button_refresh = manage(new class Gtk::Button("F1: Refresh"));
   togglebutton_repeat = manage(new class Gtk::ToggleButton("F4: Repeat"));
   
   Gtk::Table *table3 = manage(new class Gtk::Table(6, 1, false));
   tree_list = new class SimpleTree(3);
   clist_playlist = manage(new class Gtk::CList(1));
   
   Gtk::ScrolledWindow *scrolledwindow1 = manage(new class Gtk::ScrolledWindow());
   Gtk::Table *table1 = manage(new class Gtk::Table(2, 3, false));
   Gtk::EventBox *eventbox = manage(new class Gtk::EventBox());
   scrolledwindow_auswahl->set_usize(180, 200);
   scrolledwindow_auswahl->set_policy(GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
   table3->attach(*button_close, 0, 1, 5, 6, GTK_FILL, 0, 0, 0);
   table3->attach(*button_kill, 0, 1, 2, 3, GTK_FILL, 0, 0, 0);
   table3->attach(*kill_on_new_button, 0, 1, 1, 2, GTK_FILL, 0, 0, 0);
   table3->attach(*button_refresh, 0, 1, 0, 1, GTK_FILL, 0, 0, 0);
   table3->attach(*togglebutton_repeat, 0, 1, 3, 4, GTK_FILL, 0, 0, 0);
   clist_playlist->set_usize(200, -1);
   clist_playlist->set_column_title(0, "Playlist (klick to kill)");
   clist_playlist->set_column_width(0, 80);
   clist_playlist->column_titles_show();
   scrolledwindow1->set_policy(GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
   scrolledwindow1->add(*clist_playlist);
   table1->attach(*scrolledwindow_auswahl, 0, 1, 0, 1, GTK_EXPAND|GTK_SHRINK|GTK_FILL, GTK_EXPAND|GTK_SHRINK|GTK_FILL, 0, 0);
   table1->attach(*table2, 1, 2, 1, 2, GTK_FILL, GTK_FILL, 0, 0);
   table1->attach(*table3, 2, 3, 0, 1, GTK_EXPAND|GTK_FILL, GTK_FILL, 0, 0);
   table1->attach(*tree_list, 0, 1, 0, 1, GTK_FILL, GTK_EXPAND|GTK_FILL, 0, 0);
   table1->attach(*scrolledwindow1, 1, 2, 0, 1, GTK_EXPAND|GTK_FILL, GTK_FILL, 0, 0);
   eventbox->add(*table1);
   main_window->set_title("Sound GTK");
   main_window->add(*eventbox);
   scrolledwindow_auswahl->show();
   table2->show();
   button_close->show();
   button_kill->show();
   kill_on_new_button->show();
   button_refresh->show();
   togglebutton_repeat->show();
   table3->show();
   tree_list->show();
   clist_playlist->show();
   scrolledwindow1->show();
   table1->show();
   eventbox->show();
   main_window->show();
   button_close->clicked.connect(SigC::slot(static_cast<class main_window*>(this), &main_window::on_button_close_clicked));
   button_kill->clicked.connect(SigC::slot(static_cast<class main_window*>(this), &main_window::on_button_kill_clicked));
   kill_on_new_button->toggled.connect(SigC::slot(static_cast<class main_window*>(this), &main_window::on_kill_on_new_button_toggled));
   button_refresh->clicked.connect(SigC::slot(static_cast<class main_window*>(this), &main_window::on_button_refresh_clicked));
   togglebutton_repeat->toggled.connect(SigC::slot(static_cast<class main_window*>(this), &main_window::on_togglebutton_repeat_toggled));
   tree_list->leaf_selected.connect(SigC::slot(static_cast<class main_window*>(this), &main_window::tree_leaf_selected));
   tree_list->key_press_event.connect(SigC::slot(static_cast<class main_window*>(this), &main_window::on_tree_list_key_press_event));
   clist_playlist->select_row.connect(SigC::slot(static_cast<class main_window*>(this), &main_window::on_clist_playlist_select_row));
   eventbox->key_press_event.connect(SigC::slot(static_cast<class main_window*>(this), &main_window::on_eventbox_key_press_event));
}

main_window_glade::~main_window_glade()
{   delete tree_list;
}
