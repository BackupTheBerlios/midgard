/*  Midgard Character Generator
 *  Copyright (C) 2001 Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

// generated 2001/3/14 8:34:43 CET by thoma@ig23.
// using glademm V0.5_11f_cvs
//
// newer (non customized) versions of this file go to Window_Waffenbesitz.cc_new

// This file is for your program, I won't touch it again!

#include "config.h"
#include "Window_Waffenbesitz.hh"
#include "Window_mag_bonus.hh"
#include "midgard_CG.hh"
#include <Aux/Transaction.h>
#include <Aux/SQLerror.h>
#include <Gtk_OStream.h>
exec sql include sqlca;

void Window_Waffenbesitz::on_clist_waffe_alt_select_row(gint row, gint column, GdkEvent *event)
{   
  string waffe = clist_waffe_alt->get_text(row,0);
  for (vector<st_waffen_besitz>::iterator i=waffe_besitz.begin();
         i!=waffe_besitz.end();++i)
   { 
     if ((i->region) !="") waffe = hauptfenster->get_region_waffen(waffe,i->region,2);
     if ((i->name) == waffe &&  mag_bonus_bool) {manage (new Window_mag_bonus(this,*i)); break;}
     if ((i->name) == waffe && !mag_bonus_bool) {waffe_besitz.erase(i);break;} 
   }
  hauptfenster->on_speichern_clicked();
  show_alte_waffen();   
  show_neue_waffen();   
}

void Window_Waffenbesitz::on_clist_waffe_neu_select_row(gint row, gint column, GdkEvent *event)
{   
 string waffe = clist_waffe_neu->get_text(row,0);
 string region = clist_waffe_neu->get_text(row,2);
 if (region!="") 
   { string wwaffe = hauptfenster->get_region_waffen(waffe,region,2);
     waffe_besitz.push_back(st_waffen_besitz(wwaffe,waffe,region,0,0));
   }
 if (region=="") 
     waffe_besitz.push_back(st_waffen_besitz(waffe,waffe,region,0,0));
  hauptfenster->on_speichern_clicked();
  show_alte_waffen();   
  show_neue_waffen();   
}

Window_Waffenbesitz::Window_Waffenbesitz(midgard_CG* h,
      vector<st_ausgewaehlte_waffen>& vw,vector<st_waffen_besitz>& wb,st_werte& we )
: vec_waffen(vw), waffe_besitz(wb), werte(we)
{
  mag_bonus_bool=false;
  hauptfenster=h;
  hauptfenster->on_speichern_clicked();
  show_alte_waffen();   
  show_neue_waffen();   
}

void Window_Waffenbesitz::on_button_close_clicked()
{
   destroy();
}


void  Window_Waffenbesitz::show_alte_waffen()
{
  clist_waffe_alt->clear();
  Gtk::OStream os(clist_waffe_alt);  
  for (vector<st_waffen_besitz>::const_iterator i=waffe_besitz.begin();
            i!=waffe_besitz.end();++i)
   {
     string schaden=hauptfenster->waffe_werte((*i),werte,"Schaden");
     string bonus= "("+itos(i->av_bonus)+"/"+itos(i->sl_bonus)+")";
     if (bonus == "(0/0)")   bonus = "";
     if (bonus == "(-5/-5)") bonus = "(0/0)";
     if (i->region=="")
        os << i->name <<"\t"<<schaden<<"\t"<<bonus<<"\n";
     else
      {
//        string alias = hauptfenster->get_region_waffen(i->name,i->region,1); 
        os << i->alias <<"\t"<<schaden<<"\t"<<bonus<<"\n";
      }
   }
  for (unsigned int i=0;i<clist_waffe_alt->columns().size();++i)
   clist_waffe_neu->set_column_auto_resize(i,true);
}

void  Window_Waffenbesitz::show_neue_waffen()
{
  clist_waffe_neu->clear();
  exec sql begin declare section;
   char db_waffe[50];
   char db_name[50] ;
   char db_version[50] ;
   char db_region[10];
   char db_alias[50];
  exec sql end declare section;
  strncpy(db_name,werte.name_charakter.c_str(),sizeof(db_name));
  strncpy(db_version,werte.version.c_str(),sizeof(db_version));

  exec sql declare ein cursor for 
     SELECT distinct w.name from waffen w, charaktere_fertigkeiten c 
     where w.name = c.fertigkeit and c.charakter_name = :db_name
     and c.version = :db_version
     and w.name not in 
     (select fertigkeit from charaktere_fertigkeiten 
      where charakter_name = :db_name and version = :db_version
      and art = 'Besitz_W');
  Transaction tr;
  exec sql open ein;
  SQLerror::test(__FILELINE__);
  Gtk::OStream os(clist_waffe_neu);
  while(true)
   {
     exec sql fetch ein into :db_waffe;
     SQLerror::test(__FILELINE__,100);
     if (sqlca.sqlcode) break;
     string schaden=hauptfenster->waffe_werte(st_waffen_besitz(db_waffe,db_waffe,"",0,0),werte,"Schaden");
     string waffe=db_waffe;
     if (waffe!="waffenloser Kampf" )
        os << db_waffe<<"\t"<<schaden<<"\n";

     // Aliasnamen für Waffen aus anderen Regionen
     exec sql declare alias_ein cursor for 
      select alias,region from waffen_region_name
      where name = :db_waffe; 
      exec sql open alias_ein;     
     SQLerror::test(__FILELINE__);
     vector<string> aliaswaffen;
     vector<string> aliasregion;
     while(true)
      {
        exec sql fetch alias_ein into :db_alias, :db_region ;
        SQLerror::test(__FILELINE__,100);
        if (sqlca.sqlcode) break;
        aliaswaffen.push_back(db_alias);     
        aliasregion.push_back(db_region);     
      }
     exec sql close alias_ein;
     for (unsigned int i=0;i<aliaswaffen.size();++i)
      {
        if (hauptfenster->region_check(aliasregion[i]))
           os << aliaswaffen[i]<<"\t"<<schaden<<"\t"<<db_region<<"\n";
      }
   }
  exec sql close ein;
  tr.close();
  for (unsigned int i=0;i<clist_waffe_neu->columns().size();++i)
   clist_waffe_neu->set_column_auto_resize(i,true);
}

void Window_Waffenbesitz::on_checkbutton_mag_waffenbonus_toggled()
{
  if (checkbutton_mag_waffenbonus->get_active()) mag_bonus_bool=true;
  else mag_bonus_bool= false;
}

void Window_Waffenbesitz::mag_boni_uebernehmen(st_waffen_besitz& wa)
{
  for (vector<st_waffen_besitz>::iterator i=waffe_besitz.begin();
         i!=waffe_besitz.end();++i)
     if ((i->name) == wa.name) (*i)=wa;
  Window_Waffenbesitz::show_alte_waffen();
}
