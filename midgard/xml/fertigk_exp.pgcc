// $Id: fertigk_exp.pgcc,v 1.9 2001/11/15 07:51:27 christof Exp $
/*  Midgard Roleplaying Character Generator
 *  Copyright (C) 2001 Christof Petig
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include <fstream>
#include <Aux/Transaction.h>
#include <Aux/dbconnect.h>
exec sql include sqlca;
#include "export_common.h"

// wegen eines bugs in epcg <=V6.1
#define GARNIX 

void fert_speichern(std::ostream &o)
{  
   Transaction t;
   exec sql allocate descriptor spalten;
   exec sql declare fert_curs cursor for
   	select fertigkeit, region, 
   		lp as lernpunkte, anfangswert0, fp, anfangswert, attribut
   	from fertigkeiten
   	order by region,fertigkeit;
   exec sql open fert_curs;
   SQLerror::test(__FILELINE__);
   o << "<MidgardCG-data>\n";
   o << " <Fertigkeiten>\n";
  while (true)
  {exec sql fetch fert_curs into sql descriptor spalten;
   SQLerror::test(__FILELINE__,100);
   if (sqlca.sqlcode) break;
   FetchIStream is("spalten");
   o << "  <Fertigkeit";
   string fert=fetch_and_write_string_attrib(is, o, "Name");
   fetch_and_write_string_attrib(is, o, "Region");
   fetch_and_write_int_attrib(is, o, "Lernpunkte");
   fetch_and_write_int_attrib(is, o, "Anfangswert");
   fetch_and_write_int_attrib(is, o, "Lernkosten");
   fetch_and_write_int_attrib(is, o, "Erfolgswert");
   fetch_and_write_string_attrib(is, o, "Attribut");
   o << ">\n";
   {  exec sql begin declare section;
      const char *FERTIGK=fert.c_str(GARNIX);
      char TYPEN[40][40];
      exec sql end declare section;
      
      exec sql select typ into :TYPEN from fertigkeiten_typen
      	where name=:FERTIGK and standard='G'
      	order by typ;
      if (!sqlca.sqlcode) 
      {  o << "    <Grund>";
         for (int i=0;i<sqlca.sqlerrd[2];++i)
         {  o << typ_standardisierung(TYPEN[i]);
            if (i+1 < sqlca.sqlerrd[2]) o << ',';
         }
         o << "</Grund>\n";
      }
      exec sql select typ into :TYPEN from fertigkeiten_typen
      	where name=:FERTIGK and standard='S'
      	order by typ;
      if (!sqlca.sqlcode) 
      {  o << "    <Standard>";
         for (int i=0;i<sqlca.sqlerrd[2];++i)
         {  o << typ_standardisierung(TYPEN[i]);
            if (i+1 < sqlca.sqlerrd[2]) o << ',';
         }
         o << "</Standard>\n";
      }
      exec sql select typ into :TYPEN from fertigkeiten_typen
      	where name=:FERTIGK and standard='A'
      	order by typ;
      if (!sqlca.sqlcode) 
      {  o << "    <Ausnahme>";
         for (int i=0;i<sqlca.sqlerrd[2];++i)
         {  o << typ_standardisierung(TYPEN[i]);
            if (i+1 < sqlca.sqlerrd[2]) o << ',';
         }
         o << "</Ausnahme>\n";
      }
      
      // wert, attribut, [p+s]_element 
      exec sql declare cursor_lp cursor for 
      	select typ,lernpunkte,pflicht from lernschema 
      	where fertigkeit=:FERTIGK and art='Fertigkeit'
      	order by lernpunkte,typ;
      exec sql open cursor_lp;
      while (!sqlca.sqlcode) 
      {  exec sql fetch from cursor_lp into sql descriptor spalten;
         if (sqlca.sqlcode) break;
         FetchIStream is2("spalten");
         o << "    <Lernschema";
         fetch_and_write_typ_attrib(is2, o, "Typ");
         fetch_and_write_int_attrib(is2, o, "Lernpunkte");
         fetch_and_write_bool_attrib(is2, o, "Pflicht");
         o << "/>\n";
      }
      exec sql close cursor_lp;
   }
   
   o << "  </Fertigkeit>\n";
  }
   exec sql close fert_curs;
   SQLerror::test(__FILELINE__);
   o << " </Fertigkeiten>\n";

//********************* angeborene Fertigkeiten ********************
   o << " <angeboreneFertigkeiten>\n";
   exec sql declare angeb_curs cursor for
   	select name, min, max, wert
   	from angeborene_fertigkeiten
   	order by name;
   exec sql open angeb_curs;
   SQLerror::test(__FILELINE__);
  while (true)
  {exec sql fetch angeb_curs into sql descriptor spalten;
   SQLerror::test(__FILELINE__,100);
   if (sqlca.sqlcode) break;
   FetchIStream is("spalten");
   o << "  <angeboreneFertigkeit";
   fetch_and_write_string_attrib(is, o, "Name");
   fetch_and_write_int_attrib(is, o, "Min");
   fetch_and_write_int_attrib(is, o, "Max");
   fetch_and_write_int_attrib(is, o, "Wert");
   o << "/>\n";
  }
   exec sql close angeb_curs;
   SQLerror::test(__FILELINE__);
   o << " </angeboreneFertigkeiten>\n";

//********************* Berufe ********************
   o << " <Berufe>\n";
   exec sql declare beruf_curs cursor for
   	select beruf, region, lernpunkte, st, ge, ko, "in", zt, pa, au, sb, 
   		typ, geschlecht
   	from berufe_voraussetzung
   	order by region, beruf;
   exec sql open beruf_curs;
   SQLerror::test(__FILELINE__);
  while (true)
  {exec sql fetch beruf_curs into sql descriptor spalten;
   SQLerror::test(__FILELINE__,100);
   if (sqlca.sqlcode) break;
   FetchIStream is("spalten");
   o << "  <Beruf";
   std::string beruf=fetch_and_write_string_attrib(is, o, "Name");
   fetch_and_write_string_attrib(is, o, "Region");
   fetch_and_write_int_attrib(is, o, "Lernpunkte");
   o << ">\n";
   o << "    <Voraussetzungen";
   fetch_and_write_int_attrib(is, o, "St");
   fetch_and_write_int_attrib(is, o, "Ge");
   fetch_and_write_int_attrib(is, o, "Ko");
   fetch_and_write_int_attrib(is, o, "In");
   fetch_and_write_int_attrib(is, o, "Zt");
   fetch_and_write_int_attrib(is, o, "pA");
   fetch_and_write_int_attrib(is, o, "Au");
   fetch_and_write_int_attrib(is, o, "Sb");
   fetch_and_write_typ_attrib(is, o, "Typ");
   fetch_and_write_string_attrib(is, o, "Geschlecht");
   o << "/>\n";
   {  exec sql begin declare section;
      const char *BERUF=beruf.c_str(GARNIX);
      char STAND[10][40];
      char VORTEIL[10][40];
      exec sql end declare section;
      
      exec sql select stand into :STAND from berufe_stand
      	where beruf=:BERUF
      	order by stand;
      if (!sqlca.sqlcode) 
      {  o << "    <Stand>";
         for (int i=0;i<sqlca.sqlerrd[2];++i)
         {  o << STAND[i];
            if (i+1 < sqlca.sqlerrd[2]) o << ',';
         }
         o << "</Stand>\n";
      }

      exec sql select vorteil into :VORTEIL from berufe_vorteile
      	where beruf=:BERUF
      	order by vorteil;
      if (!sqlca.sqlcode) 
      {  o << "    <Vorteil>";
         for (int i=0;i<sqlca.sqlerrd[2];++i)
         {  o << VORTEIL[i];
            if (i+1 < sqlca.sqlerrd[2]) o << ',';
         }
         o << "</Vorteil>\n";
      }
   }
   o << "  </Beruf>\n";
  }
   exec sql close beruf_curs;
   SQLerror::test(__FILELINE__);
   o << " </Berufe>\n";

//********************* Pflicht + verboten ********************
   o << " <Typ-Pflichten>\n";
   exec sql declare pflicht_curs cursor for
   	select pflicht, typ, lernpunkte, verboten, spielbegin, erfolgswert
   	from pflicht_lernen
   	order by typ,coalesce(pflicht,''),verboten;
   exec sql open pflicht_curs;
   SQLerror::test(__FILELINE__);
  while (true)
  {exec sql fetch pflicht_curs into sql descriptor spalten;
   SQLerror::test(__FILELINE__,100);
   if (sqlca.sqlcode) break;
   FetchIStream is("spalten");
   std::string pflicht=fetch_string(is);
   if (pflicht.size())
   {  o << "  <Pflicht";
      fetch_and_write_string_attrib(is, o, "Typ");
      write_string_attrib(o, "Fertigkeit", pflicht);
      fetch_and_write_int_attrib(is, o, "Lernpunkte");
      fetch_string(is);
      fetch_and_write_string_attrib(is, o, "Spielbeginn");
      fetch_and_write_int_attrib(is, o, "Erfolgswert");
      o << "/>\n";
   }
   else
   {  o << "  <Verbot";
      fetch_and_write_string_attrib(is, o, "Typ");
      fetch_int(is);
      fetch_and_write_string_attrib(is, o, "Fertigkeit");
      fetch_and_write_string_attrib(is, o, "Spielbeginn");
      o << "/>\n";
   }
  }
   exec sql close pflicht_curs;
   SQLerror::test(__FILELINE__);
   o << " </Typ-Pflichten>\n";

//********************* praxispunkte ********************
   o << " <Praxispunkte>\n";
   exec sql declare praxis_curs cursor for
   	select name, max_wert, lernfaktor
   	from praxispunkte
   	order by name;
   exec sql open praxis_curs;
   SQLerror::test(__FILELINE__);
  while (true)
  {exec sql fetch praxis_curs into sql descriptor spalten;
   SQLerror::test(__FILELINE__,100);
   if (sqlca.sqlcode) break;
   FetchIStream is("spalten");
   o << "  <Steigern";
   fetch_and_write_string_attrib(is, o, "Name");
   fetch_and_write_int_attrib(is, o, "MaximalWert");
   fetch_and_write_int_attrib(is, o, "Lernfaktor");
   o << "/>\n";
  }
   exec sql close praxis_curs;
   SQLerror::test(__FILELINE__);
   o << " </Praxispunkte>\n";

//******************************************************************
   o << "</MidgardCG-data>\n";
   
   exec sql deallocate descriptor spalten;
}

int main(int argc, char *argv[])
{  
   try{
      Petig::Connection conn;
      conn.setDbase("midgard");
      Petig::dbconnect(conn);

   std::cout << "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n\n";
   fert_speichern(std::cout);
   Petig::dbdisconnect();
   } catch (SQLerror &e)
   {  std::cerr << e << '\n';
   }
   return 0;
}
