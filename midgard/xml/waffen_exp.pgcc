// $Id: waffen_exp.pgcc,v 1.5 2001/11/19 18:00:14 christof Exp $
/*  Midgard Roleplaying Character Generator
 *  Copyright (C) 2001 Christof Petig
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include <fstream>
#include <Aux/Transaction.h>
#include <Aux/dbconnect.h>
exec sql include sqlca;
#include "export_common.h"
#include <Aux/itos.h>

// wegen eines bugs in epcg <=V6.1
#define GARNIX 

void waffen_speichern(std::ostream &o)
{  
   o << "<MidgardCG-data>\n";
   o << " <Rüstungen>\n";

   Transaction t;
   exec sql allocate descriptor spalten;
   
   exec sql declare ruestung_curs cursor for
   	select ruestung, region, ruestung_s, lp_verlust,
   		min_staerke,rw_verlust,b_verlust
   	from ruestung
   	order by coalesce(region,''),lp_verlust;
   exec sql open ruestung_curs;
   SQLerror::test(__FILELINE__);
  while (true)
  {exec sql fetch ruestung_curs into sql descriptor spalten;
   SQLerror::test(__FILELINE__,100);
   if (sqlca.sqlcode) break;
   FetchIStream is("spalten");
   o << "  <Rüstung";
   fetch_and_write_string_attrib(is, o, "Name");
   fetch_and_write_string_attrib(is, o, "Region");
   fetch_and_write_string_attrib(is, o, "Abkürzung");
   fetch_and_write_int_attrib(is, o, "schütztLP");
   fetch_and_write_int_attrib(is, o, "minimaleStärke");
   fetch_and_write_int_attrib(is, o, "RW-Verlust");
   fetch_and_write_int_attrib(is, o, "B-Verlust");
   o << "/>\n";
  }
   exec sql close ruestung_curs;
   SQLerror::test(__FILELINE__);
   o << " </Rüstungen>\n";

//********************** waffen ********************************************

   o << " <Waffen>\n";
   exec sql declare waffen_curs cursor for
   	select name, region, grundkenntnisse, schwierigkeit,
   		art, art_2, schaden, schaden_b, zusatz, angriffsrangmod,
   		wm_abwehr_leicht, wm_abwehr_schwer, 
   		st, ge, reichweite_0, reichweite_n,
   		reichweite_m, reichweite_f
   	from waffen
   	order by coalesce(region,''),art,name;
   exec sql open waffen_curs;
   SQLerror::test(__FILELINE__);
  while (true)
  {exec sql fetch waffen_curs into sql descriptor spalten;
   SQLerror::test(__FILELINE__,100);
   if (sqlca.sqlcode) break;
   FetchIStream is("spalten");
   o << "  <Waffe";
   std::string waffe=fetch_and_write_string_attrib(is, o, "Name");
   fetch_and_write_string_attrib(is, o, "Region");
   fetch_and_write_string_attrib(is, o, "Grundkenntnisse");
   fetch_and_write_int_attrib(is, o, "Schwierigkeit");
   fetch_and_write_string_attrib(is, o, "Kategorie");
   fetch_and_write_string_attrib(is, o, "Klasse");
   fetch_and_write_string_attrib(is, o, "Schaden");
   fetch_and_write_int_attrib(is, o, "Schadensbonus");
   fetch_and_write_string_attrib(is, o, "erfordert");
   o << ">\n    <Modifikationen";
   fetch_and_write_string_attrib(is, o, "Angriffsrang");
   fetch_and_write_string_attrib(is, o, "Abwehr:leicht");
   fetch_and_write_string_attrib(is, o, "Abwehr:schwer");
   o << "/><Voraussetzungen";
   fetch_and_write_int_attrib(is, o, "St");
   fetch_and_write_int_attrib(is, o, "Ge");
   o << "/><Reichweite";
   fetch_and_write_int_attrib(is, o, "null");
   fetch_and_write_int_attrib(is, o, "nah");
   fetch_and_write_int_attrib(is, o, "mittel");
   fetch_and_write_int_attrib(is, o, "fern");
   o << "/>\n";

 //************************* waffen_region_name ************************  
   {  exec sql begin declare section;
      const char *WAFFE=waffe.c_str(GARNIX);
      char TYPEN[40][40];
      exec sql end declare section;

      exec sql declare cursor_reg cursor for 
      	select alias,region,schaden,schaden_b,angriffs_mod
      	from waffen_region_name
      	where name=:WAFFE
      	order by region,alias;
      exec sql open cursor_reg;
      SQLerror::test(__FILELINE__);
      while (!sqlca.sqlcode) 
      {  exec sql fetch from cursor_reg into sql descriptor spalten;
         if (sqlca.sqlcode) break;
         FetchIStream is2("spalten");
         o << "    <regionaleVariante";
         fetch_and_write_string_attrib(is2, o, "Name");
         fetch_and_write_string_attrib(is2, o, "Region");
         fetch_and_write_string_attrib(is2, o, "Schaden");
         fetch_and_write_int_attrib(is2, o, "Schadensbonus");
	 o << "><Modifikationen";
         fetch_and_write_int_attrib(is2, o, "Angriff");
         o << "/></regionaleVariante>\n";
      }
      exec sql close cursor_reg;
   }
      
   o << "  </Waffe>\n";
  }
   exec sql close waffen_curs;
   SQLerror::test(__FILELINE__);
   o << " </Waffen>\n";

//******************waffen_grund************************************************

   o << " <Waffen:Grundkenntnisse>\n";
   exec sql declare grund_curs cursor for
   	select name, region, fp
   	from waffen_grund
   	order by coalesce(region,''),name;
   exec sql open grund_curs;
   SQLerror::test(__FILELINE__);
  while (true)
  {exec sql fetch grund_curs into sql descriptor spalten;
   SQLerror::test(__FILELINE__,100);
   if (sqlca.sqlcode) break;
   FetchIStream is("spalten");
   o << "  <Waffen:Grundkenntnis";
   fetch_and_write_string_attrib(is, o, "Name");
   fetch_and_write_string_attrib(is, o, "Region");
   fetch_and_write_string_attrib(is, o, "Kosten");
   o << "/>\n";
  }
   exec sql close grund_curs;
   SQLerror::test(__FILELINE__);
   o << " </Waffen:Grundkenntnisse>\n";

//********************* steigern_fertigkeiten_werte ********************
   o << " <Waffen:Steigern>\n";
    exec sql declare steig_curs cursor for
      		select name,
      	    coalesce(p1,0), coalesce(p2,0), coalesce(p3,0),
      	    coalesce(p4,0), coalesce(p5,0), coalesce(p6,0), coalesce(p7,0),
      	    coalesce(p8,0), coalesce(p9,0), coalesce(p10,0), coalesce(p11,0),
      	    coalesce(p12,0), coalesce(p13,0), coalesce(p14,0), coalesce(p15,0),
      	    coalesce(p16,0), coalesce(p17,0), coalesce(p18,0), coalesce(p19,0),
      	    coalesce(p20,0)
       		from waffen_steigern
       		order by name;
       	exec sql open steig_curs;
       	SQLerror::test(__FILELINE__);
       while (true)
       {  exec sql fetch steig_curs into sql descriptor spalten;
          SQLerror::test(__FILELINE__,100);
          if (sqlca.sqlcode) break;
          o << "    <Kosten";
          FetchIStream is("spalten");
          fetch_and_write_string_attrib(is, o, "Kategorie");
          for (int i=1;i<=20;++i) 
             fetch_and_write_int_attrib(is, o, "Wert"+itos(i));
          o << "/>\n";
       }
   exec sql close steig_curs;
   SQLerror::test(__FILELINE__);
   o << " </Waffen:Steigern>\n";

//******************************************************************
   o << "</MidgardCG-data>\n";
   
   exec sql deallocate descriptor spalten;
}

int main(int argc, char *argv[])
{  
   try{
      Petig::Connection conn;
      conn.setDbase("midgard");
      Petig::dbconnect(conn);

   std::cout << "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n\n";
   waffen_speichern(std::cout);
   Petig::dbdisconnect();
   } catch (SQLerror &e)
   {  std::cerr << e << '\n';
   }
   return 0;
}
