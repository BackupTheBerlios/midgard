/*  Midgard Character Generator
 *  Copyright (C) 2001 Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include "midgard_CG.hh"
#include <Aux/Transaction.h>
#include <Aux/SQLerror.h>
exec sql include sqlca;
#include <cstring>
//#include <algorithm>
#include <Aux/EntryValueIntString.h>
#include <Aux/EntryValueEmptyInt.h> 


void midgard_CG::on_sprache_laden_clicked()
{   
   midgard_CG::zeige_werte(werte,"alle");
   midgard_CG::on_speichern_clicked();
   midgard_CG::show_alte_schriften();
   midgard_CG::show_neue_schriften();
   midgard_CG::show_alte_sprachen();
   midgard_CG::show_neue_sprachen();
}   

class Data_alt_sprache : public RowDataBase
{  
   string name;
   int wert,steigern,reduzieren,verlernen;
 public:
   Data_alt_sprache(const string& n,int w, int s, int r, int v)
       :name(n),wert(w),steigern(s),reduzieren(r),verlernen(v) {}

   virtual const cH_EntryValue Value(int seqnr) const
 { switch (seqnr) {
      case 0 : return cH_EntryValueIntString(name);
      case 1 : return cH_EntryValueEmptyInt(wert);
      case 2 : return cH_EntryValueEmptyInt(steigern);
      case 3 : return cH_EntryValueEmptyInt(reduzieren);
      case 4 : return cH_EntryValueEmptyInt(verlernen);
   }
   return cH_EntryValueIntString("?");
 }
 string Name() const {  return name; }
 int Wert() const {  return wert; }
 int Steigern() const {  return steigern; }
 int Reduzieren() const {  return reduzieren; }
 int Verlernen() const {  return verlernen; }
}; 
void midgard_CG::on_leaf_selected_alte_sprache(cH_RowDataBase d)
{  const Data_alt_sprache *dt=dynamic_cast<const Data_alt_sprache*>(&*d);  
   on_steigern_sprache_tree_alt_select(dt->Name(),dt->Steigern(),dt->Reduzieren(),dt->Verlernen());
}
class Data_neu_sprache : public RowDataBase
{  
   string name, urschrift;
   int kosten;
 public:
   Data_neu_sprache(const string& n,const string& u, int k)
       :name(n),urschrift(u),kosten(k) {}

   virtual const cH_EntryValue Value(int seqnr) const
 { switch (seqnr) {
      case 0 : return cH_EntryValueIntString(name);
      case 1 : return cH_EntryValueIntString(urschrift);
      case 2 : return cH_EntryValueEmptyInt(kosten);
   }
   return cH_EntryValueIntString("?");
 }
 string Name() const {  return name; }
 int Kosten() const {  return kosten; }
}; 
void midgard_CG::on_leaf_selected_neue_sprache(cH_RowDataBase d)
{  const Data_neu_sprache *dt=dynamic_cast<const Data_neu_sprache*>(&*d);  
   on_steigern_sprache_tree_neu_select(dt->Name(),dt->Kosten());
}

    
void midgard_CG::on_steigern_sprache_tree_neu_select(const string& name,int kosten)
{   
   werte.gfp += kosten;
   midgard_CG::zeige_werte(werte,"alle");
   vec_sprachen.push_back(st_sprachen(name,1,""));   
   on_sprache_laden_clicked();
}   
    
void midgard_CG::on_steigern_sprache_tree_alt_select(const string& name,int steigern,int reduzieren,int verlernen)
{   
   if (radio_sprache_steigern->get_active() && steigern)
    {
      werte.gfp += steigern;
      for (vector<st_sprachen>::iterator i=vec_sprachen.begin();
                     i!= vec_sprachen.end();++i )
            if ( i->name == name) i->wert++;
    }
   if (radio_sprache_reduzieren->get_active() && reduzieren )
    {
      werte.gfp -= reduzieren;
      for (vector<st_sprachen>::iterator i=vec_sprachen.begin();
                     i!= vec_sprachen.end();++i )
            if ( i->name == name) i->wert--;
    }
   if (radio_sprache_verlernen->get_active() && verlernen )
    {
      werte.gfp -= verlernen;
      for (vector<st_sprachen>::iterator i=vec_sprachen.begin();
                     i!= vec_sprachen.end();++i )
            if ( i->name == name) {vec_sprachen.erase(i);break;};
    }
   on_sprache_laden_clicked();
}
    
void midgard_CG::on_radio_sprache_steigern_toggled()
{   
}   
    
void midgard_CG::on_radio_sprache_reduzieren_toggled()
{   
}   
    
void midgard_CG::on_radio_sprache_verlernen_toggled()
{   
}   


class Data_schrift : public RowDataBase
{  
   string urschrift,art;
   int kosten;
 public:
   Data_schrift(const string& u,const string& a, int k)
       :urschrift(u),art(a),kosten(k) {}

   virtual const cH_EntryValue Value(int seqnr) const
 { switch (seqnr) {
      case 0 : return cH_EntryValueIntString(urschrift);
      case 1 : return cH_EntryValueIntString(art);
      case 2 : return cH_EntryValueEmptyInt(kosten);
   }
   return cH_EntryValueIntString("?");
 }
 string Urschrift() const {  return urschrift; }
 string Art() const {  return art; }
 int Kosten() const {  return kosten; }
}; 
void midgard_CG::on_leaf_selected_neue_schrift(cH_RowDataBase d)
{  const Data_schrift *dt=dynamic_cast<const Data_schrift*>(&*d);  
   on_steigern_schrift_tree_neu_select(dt->Urschrift(),dt->Art(),dt->Kosten());
}
void midgard_CG::on_leaf_selected_alte_schrift(cH_RowDataBase d)
{  const Data_schrift *dt=dynamic_cast<const Data_schrift*>(&*d);  
   on_steigern_schrift_tree_alt_select(dt->Urschrift(),dt->Kosten());
}



void midgard_CG::on_steigern_schrift_tree_alt_select(const string& name, int kosten)
{   
   werte.gfp -= kosten;
   for (vector<st_schriften>::iterator i=vec_schriften.begin();
            i!=vec_schriften.end();++i)
      {
         if (i->urschrift == name) { vec_schriften.erase(i);break;}
      }
   on_sprache_laden_clicked();
}   
    
void midgard_CG::on_steigern_schrift_tree_neu_select(const string& name, const string& art, int kosten)
{   
   werte.gfp += kosten;
   vec_schriften.push_back(st_schriften(name,art));
   on_sprache_laden_clicked();
}   


void midgard_CG::show_alte_sprachen()
{
   vector<cH_RowDataBase> datavec;
   double fac = midgard_CG::get_standard_fertigkeit(typ.s,typ_2.s,"Sprache");
   for (vector<st_sprachen>::const_iterator i=vec_sprachen.begin();
            i!=vec_sprachen.end();++i)
      {
         exec sql begin declare section;
            int db_max_erfolgswert;
            char db_alter_erfolgswert[10];
            char db_neuer_erfolgswert[10];
            char db_sprache[50];
            char query[256];
            int db_steigern, db_reduzieren, db_verlernen;
         exec sql end declare section;
         strncpy(db_sprache,i->name.c_str(),sizeof(db_sprache));
         exec sql select distinct max_wert into :db_max_erfolgswert 
               from sprachen where name = :db_sprache;


         string ae = "p";  ae += itos(i->wert);
         string ne = "p";  ne += itos(i->wert+1);
         strncpy(db_neuer_erfolgswert, ne.c_str(), sizeof(db_neuer_erfolgswert));
         strncpy(db_alter_erfolgswert, ae.c_str(), sizeof(db_alter_erfolgswert));

         snprintf(query,sizeof(query),"SELECT \
         coalesce(%s,0), coalesce(%s,0) 
         FROM steigern_fertigkeiten_werte \
         WHERE name = 'Sprache'",
         db_alter_erfolgswert,db_neuer_erfolgswert);

         Transaction tr;
         exec sql prepare s_ein_ from :query;
         exec sql declare s_ein cursor for s_ein_;
         exec sql open s_ein;
         exec sql fetch s_ein into :db_reduzieren, :db_steigern ;
         SQLerror::test(__FILELINE__);
         exec sql close s_ein;
         tr.close();
         
         exec sql select distinct fp into :db_verlernen from sprachen where name = :db_sprache ;
         SQLerror::test(__FILELINE__);
         int reduzieren = db_reduzieren*fac;
         if (db_reduzieren !=0) db_verlernen = 0 ;
         if (db_max_erfolgswert==i->wert) db_steigern=0;
         datavec.push_back(new Data_alt_sprache(i->name,i->wert,
            db_steigern*fac,db_reduzieren*fac,db_verlernen * fac));
      }
   alte_sprache_tree->setDataVec(datavec);
}


void midgard_CG::show_neue_sprachen()
{
  vector<cH_RowDataBase> datavec;
  exec sql begin declare section;
   char db_name[50], db_urschrift[50];
   int db_fp;
   char db_cname[50],db_version[50];
  exec sql end declare section;
  strncpy(db_cname,werte.name_charakter.c_str(),sizeof(db_cname));
  strncpy(db_version,werte.version.c_str(),sizeof(db_version));   
  Transaction tr; 
 exec sql declare ein cursor for
   SELECT DISTINCT name, fp, schrift from sprachen
   WHERE  name NOT IN (SELECT fertigkeit FROM charaktere_fertigkeiten
   WHERE art = 'Sprache' 
   AND charakter_name = :db_cname AND version = :db_version) order by name;
  SQLerror::test(__FILELINE__);
 exec sql open ein;
 double fac = midgard_CG::get_standard_fertigkeit(typ.s,typ_2.s,"Sprache");
  while (true)
   {
      exec sql fetch ein into :db_name, :db_fp, :db_urschrift;
      SQLerror::test(__FILELINE__,100);  
      if (sqlca.sqlcode) break;
      datavec.push_back(new Data_neu_sprache(db_name,db_urschrift,db_fp*fac));
   }
 exec sql close ein;
 tr.close();
 neue_sprache_tree->setDataVec(datavec);
}



void midgard_CG::show_alte_schriften()
{
  vector<cH_RowDataBase> datavec;
  exec sql begin declare section;
   char db_typ[20], db_name[20];
   int db_kosten;
  exec sql end declare section;
  double fac = midgard_CG::get_standard_fertigkeit(typ.s,typ_2.s,"Lesen/Schreiben");
  for (vector<st_schriften>::const_iterator i=vec_schriften.begin();
      i!=vec_schriften.end();++i)
   {
      strncpy(db_name,i->urschrift.c_str(),sizeof(db_name));
      exec sql select typ, kosten into :db_typ, :db_kosten 
                           from schrift where name = :db_name;
      datavec.push_back(new Data_schrift(i->urschrift,db_typ,db_kosten*fac));
   }
  alte_schrift_tree->setDataVec(datavec);
}

void midgard_CG::show_neue_schriften()
{
  vector<cH_RowDataBase> datavec;
  exec sql begin declare section;
   char db_name[50];
   int db_fp;
   char db_typ[30],db_cname[50],db_version[50];
  exec sql end declare section;
  strncpy(db_cname,werte.name_charakter.c_str(),sizeof(db_cname));
  strncpy(db_version,werte.version.c_str(),sizeof(db_version));   
  Transaction tr; 
 exec sql declare ein2 cursor for
   SELECT DISTINCT name, kosten, typ from schrift   
   WHERE  name NOT IN (SELECT fertigkeit FROM charaktere_fertigkeiten
   WHERE art = 'Urschrift' 
   AND charakter_name = :db_cname AND version = :db_version) order by name, typ;
  SQLerror::test(__FILELINE__);
 exec sql open ein2;
 double fac = midgard_CG::get_standard_fertigkeit(typ.s,typ_2.s,"Lesen/Schreiben");
  while (true)
   {
      exec sql fetch ein2 into :db_name, :db_fp, :db_typ;
      SQLerror::test(__FILELINE__,100);  
      if (sqlca.sqlcode) break;
//      os << db_fp*fac <<"\t"<<db_name<<"\t"<<db_typ <<"\n";
      datavec.push_back(new Data_schrift(db_name,db_typ,db_fp*fac));
   }
 exec sql close ein2;
 tr.close();
 neue_schrift_tree->setDataVec(datavec);
}
