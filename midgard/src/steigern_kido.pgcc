/*  Midgard Character Generator
 *  Copyright (C) 2001 Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include "midgard_CG.hh"
#include <Aux/Transaction.h>
#include <Aux/SQLerror.h>
exec sql include sqlca;
#include <cstring>
//#include <strstream>
#include "WindowInfo.hh"
#include <Aux/EntryValueIntString.h>
#include <Aux/EntryValueEmptyInt.h> 


void midgard_CG::on_kido_laden_clicked()
{   
 midgard_CG::zeige_werte(werte,"alle");
 midgard_CG::on_speichern_clicked();
 midgard_CG::show_alte_kido();
 midgard_CG::show_neue_kido();
}

class Data_kido : public RowDataBase
{  
   string hoho,name,stufe;
   int ap,kosten;
   string stil;
 public:
   Data_kido(const string& h,const string& n,const string& s1,int a,int k,const string& s)
       :hoho(h),name(n),stufe(s1),ap(a),kosten(k),stil(s) {}

   virtual const cH_EntryValue Value(int seqnr, gpointer gp) const
 { switch (seqnr) {
      case 0 : return cH_EntryValueIntString(hoho);
      case 1 : return cH_EntryValueIntString(name);
      case 2 : return cH_EntryValueIntString(stufe);
      case 3 : return cH_EntryValueEmptyInt(ap);
      case 4 : return cH_EntryValueEmptyInt(kosten);
      case 5 : return cH_EntryValueIntString(stil);
   }
   return cH_EntryValueIntString("?");
 }
 string HoHo() const {  return hoho; }   
 int Kosten() const {  return kosten; }   
}; 

void midgard_CG::on_leaf_selected_alte_kido(cH_RowDataBase d)
{  const Data_kido *dt=dynamic_cast<const Data_kido*>(&*d);
   on_steigern_kido_tree_alt_select(dt->HoHo(),dt->Kosten());
}
void midgard_CG::on_leaf_selected_neue_kido(cH_RowDataBase d)
{  const Data_kido *dt=dynamic_cast<const Data_kido*>(&*d);
   on_steigern_kido_tree_neu_select(dt->HoHo(),dt->Kosten());
}



void midgard_CG::show_alte_kido()
{
   vector<cH_RowDataBase> datavec;
   for (vector<st_kido>::iterator i=vec_kido.begin(); i!=vec_kido.end();++i)
      {
         double fac = midgard_CG::get_standard_fertigkeit(typ.s,typ_2.s,"KiDo");
         datavec.push_back(new Data_kido(i->hoho,i->technik,i->stufe,i->ap,fac*i->fp,i->stil));
      }
   alte_kido_tree->setDataVec(datavec);
}

int midgard_CG::get_erfolgswert_kido()
{
 for (vector<H_Data_fert>::const_iterator
      i= vec_Fertigkeiten.begin();i!=vec_Fertigkeiten.end();++i)
   {
      if ((*i)->Name() == "KiDo") return (*i)->Erfolgswert(); 
   }
 // should never get here 
 string strinfo="WARNUNG: Dieser Charakter beherrscht die Fertigkeit KiDo nicht.";
 manage (new WindowInfo(strinfo));
 return 0; 
}

void midgard_CG::show_neue_kido()
{
  vector<st_kido> new_kido;
  vector<cH_RowDataBase> datavec;
  exec sql begin declare section;
   char db_hoho[50];
   char query[1024];
  exec sql end declare section;
  string stufe_constraint ="";

  // Stufe
  if (werte.grad<=4 || get_erfolgswert_kido()+werte.bo_za <=15)
      stufe_constraint += " and stufe != 'Eingeweihter' ";
  if (werte.grad<=6 || get_erfolgswert_kido()+werte.bo_za <=18)
      stufe_constraint += " and stufe != 'Meister' ";
  // Stil
  if (werte.spezialisierung=="Harte Techniken")
      stufe_constraint += " and stil != 'Sanfte Techniken' ";
  if (werte.spezialisierung=="Sanfte Techniken")
      stufe_constraint += " and stil != 'Harte Techniken' ";
  // Maximale mögliche Techniken einer Stufe erreicht
  if (werte.spezialisierung=="Harte Techniken" || werte.spezialisierung=="Sanfte Techniken")
   {
     if (maxkidostil("Schüler") >= 12 )
         stufe_constraint += " and stufe != 'Schüler' ";
     if (maxkidostil("Eingeweihter") >= 7 )
         stufe_constraint += " and stufe != 'Eingeweihter' ";
     if (maxkidostil("Meister") >= 3 )
         stufe_constraint += " and stufe != 'Meister' ";
   }
  else
   {
     if (maxkidostil("Schüler") >= 11 )
         stufe_constraint += " and stufe != 'Schüler' ";
     if (maxkidostil("Eingeweihter") >= 6 )
         stufe_constraint += " and stufe != 'Eingeweihter' ";
     if (maxkidostil("Meister") >= 2 )
         stufe_constraint += " and stufe != 'Meister' ";
   }

  string squery = "SELECT name_orig from kido \
   where name_orig not in (SELECT fertigkeit FROM charaktere_fertigkeiten \
   WHERE charakter_name = '"+werte.name_charakter+"' AND version = '"+
   werte.version+"') "+stufe_constraint+"order by 1";

  snprintf(query,sizeof(query),squery.c_str());
  Transaction tr;
  exec sql prepare kido_ein_ from :query ;
  exec sql declare kido_ein cursor for kido_ein_ ;
  exec sql open kido_ein;
  SQLerror::test(__FILELINE__);
  while (true)
    {
       exec sql fetch kido_ein into :db_hoho;
         SQLerror::test(__FILELINE__,100);  
         if (sqlca.sqlcode) break;
         new_kido.push_back(st_kido(db_hoho,"","","",0,0,""));
      }
   exec sql close kido_ein;
   tr.commit();

   midgard_CG::get_kido(new_kido);
   double fac = midgard_CG::get_standard_fertigkeit(typ.s,typ_2.s,"KiDo");
   for (vector<st_kido>::iterator i=new_kido.begin();i!=new_kido.end();++i)
     {
        datavec.push_back(new Data_kido(i->hoho,i->technik,i->stufe,i->ap,fac*i->fp,i->stil));
     }
   neue_kido_tree->setDataVec(datavec);
}


void midgard_CG::on_steigern_kido_tree_alt_select(const string& name,int kosten)
{   
   werte.gfp -= kosten;
   for (vector<st_kido>::iterator i=vec_kido.begin();
            i!= vec_kido.end();++i) 
      if (i->hoho==name) {vec_kido.erase(i);break;}

   on_kido_laden_clicked();
}

void midgard_CG::on_steigern_kido_tree_neu_select(const string& name, int kosten)
{   
  werte.gfp += kosten;
  vec_kido.push_back(st_kido(name,"","","",0,0,""));
  get_kido(vec_kido);
  on_kido_laden_clicked();
}

int midgard_CG::maxkidostil(const string& stufe)
{
  int count=0;
  for (vector<st_kido>::const_iterator i=vec_kido.begin();
      i!=vec_kido.end();++i)
   {
     if (i->stufe==stufe) ++count;
   }
return count;
}
