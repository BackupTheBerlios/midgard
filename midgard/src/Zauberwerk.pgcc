#include "Zauberwerk.hh"
#include "midgard_CG.hh"
#include <Aux/SQLerror.h>
#include <Aux/Transaction.h>
#include "class_typen.hh"
exec sql include sqlca;

cH_Zauberwerk::cache_t cH_Zauberwerk::cache;

cH_Zauberwerk::cH_Zauberwerk(const std::string& name,const vector<H_Data_typen>& Typ)
{
 st_index index(name,Typ);
 cH_Zauberwerk *cached(cache.lookup(index));
 if (cached) *this=*cached;
 else
  {
//cout << "cH_"<<name<<'\n';
   *this=cH_Zauberwerk(new Zauberwerk(name,Typ));
   cache.Register(index,*this);
  }

}

void Zauberwerk::get_Zauberwerk()
{
  exec sql begin declare section;
   int db_kosten;
   char db_stufe[10];
   char db_preis[50];
   char query[1000];
   char db_zeitaufwand[30];
   char db_region[10];
   char db_art[50];
  exec sql end declare section;
  std::string squery = "SELECT kosten_gfp, 
      art , stufe, zeitaufwand,kosten, coalesce(region,'')
      FROM zauberwerk 
      WHERE name = '"+Name()+"'";
   strncpy(query,squery.c_str(),sizeof(query));
   Transaction tr;
   exec sql prepare cl_zauberwerk_ein_ from :query ;
   exec sql declare cl_zauberwerk_ein cursor for cl_zauberwerk_ein_ ;
//cout << query<<'\n';
   exec sql open cl_zauberwerk_ein;
   SQLerror::test(__FILELINE__);
   exec sql fetch cl_zauberwerk_ein into 
      :db_kosten, :db_art, :db_stufe, :db_zeitaufwand, :db_preis, :db_region;
   SQLerror::test(__FILELINE__);

   kosten=db_kosten;
   art=db_art;
   stufe=db_stufe;
   zeitaufwand=db_zeitaufwand;
   preis=db_preis;
   region=db_region;

   exec sql close cl_zauberwerk_ein;
   tr.close();
}


int Zauberwerk::Kosten(const vector<H_Data_typen>& Typ) const
{
  double fac; 
  if (Typ[1]->Short()!="")
  { if      (midgard_CG::standard_one_G(Standard()) ) fac = 0.5;
    else if (midgard_CG::standard_all_S(Standard()) ) fac = 1.0;
    else fac = 5.0; 
  }
  else
  { if (standard[0]=="G") fac = 0.5;
    else if (standard[0]=="S") fac = 1.0;
    else fac = 5.0;
  }   

  return (int)(fac*GrundKosten());
}

void Zauberwerk::set_Standard(const vector<H_Data_typen>& Typ)
{
  exec sql begin declare section;
   char db_ergebnis[20],db_ergebnis2[20];
   char query[200];
  exec sql end declare section;
  strncpy(db_ergebnis2,"",sizeof(db_ergebnis2));
  std::string squery = "select ";
  if (Typ[0]->is_mage()) squery += " coalesce("+Typ[0]->Short()+",'A') ";
  if (Typ[0]->is_mage() && Typ[1]->is_mage()) squery +", ";
  if (Typ[1]->is_mage()) squery += " coalesce("+Typ[1]->Short()+",'A')";
  squery += " from zauberwerk where  name = '"+name+"'";
  strncpy(query,squery.c_str(),sizeof(query));
   Transaction tr;
   exec sql prepare zaub from :query ;
   exec sql declare zauber cursor for zaub ;
   exec sql open zauber;
   SQLerror::test(__FILELINE__);
   if(Typ[0]->is_mage() && Typ[1]->is_mage() )
      exec sql fetch zauber into  :db_ergebnis, :db_ergebnis2;
   else
      exec sql fetch zauber into  :db_ergebnis;
   SQLerror::test(__FILELINE__);  

  standard.clear();
  standard.push_back(db_ergebnis);
  standard.push_back(db_ergebnis2);
}


/*
int Zauber::Kosten_eBe(const std::string& pe,const std::string& se) const
{
  double fac; 
    if      (P_Element() == pe ) fac = 0.5;
    else if (S_Element() == se ) fac = 1.0;
    else fac = 5.0;  // oder vielleicht null?

  return (int)(fac*GrundKosten());
}

int Zauber::Erfolgswert(const vector<H_Data_typen>& Typ,const Grundwerte& Werte) const
{
   assert(Typ.size()==2);
   int ifac=-2;
   if (standard[0]=="G" || standard[1]=="G") ifac=0;

   int ispez=0;
   if (Typ[0]->Short()=="Ma" || Typ[1]->Short()=="Ma") 
      ispez = get_spezial_zauber_for_magier(Werte);

   int erf = Werte.Zaubern_wert()+Werte.bo_Za() + ifac + ispez ;
   return erf;
}

int Zauber::get_spezial_zauber_for_magier(const Grundwerte& Werte) const
{
 exec sql begin declare section;
   char db_ergebnis[20];
   char db_agens[20];   
   char db_prozess[20]; 
   char db_zauber[100];
 exec sql end declare section;
 strncpy(db_zauber,Name().c_str(),sizeof(db_zauber));
 exec sql select ma,agens,prozess 
   into :db_ergebnis, :db_agens, :db_prozess
   from arkanum_zauber where name = :db_zauber;
 SQLerror::test(__FILELINE__);

 int ispez=0;
 std::string ergebnis = db_ergebnis;
 std::string agens=db_agens;
 std::string prozess=db_prozess;

 if (ergebnis!="G" && agens==Werte.Spezial()) ispez = 2;
 if (ergebnis!="G" && prozess==Werte.Spezial()) ispez = 2;
 return ispez;
}
*/