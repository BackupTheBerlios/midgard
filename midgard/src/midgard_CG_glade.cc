// generated 2001/12/12 16:43:03 CET by thoma@Tiger.
// using glademm V0.6.2b_cvs
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- /home/thoma/rollenspiel/midgard/programme/gcc_3.0/midgard/midgard.glade
// for gtk 1.2.10 and gtkmm 1.2.5
//
// Please modify the corresponding derived classes in ./src/midgard_CG.cc

#include "config.h"
#include "midgard_CG.hh"
#include <gtk--/pixmap.h>
#include "../pixmaps/Mage-Tower-locol-20.xpm"
#include <gtk--/label.h>
#include <gtk--/table.h>
#include <gtk--/frame.h>
#include <gtk--/separator.h>
#include <gtk--/fixed.h>
#include <gtk--/button.h>
#include "../pixmaps/NewChar-trans-50.xpm"
#include "../pixmaps/SaveChar-trans-50.xpm"
#include "../pixmaps/LoadChar-trans-50.xpm"
#include "../pixmaps/PrintChar-trans-50.xpm"
#include "../pixmaps/Help-trans-50.xpm"
#include "../pixmaps/Info-trans-50.xpm"
#include "../pixmaps/Exit-trans-50.xpm"
#include <gtk--/toolbar.h>
#include "../pixmaps/Dice-W100-trans-50.xpm"
#include "../pixmaps/Dices2-trans-50.xpm"
#include "../pixmaps/EditChar-trans-50.xpm"
#include "../pixmaps/CountrChar-trans-50.xpm"
#include "../pixmaps/Lang-trans-50.xpm"
#include "../pixmaps/DescrChar-trans-50.xpm"
#include <gtk--/menu.h>
#include <gtk--/menuitem.h>
#include <gtk--/box.h>
#include "../pixmaps/Dice-2W6-trans-50.xpm"
#include "../pixmaps/Edit-2W6-trans-50.xpm"
#include "../pixmaps/Dice_M-trans-50.xpm"
#include "../pixmaps/Dice_Armor-trans-50.xpm"
#include <gtk--/scrolledwindow.h>
#include "../pixmaps/Job-trans-50.xpm"
#include "../pixmaps/Dice-trans.xpm"
#include <gtk--/adjustment.h>
#include "../pixmaps/Skills-trans-50.xpm"
#include "../pixmaps/AngebSkills-trans-50.xpm"
#include "../pixmaps/Weapon-trans-50.xpm"
#include "../pixmaps/Zauber-trans-50.xpm"
#include "../pixmaps/Select-trans-50.xpm"
#include "../pixmaps/KiDo-trans-50.xpm"
#include <gtk--/notebook.h>
#include <gtk--/eventbox.h>
#include "../pixmaps/Eschar-trans-50.xpm"
#include "../pixmaps/Anpass-trans-50.xpm"
#include "../pixmaps/Armor-trans-50.xpm"
#include "../pixmaps/Steigern-trans-32.xpm"
#include "../pixmaps/Money-50.xpm"
#include <gtk--/alignment.h>
#include "../pixmaps/Reduzieren-trans-32.xpm"
#include "../pixmaps/Verlernen-trans-32.xpm"
#include "../pixmaps/Select2-trans.xpm"
#include "../pixmaps/LoadSkills-trans-50.xpm"
#include "../pixmaps/Sort_Skill-trans-50.xpm"
#include <gtk--/viewport.h>
#include <gtk--/paned.h>
#include "../pixmaps/LoadWeapon-trans-50.xpm"
#include "../pixmaps/Sort_Weapon-trans-50.xpm"
#include "../pixmaps/LearnRoll-trans-50.xpm"
#include "../pixmaps/LoadZaub-trans-50.xpm"
#include "../pixmaps/Sort_Zauber-50.xpm"
#include "../pixmaps/Sort_Zaubermittel-50.xpm"
#include "../pixmaps/Load-Kido-trans-50.xpm"
#include "../pixmaps/Sort_KiDo-trans-50.xpm"
#include "../pixmaps/LoadLang_u_Font-trans-50.xpm"
#include "../pixmaps/Sort_Lang-trans-50.xpm"
#include "../pixmaps/Lang_Script-trans-50.xpm"
#include "../pixmaps/Draco-small-frame-comp.xpm"

midgard_CG_glade::midgard_CG_glade(
) : Gtk::Window(GTK_WINDOW_TOPLEVEL)
{   
   
   Gtk::Window *midgard_CG = this;
   Gtk::Pixmap *pixmap52 = manage(new class Gtk::Pixmap(Mage_Tower_locol_20_xpm));
   Gtk::Label *label18 = manage(new class Gtk::Label("Zt"));
   gw = manage(new class Gtk::Label("X"));
   ko = manage(new class Gtk::Label("X"));
   in = manage(new class Gtk::Label("X"));
   zt = manage(new class Gtk::Label("X"));
   
   Gtk::Label *label6 = manage(new class Gtk::Label("Ko"));
   Gtk::Label *label7 = manage(new class Gtk::Label("In"));
   Gtk::Label *label4 = manage(new class Gtk::Label("St"));
   Gtk::Label *lable5 = manage(new class Gtk::Label("Gw"));
   st = manage(new class Gtk::Label("X"));
   gs = manage(new class Gtk::Label("X"));
   
   Gtk::Label *label439 = manage(new class Gtk::Label("Gs"));
   Gtk::Table *table26 = manage(new class Gtk::Table(6, 2, false));
   Gtk::Frame *frame54 = manage(new class Gtk::Frame("Grundwerte"));
   resistenz = manage(new class Gtk::Label("X"));
   gift_wert = manage(new class Gtk::Label("X"));
   
   Gtk::Label *label199 = manage(new class Gtk::Label("Abwehr"));
   abwehr_wert = manage(new class Gtk::Label("X"));
   
   Gtk::Label *label200 = manage(new class Gtk::Label("Zaubern"));
   zaubern_wert = manage(new class Gtk::Label("X"));
   
   Gtk::Label *label274 = manage(new class Gtk::Label("Gift"));
   Gtk::Label *label275 = manage(new class Gtk::Label("Resistenz"));
   Gtk::Table *table30 = manage(new class Gtk::Table(5, 2, false));
   Gtk::Frame *frame57 = manage(new class Gtk::Frame("Erfolgswerte"));
   Gtk::Label *label181 = manage(new class Gtk::Label("Ausdauer"));
   Gtk::Label *label182 = manage(new class Gtk::Label("Schaden"));
   bo_sc = manage(new class Gtk::Label("X"));
   bo_an = manage(new class Gtk::Label("X"));
   
   Gtk::Label *label184 = manage(new class Gtk::Label("Abwehr"));
   bo_ab = manage(new class Gtk::Label("X"));
   
   Gtk::Label *label185 = manage(new class Gtk::Label("Zauber"));
   bo_za = manage(new class Gtk::Label("X"));
   
   Gtk::Label *label189 = manage(new class Gtk::Label("Gift"));
   Gtk::Label *label187 = manage(new class Gtk::Label("Körpermagie"));
   Gtk::Label *label186 = manage(new class Gtk::Label("Geistesmagie"));
   bo_gi = manage(new class Gtk::Label("X"));
   bo_phk = manage(new class Gtk::Label("X"));
   bo_phs = manage(new class Gtk::Label("X"));
   bo_psy = manage(new class Gtk::Label("X"));
   bo_au = manage(new class Gtk::Label("X"));
   
   Gtk::VSeparator *vseparator15 = manage(new class Gtk::VSeparator());
   Gtk::Label *label183 = manage(new class Gtk::Label("Angriff"));
   Gtk::Label *label188 = manage(new class Gtk::Label("Umgebungsmagie"));
   Gtk::Table *table29 = manage(new class Gtk::Table(5, 5, false));
   Gtk::Frame *frame56 = manage(new class Gtk::Frame("persönliche Boni für"));
   pa = manage(new class Gtk::Label("X"));
   kaw = manage(new class Gtk::Label("X"));
   sb = manage(new class Gtk::Label("X"));
   wlw = manage(new class Gtk::Label("X"));
   rw = manage(new class Gtk::Label("X"));
   hgw = manage(new class Gtk::Label("X"));
   lpbasis = manage(new class Gtk::Label("X"));
   au = manage(new class Gtk::Label("X"));
   b = manage(new class Gtk::Label("X"));
   
   Gtk::Label *lp_basis = manage(new class Gtk::Label("LP-Basis"));
   Gtk::Label *label204 = manage(new class Gtk::Label("Au"));
   Gtk::Label *label205 = manage(new class Gtk::Label("pA"));
   Gtk::Label *label206 = manage(new class Gtk::Label("Sb"));
   Gtk::Label *label207 = manage(new class Gtk::Label("RW"));
   Gtk::Label *label25 = manage(new class Gtk::Label("B"));
   Gtk::Label *label26 = manage(new class Gtk::Label("KAW"));
   Gtk::Label *label27 = manage(new class Gtk::Label("WLW"));
   Gtk::Label *label208 = manage(new class Gtk::Label("HGW"));
   Gtk::Label *label___ = manage(new class Gtk::Label("Wk"));
   wk = manage(new class Gtk::Label("X"));
   
   Gtk::VSeparator *vseparator14 = manage(new class Gtk::VSeparator());
   Gtk::Table *table27 = manage(new class Gtk::Table(6, 5, false));
   Gtk::Frame *frame55 = manage(new class Gtk::Frame("Abgeleitete Werte"));
   Gtk::Table *table68 = manage(new class Gtk::Table(1, 4, false));
   Gtk::HSeparator *hseparator16 = manage(new class Gtk::HSeparator());
   checkbutton_Eschar = manage(new class Gtk::CheckButton("Eschar"));
   checkbutton_Gildenbrief = manage(new class Gtk::CheckButton("Gildenbrief"));
   checkbutton_Alba = manage(new class Gtk::CheckButton("Alba"));
   checkbutton_Nahuatlan = manage(new class Gtk::CheckButton("Nahuatlan"));
   checkbutton_Kuestenstaaten = manage(new class Gtk::CheckButton("Küstenstaaten"));
   checkbutton_BR = manage(new class Gtk::CheckButton("B&R"));
   checkbutton_Rawindra = manage(new class Gtk::CheckButton("Rawindra"));
   checkbutton_Waeland = manage(new class Gtk::CheckButton("Waeland"));
   checkbutton_HD = manage(new class Gtk::CheckButton("H&D"));
   checkbutton_KanThaiPan = manage(new class Gtk::CheckButton("KanThaiPan"));
   
   Gtk::Fixed *fixed4 = manage(new class Gtk::Fixed());
   checkbutton_original = manage(new class Gtk::CheckButton("Originalregeln"));
   checkbutton_info_fenster = manage(new class Gtk::CheckButton("Info fenster"));
   
   Gtk::Fixed *fixed6 = manage(new class Gtk::Fixed());
   Gtk::Table *table46 = manage(new class Gtk::Table(3, 1, false));
   Gtk::Frame *frame61 = manage(new class Gtk::Frame("Optionen"));
   Gtk::Toolbar *toolbar1 = manage(new class Gtk::Toolbar(GTK_ORIENTATION_HORIZONTAL, GTK_TOOLBAR_BOTH));
   Gtk::Button *button7 = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar1->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "Neuer\n"
		"Charakter", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(NewChar_trans_50_xpm))->gtkobj()), 0, 0));
   Gtk::Button *button8 = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar1->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "Charakter\n"
		"speichern", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(SaveChar_trans_50_xpm))->gtkobj()), 0, 0));
   Gtk::Button *button9 = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar1->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "Charakter\n"
		"laden", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(LoadChar_trans_50_xpm))->gtkobj()), 0, 0));
   toolbar1->tools().push_back(Gtk::Toolbar_Helpers::Space());
   
   Gtk::Button *button10 = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar1->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "LaTeX\n"
		"Charakterblatt", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(PrintChar_trans_50_xpm))->gtkobj()), 0, 0));
   toolbar1->tools().push_back(Gtk::Toolbar_Helpers::Space());
   
   Gtk::Button *button11 = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar1->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "Hilfe", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(Help_trans_50_xpm))->gtkobj()), 0, 0));
   Gtk::Button *button_info = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar1->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "Info", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(Info_trans_50_xpm))->gtkobj()), 0, 0));
   Gtk::Button *button12 = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar1->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "Schließen", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(Exit_trans_50_xpm))->gtkobj()), 0, 0));
   Gtk::Toolbar *toolbar2 = manage(new class Gtk::Toolbar(GTK_ORIENTATION_HORIZONTAL, GTK_TOOLBAR_BOTH));
   button_grundwerte = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar2->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "Grundwerte\n"
		"würfeln", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(Dice_W100_trans_50_xpm))->gtkobj()), 0, 0));
   button_abg_werte = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar2->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "Abgeleitete\n"
		"Werte", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(Dices2_trans_50_xpm))->gtkobj()), 0, 0));
   
   Gtk::Button *button15 = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar2->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "Werte\n"
		"editieren", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(EditChar_trans_50_xpm))->gtkobj()), 0, 0));
   toolbar2->tools().push_back(Gtk::Toolbar_Helpers::Space());
   button_herkunft = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar2->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "Herkunftsland\n"
		"auswählen", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(CountrChar_trans_50_xpm))->gtkobj()), 0, 0));
   button_sprache = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar2->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "Muttersprache(n)\n"
		"wählen", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(Lang_trans_50_xpm))->gtkobj()), 0, 0));
   button_beschreibung = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar2->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "Charakter\n"
		"beschreibung", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(DescrChar_trans_50_xpm))->gtkobj()), 0, 0));
   
   Gtk::Table *table65 = manage(new class Gtk::Table(2, 2, false));
   Gtk::HSeparator *hseparator20 = manage(new class Gtk::HSeparator());
   typauswahl = manage(new class Gtk::OptionMenu());
   typauswahl_2 = manage(new class Gtk::OptionMenu());
   optionmenu_spezies = manage(new class Gtk::OptionMenu());
   
   Gtk::RadioButton::Group _RadioBGroup_geschlecht;
   radiobutton_frau = manage(new class Gtk::RadioButton(_RadioBGroup_geschlecht, "weiblich"));
   radiobutton_mann = manage(new class Gtk::RadioButton(_RadioBGroup_geschlecht, "männlich"));
   
   Gtk::Fixed *fixed5 = manage(new class Gtk::Fixed());
   Gtk::Table *table66 = manage(new class Gtk::Table(2, 3, false));
   Gtk::HSeparator *hseparator1 = manage(new class Gtk::HSeparator());
   name_charakter = manage(new class Gtk::Label(""));
   
   Gtk::Frame *frame30 = manage(new class Gtk::Frame("Name des Charakters"));
   spezialisierung = manage(new class Gtk::Label(""));
   
   Gtk::Frame *frame23 = manage(new class Gtk::Frame("Spezialisierung"));
   glaube = manage(new class Gtk::Label(""));
   
   Gtk::Frame *frame22 = manage(new class Gtk::Frame("Glaube"));
   alter = manage(new class Gtk::Label(""));
   
   Gtk::Frame *frame14 = manage(new class Gtk::Frame("Alter"));
   name_spieler = manage(new class Gtk::Label(""));
   
   Gtk::Frame *frame31 = manage(new class Gtk::Frame("Name des Spielers"));
   stand = manage(new class Gtk::Label(""));
   
   Gtk::Frame *frame20 = manage(new class Gtk::Frame("Stand"));
   gestalt = manage(new class Gtk::Label(""));
   
   Gtk::Frame *frame15 = manage(new class Gtk::Frame("Gestalt"));
   groesse = manage(new class Gtk::Label(""));
   
   Gtk::Frame *frame17 = manage(new class Gtk::Frame("Größe"));
   grad = manage(new class Gtk::Label("1"));
   
   Gtk::Frame *frame18 = manage(new class Gtk::Frame("Grad"));
   herkunft = manage(new class Gtk::Label(""));
   
   Gtk::Frame *frame21 = manage(new class Gtk::Frame("Herkunft"));
   gewicht = manage(new class Gtk::Label(""));
   
   Gtk::Frame *frame16 = manage(new class Gtk::Frame("Gewicht"));
   lp = manage(new class Gtk::Label("X"));
   
   Gtk::Frame *frame10 = manage(new class Gtk::Frame("LP"));
   ap = manage(new class Gtk::Label("X"));
   
   Gtk::Frame *frame11 = manage(new class Gtk::Frame("AP"));
   Gtk::Table *table67 = manage(new class Gtk::Table(4, 4, true));
   Gtk::Table *table1 = manage(new class Gtk::Table(7, 6, false));
   Gtk::Frame *frame4 = manage(new class Gtk::Frame());
   Gtk::Label *grund = manage(new class Gtk::Label("Grundwerte"));
   Gtk::HSeparator *hseparator13 = manage(new class Gtk::HSeparator());
   lernpunkte_fach = manage(new class Gtk::Label(""));
   
   Gtk::Frame *frame25 = manage(new class Gtk::Frame("Fachkenntnisse"));
   lernpunkte_allgemein = manage(new class Gtk::Label(""));
   
   Gtk::Frame *frame26 = manage(new class Gtk::Frame("Allgemeinwissen"));
   lernpunkte_unge = manage(new class Gtk::Label(""));
   
   Gtk::Frame *frame80 = manage(new class Gtk::Frame("Ungewöhnl. Fertigk."));
   lernpunkte_w = manage(new class Gtk::Label(""));
   
   Gtk::Frame *frame27 = manage(new class Gtk::Frame("Waffen"));
   lernpunkte_z = manage(new class Gtk::Label(""));
   
   Gtk::Frame *frame28 = manage(new class Gtk::Frame("Zauber"));
   Gtk::HBox *hbox7 = manage(new class Gtk::HBox(false, 0));
   Gtk::Frame *frame24 = manage(new class Gtk::Frame("Lernpunkte für"));
   Gtk::HSeparator *hseparator14 = manage(new class Gtk::HSeparator());
   Gtk::Toolbar *toolbar3 = manage(new class Gtk::Toolbar(GTK_ORIENTATION_HORIZONTAL, GTK_TOOLBAR_BOTH));
   Gtk::Button *button19 = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar3->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "Lernpunkte\n"
		"würfeln", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(Dice_2W6_trans_50_xpm))->gtkobj()), 0, 0));
   Gtk::Button *button20 = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar3->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "Lernpunkte\n"
		"editieren", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(Edit_2W6_trans_50_xpm))->gtkobj()), 0, 0));
   toolbar3->tools().push_back(Gtk::Toolbar_Helpers::Space());
   button_geld_waffen = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar3->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "Geld &\n"
		"Waffen", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(Dice_M_trans_50_xpm))->gtkobj()), 0, 0));
   button_ruestung = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar3->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "Rüstung\n"
		"würfeln", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(Dice_Armor_trans_50_xpm))->gtkobj()), 0, 0));
   fertig_typ = manage(new class Gtk::Label("label280"));
   
   Gtk::Frame *frame59 = manage(new class Gtk::Frame("Charakterklasse"));
   berufe_clist = manage(new class Gtk::CList(3));
   
   Gtk::ScrolledWindow *scrolledwindow43 = manage(new class Gtk::ScrolledWindow());
   Gtk::Toolbar *toolbar8 = manage(new class Gtk::Toolbar(GTK_ORIENTATION_HORIZONTAL, GTK_TOOLBAR_BOTH));
   Gtk::Button *button29 = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar8->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "Beruf auswählen", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(Job_trans_50_xpm))->gtkobj()), 0, 0));
   toolbar8->tools().push_back(Gtk::Toolbar_Helpers::Space());
   button_beruf_erfolgswert = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar8->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "Erfolgswert würfeln", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(Dice_trans_xpm))->gtkobj()), 0, 0));
   label_beruf_ew = manage(new class Gtk::Label("Wert eingeben"));
   
   Gtk::Adjustment *spinbutton_beruferfolgesert_adj = manage(new class Gtk::Adjustment(10, 0, 20, 1, 1, 1));
   spinbutton_beruferfolgesert = manage(new class Gtk::SpinButton(*spinbutton_beruferfolgesert_adj, 1, 0));
   vbox_beruferfolgswert = manage(new class Gtk::VBox(false, 0));
   table_beruf = manage(new class Gtk::Table(2, 3, false));
   
   Gtk::Label *label343 = manage(new class Gtk::Label("Beruf"));
   Gtk::Pixmap *pixmap26 = manage(new class Gtk::Pixmap(Job_trans_50_xpm));
   hbox_beruf = manage(new class Gtk::HBox(false, 0));
   fertigkeiten_clist = manage(new class Gtk::CList(2));
   
   Gtk::ScrolledWindow *scrolledwindow42 = manage(new class Gtk::ScrolledWindow());
   clist_sinne = manage(new class Gtk::CList(2));
   
   Gtk::ScrolledWindow *scrolledwindow59 = manage(new class Gtk::ScrolledWindow());
   Gtk::Toolbar *toolbar13 = manage(new class Gtk::Toolbar(GTK_ORIENTATION_HORIZONTAL, GTK_TOOLBAR_BOTH));
   button_fertigkeiten = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar13->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "Fertigkeiten auswählen", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(Skills_trans_50_xpm))->gtkobj()), 0, 0));
   toolbar13->tools().push_back(Gtk::Toolbar_Helpers::Space());
   
   Gtk::Button *button42 = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar13->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "angeborene Fertigkeit(en)", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(AngebSkills_trans_50_xpm))->gtkobj()), 0, 0));
   table_fertigkeit = manage(new class Gtk::Table(2, 4, false));
   
   Gtk::Label *label344 = manage(new class Gtk::Label("Fertigkeiten"));
   Gtk::Pixmap *pixmap27 = manage(new class Gtk::Pixmap(Skills_trans_50_xpm));
   hbox_fertigkeit = manage(new class Gtk::HBox(false, 0));
   label_spezialwaffe = manage(new class Gtk::Label("(Zur Wahl einer Spezialwaffe:\n"
		"Waffe selektieren)"));
   waffen_clist = manage(new class Gtk::CList(2));
   
   Gtk::ScrolledWindow *scrolledwindow41 = manage(new class Gtk::ScrolledWindow());
   Gtk::Toolbar *toolbar7 = manage(new class Gtk::Toolbar(GTK_ORIENTATION_HORIZONTAL, GTK_TOOLBAR_BOTH));
   Gtk::Button *button28 = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar7->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "Waffen auswählen", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(Weapon_trans_50_xpm))->gtkobj()), 0, 0));
   table_waffen = manage(new class Gtk::Table(2, 3, false));
   
   Gtk::Label *label345 = manage(new class Gtk::Label("Waffen"));
   Gtk::Pixmap *pixmap28 = manage(new class Gtk::Pixmap(Weapon_trans_50_xpm));
   hbox_waffen = manage(new class Gtk::HBox(false, 0));
   zauber_clist = manage(new class Gtk::CList(2));
   
   Gtk::ScrolledWindow *scrolledwindow40 = manage(new class Gtk::ScrolledWindow());
   Gtk::Toolbar *toolbar6 = manage(new class Gtk::Toolbar(GTK_ORIENTATION_HORIZONTAL, GTK_TOOLBAR_BOTH));
   Gtk::Button *button27 = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar6->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "Zauber auswählen", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(Zauber_trans_50_xpm))->gtkobj()), 0, 0));
   option_magier_spezialgebiet = manage(new class Gtk::OptionMenu());
   table_magier_lernen = manage(new class Gtk::Table(2, 3, false));
   
   Gtk::Label *label279 = manage(new class Gtk::Label("Zauber"));
   Gtk::Pixmap *pixmap58 = manage(new class Gtk::Pixmap(Zauber_trans_50_xpm));
   hbox_zauber = manage(new class Gtk::HBox(false, 0));
   clist_kido = manage(new class Gtk::CList(4));
   
   Gtk::ScrolledWindow *scrolledwindow46 = manage(new class Gtk::ScrolledWindow());
   Gtk::Toolbar *toolbar16 = manage(new class Gtk::Toolbar(GTK_ORIENTATION_HORIZONTAL, GTK_TOOLBAR_BOTH));
   button_kido_auswahl = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar16->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "KiDo Fertigkeiten\n"
		" auswählen", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(Select_trans_50_xpm))->gtkobj()), 0, 0));
   optionmenu_KiDo_Stile = manage(new class Gtk::OptionMenu());
   table_kido_lernen = manage(new class Gtk::Table(2, 3, false));
   
   Gtk::Label *label371 = manage(new class Gtk::Label("KiDo"));
   Gtk::Pixmap *pixmap46 = manage(new class Gtk::Pixmap(KiDo_trans_50_xpm));
   hbox_kido = manage(new class Gtk::HBox(false, 0));
   
   Gtk::Notebook *notebook3 = manage(new class Gtk::Notebook());
   Gtk::Table *table4 = manage(new class Gtk::Table(5, 4, false));
   frame_lernschema = manage(new class Gtk::Frame());
   fertigkeiten = manage(new class Gtk::Label("Lernschema"));
   gfp = manage(new class Gtk::Label("0"));
   
   Gtk::Frame *frame41 = manage(new class Gtk::Frame("GFP"));
   label_aep = manage(new class Gtk::Label("0"));
   
   Gtk::Frame *frame67 = manage(new class Gtk::Frame("AEP"));
   label_kep = manage(new class Gtk::Label("0"));
   
   Gtk::Frame *frame68 = manage(new class Gtk::Frame("KEP"));
   label_zep = manage(new class Gtk::Label("0"));
   
   Gtk::Frame *frame69 = manage(new class Gtk::Frame("ZEP"));
   Gtk::HBox *hbox30 = manage(new class Gtk::HBox(false, 0));
   label_gold = manage(new class Gtk::Label("0"));
   
   Gtk::Frame *frame70 = manage(new class Gtk::Frame("Gold"));
   label_silber = manage(new class Gtk::Label("0"));
   
   Gtk::Frame *frame71 = manage(new class Gtk::Frame("Silber"));
   label_kupfer = manage(new class Gtk::Label("0"));
   
   Gtk::Frame *frame72 = manage(new class Gtk::Frame("Kupfer"));
   Gtk::HBox *hbox31 = manage(new class Gtk::HBox(false, 0));
   Gtk::Table *table72 = manage(new class Gtk::Table(3, 3, false));
   label_EP = manage(new class Gtk::Label("50%"));
   label_Gold = manage(new class Gtk::Label("50%"));
   
   Gtk::Adjustment *vscale_EP_Gold_adj = manage(new class Gtk::Adjustment(50, 33, 68, 1, 1, 1));
   vscale_EP_Gold = manage(new class Gtk::VScale(*vscale_EP_Gold_adj));
   
   Gtk::Table *table73 = manage(new class Gtk::Table(3, 1, false));
   Gtk::EventBox *eventbox1 = manage(new class Gtk::EventBox());
   Gtk::Toolbar *toolbar37 = manage(new class Gtk::Toolbar(GTK_ORIENTATION_HORIZONTAL, GTK_TOOLBAR_BOTH));
   Gtk::Button *button_EP = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar37->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "Erfahrungspunkte\n"
		"eingeben", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(Eschar_trans_50_xpm))->gtkobj()), 0, 0));
   checkbutton_EP_Geld = manage(new class Gtk::CheckButton("mit EP steigern"));
   
   Gtk::Table *table74 = manage(new class Gtk::Table(2, 1, false));
   Gtk::Toolbar *toolbar38 = manage(new class Gtk::Toolbar(GTK_ORIENTATION_HORIZONTAL, GTK_TOOLBAR_BOTH));
   Gtk::Button *button_grad = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar38->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "Grad\n"
		"setzen", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(Anpass_trans_50_xpm))->gtkobj()), 0, 0));
   Gtk::Button *button_grad_ausdauer = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar38->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "Ausdauer\n"
		"würfeln", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(Dice_2W6_trans_50_xpm))->gtkobj()), 0, 0));
   Gtk::Button *button_grad_abwehr = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar38->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "Abwehr", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(Armor_trans_50_xpm))->gtkobj()), 0, 0));
   Gtk::Button *button_grad_zaubern = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar38->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "Zaubern", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(Zauber_trans_50_xpm))->gtkobj()), 0, 0));
   Gtk::Button *button_grad_resistenz = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar38->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "Resistenz", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(Steigern_trans_32_xpm))->gtkobj()), 0, 0));
   Gtk::Button *button_grad_basiswerte = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar38->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "Basiswerte\n"
		"würfeln", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(Dice_W100_trans_50_xpm))->gtkobj()), 0, 0));
   Gtk::Toolbar *toolbar17 = manage(new class Gtk::Toolbar(GTK_ORIENTATION_HORIZONTAL, GTK_TOOLBAR_BOTH));
   Gtk::Button *grad_anstieg = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar17->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "   Grad, Ausdauer, Abwehr, Zaubern, Resistenz an Grad anpassen   ", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(Anpass_trans_50_xpm))->gtkobj()), 0, 0));
   Gtk::Table *table75 = manage(new class Gtk::Table(2, 1, false));
   steigern_typ = manage(new class Gtk::Label("label280"));
   
   Gtk::Frame *frame65 = manage(new class Gtk::Frame("Charakterklasse"));
   label_s_ap = manage(new class Gtk::Label("10"));
   
   Gtk::Frame *frame74 = manage(new class Gtk::Frame("AP"));
   label_s_resistenz = manage(new class Gtk::Label("1"));
   
   Gtk::Frame *frame77 = manage(new class Gtk::Frame("Resistenz"));
   label_s_zaubern = manage(new class Gtk::Label("1"));
   
   Gtk::Frame *frame76 = manage(new class Gtk::Frame("Zaubern"));
   label_s_abwehr = manage(new class Gtk::Label("1"));
   
   Gtk::Frame *frame75 = manage(new class Gtk::Frame("Abwehr"));
   label_s_grad = manage(new class Gtk::Label("1"));
   
   Gtk::Frame *frame73 = manage(new class Gtk::Frame("Grad"));
   Gtk::Table *table76 = manage(new class Gtk::Table(3, 3, false));
   Gtk::Pixmap *pixmap62 = manage(new class Gtk::Pixmap(Money_50_xpm));
   Gtk::Label *label408 = manage(new class Gtk::Label("Geld"));
   Gtk::HBox *hbox32 = manage(new class Gtk::HBox(false, 0));
   Gtk::Button *button66 = manage(new class Gtk::Button());
   Gtk::Pixmap *pixmap63 = manage(new class Gtk::Pixmap(Weapon_trans_50_xpm));
   Gtk::Label *label409 = manage(new class Gtk::Label("Waffen"));
   Gtk::HBox *hbox33 = manage(new class Gtk::HBox(false, 0));
   Gtk::Button *button67 = manage(new class Gtk::Button());
   Gtk::Pixmap *pixmap64 = manage(new class Gtk::Pixmap(Armor_trans_50_xpm));
   Gtk::Label *label410 = manage(new class Gtk::Label("Rüstung"));
   Gtk::HBox *hbox34 = manage(new class Gtk::HBox(false, 0));
   Gtk::Button *button68 = manage(new class Gtk::Button());
   Gtk::Alignment *alignment1 = manage(new class Gtk::Alignment());
   Gtk::Table *table42 = manage(new class Gtk::Table(3, 1, false));
   Gtk::Frame *frame78 = manage(new class Gtk::Frame("Besitztümer"));
   Gtk::RadioButton::Group _RadioBGroup_fert;
   radio_fert_reduzieren = manage(new class Gtk::RadioButton(_RadioBGroup_fert, "Reduzieren"));
   radio_fert_verlernen = manage(new class Gtk::RadioButton(_RadioBGroup_fert, "Verlernen"));
   
   Gtk::Pixmap *pixmap35 = manage(new class Gtk::Pixmap(Reduzieren_trans_32_xpm));
   Gtk::Pixmap *pixmap36 = manage(new class Gtk::Pixmap(Verlernen_trans_32_xpm));
   radio_fert_steigern = manage(new class Gtk::RadioButton(_RadioBGroup_fert, "Steigern   "));
   
   Gtk::Pixmap *pixmap34 = manage(new class Gtk::Pixmap(Steigern_trans_32_xpm));
   Gtk::Table *table53 = manage(new class Gtk::Table(3, 2, false));
   Gtk::Frame *frame43 = manage(new class Gtk::Frame());
   Gtk::RadioButton::Group _RadioBGroup_praxispunkt_f;
   radiobutton_praxis_wuerfeln_fertigkeiten = manage(new class Gtk::RadioButton(_RadioBGroup_praxispunkt_f, ""));
   
   Gtk::Pixmap *pixmap44 = manage(new class Gtk::Pixmap(Select2_trans_xpm));
   togglebutton_praxispunkte_fertigkeiten = manage(new class Gtk::ToggleButton("Steigern mit \n"
		"Praxispunkten"));
   radiobutton_praxis_auto_fertigkeiten = manage(new class Gtk::RadioButton(_RadioBGroup_praxispunkt_f, ""));
   
   Gtk::Table *table57 = manage(new class Gtk::Table(3, 2, false));
   Gtk::Frame *frame49 = manage(new class Gtk::Frame("Praxispunkte"));
   Gtk::Toolbar *toolbar14 = manage(new class Gtk::Toolbar(GTK_ORIENTATION_HORIZONTAL, GTK_TOOLBAR_BOTH));
   Gtk::Button *button43 = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar14->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "Fertigkeiten\n"
		"laden", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(LoadSkills_trans_50_xpm))->gtkobj()), 0, 0));
   toolbar14->tools().push_back(Gtk::Toolbar_Helpers::Space());
   
   Gtk::Button *button_fertigkeiten_sort = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar14->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "Fertigkeiten\n"
		"sortieren", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(Sort_Skill_trans_50_xpm))->gtkobj()), 0, 0));
   alte_fert_tree = new class SimpleTree(5, 5);
   
   Gtk::Viewport *viewport4 = manage(new class Gtk::Viewport());
   Gtk::ScrolledWindow *scrolledwindow53 = manage(new class Gtk::ScrolledWindow());
   neue_fert_tree = new class SimpleTree(5, 5);
   
   Gtk::Viewport *viewport6 = manage(new class Gtk::Viewport());
   Gtk::ScrolledWindow *scrolledwindow55 = manage(new class Gtk::ScrolledWindow());
   Gtk::VPaned *vpaned1 = manage(new class Gtk::VPaned());
   clist_landauswahl = manage(new class Gtk::CList(1));
   
   Gtk::Viewport *viewport24 = manage(new class Gtk::Viewport());
   scrolledwindow_landauswahl = manage(new class Gtk::ScrolledWindow());
   
   Gtk::Table *table15 = manage(new class Gtk::Table(2, 5, false));
   Gtk::Label *label346 = manage(new class Gtk::Label("Fertigkeiten"));
   Gtk::Pixmap *pixmap30 = manage(new class Gtk::Pixmap(Skills_trans_50_xpm));
   Gtk::HBox *hbox24 = manage(new class Gtk::HBox(false, 0));
   Gtk::RadioButton::Group _RadioBGroup_waffen;
   radio_waffen_steigern = manage(new class Gtk::RadioButton(_RadioBGroup_waffen, "Steigern  "));
   radio_waffen_reduzieren = manage(new class Gtk::RadioButton(_RadioBGroup_waffen, "Reduzieren"));
   
   Gtk::Pixmap *pixmap37 = manage(new class Gtk::Pixmap(Steigern_trans_32_xpm));
   Gtk::Pixmap *pixmap38 = manage(new class Gtk::Pixmap(Reduzieren_trans_32_xpm));
   Gtk::Table *table54 = manage(new class Gtk::Table(2, 2, false));
   Gtk::Frame *frame47 = manage(new class Gtk::Frame());
   Gtk::Pixmap *pixmap43 = manage(new class Gtk::Pixmap(Select2_trans_xpm));
   togglebutton_praxispunkte_waffen = manage(new class Gtk::ToggleButton("Steigern mit \n"
		"Praxispunkten"));
   
   Gtk::RadioButton::Group _RadioBGroup_praxispunkt_w;
   radiobutton_praxis_wuerfeln_waffen = manage(new class Gtk::RadioButton(_RadioBGroup_praxispunkt_w, ""));
   radiobutton_praxis_auto_waffen = manage(new class Gtk::RadioButton(_RadioBGroup_praxispunkt_w, ""));
   
   Gtk::Table *table56 = manage(new class Gtk::Table(3, 2, false));
   Gtk::Frame *frame48 = manage(new class Gtk::Frame("Praxispunkte"));
   Gtk::Table *table20 = manage(new class Gtk::Table(2, 4, false));
   Gtk::Table *table19 = manage(new class Gtk::Table(1, 1, false));
   Gtk::Toolbar *toolbar4 = manage(new class Gtk::Toolbar(GTK_ORIENTATION_HORIZONTAL, GTK_TOOLBAR_BOTH));
   Gtk::Button *button23 = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar4->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "Waffen laden", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(LoadWeapon_trans_50_xpm))->gtkobj()), 0, 0));
   toolbar4->tools().push_back(Gtk::Toolbar_Helpers::Space());
   
   Gtk::Button *button_waffen_sort = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar4->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "Waffen sortieren", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(Sort_Weapon_trans_50_xpm))->gtkobj()), 0, 0));
   radiobutton_grundkenntnisse_verlernen = manage(new class Gtk::RadioButton(_RadioBGroup_waffen, "Verlernen"));
   
   Gtk::Pixmap *pixmap50 = manage(new class Gtk::Pixmap(Verlernen_trans_32_xpm));
   Gtk::Table *table63 = manage(new class Gtk::Table(1, 2, false));
   Gtk::Frame *frame64 = manage(new class Gtk::Frame());
   Gtk::VBox *vbox8 = manage(new class Gtk::VBox(false, 0));
   Gtk::Label *label284 = manage(new class Gtk::Label("Waffen"));
   alte_waffen_tree = new class SimpleTree(5, 5);
   
   Gtk::Viewport *viewport7 = manage(new class Gtk::Viewport());
   Gtk::ScrolledWindow *scrolledwindow30 = manage(new class Gtk::ScrolledWindow());
   neue_waffen_tree = new class SimpleTree(4, 4);
   
   Gtk::Viewport *viewport8 = manage(new class Gtk::Viewport());
   Gtk::ScrolledWindow *scrolledwindow31 = manage(new class Gtk::ScrolledWindow());
   Gtk::VPaned *vpaned6 = manage(new class Gtk::VPaned());
   Gtk::VBox *vbox16 = manage(new class Gtk::VBox(false, 0));
   Gtk::Label *label283 = manage(new class Gtk::Label("Grundkenntnisse"));
   alte_grund_tree = new class SimpleTree(2, 2);
   
   Gtk::Viewport *viewport12 = manage(new class Gtk::Viewport());
   Gtk::ScrolledWindow *scrolledwindow32 = manage(new class Gtk::ScrolledWindow());
   neue_grund_tree = new class SimpleTree(3, 3);
   
   Gtk::Viewport *viewport13 = manage(new class Gtk::Viewport());
   Gtk::ScrolledWindow *scrolledwindow11 = manage(new class Gtk::ScrolledWindow());
   Gtk::VPaned *vpaned5 = manage(new class Gtk::VPaned());
   Gtk::VBox *vbox15 = manage(new class Gtk::VBox(false, 0));
   Gtk::HPaned *hpaned2 = manage(new class Gtk::HPaned());
   Gtk::Table *table18 = manage(new class Gtk::Table(2, 3, false));
   Gtk::Label *label221 = manage(new class Gtk::Label("Waffen"));
   Gtk::Pixmap *pixmap31 = manage(new class Gtk::Pixmap(Weapon_trans_50_xpm));
   Gtk::HBox *hbox25 = manage(new class Gtk::HBox(false, 0));
   Gtk::Toolbar *toolbar15 = manage(new class Gtk::Toolbar(GTK_ORIENTATION_HORIZONTAL, GTK_TOOLBAR_BOTH));
   spruchrolle = Gtk::wrap((GtkToggleButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar15->gtkobj()), GTK_TOOLBAR_CHILD_TOGGLEBUTTON, 0, "Lernen von Spruchrolle", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(LearnRoll_trans_50_xpm))->gtkobj()), 0, 0));
   
   Gtk::RadioButton::Group _RadioBGroup_spruchrolle;
   radio_spruchrolle_wuerfeln = manage(new class Gtk::RadioButton(_RadioBGroup_spruchrolle, ""));
   
   Gtk::Pixmap *pixmap42 = manage(new class Gtk::Pixmap(Select2_trans_xpm));
   radio_spruchrolle_auto = manage(new class Gtk::RadioButton(_RadioBGroup_spruchrolle, ""));
   
   Gtk::Table *table50 = manage(new class Gtk::Table(2, 2, false));
   Gtk::HBox *hbox28 = manage(new class Gtk::HBox(false, 0));
   Gtk::Frame *frame60 = manage(new class Gtk::Frame("Spruchrollen"));
   Gtk::Toolbar *toolbar10 = manage(new class Gtk::Toolbar(GTK_ORIENTATION_HORIZONTAL, GTK_TOOLBAR_BOTH));
   Gtk::Button *button34 = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar10->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "Zauber laden", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(LoadZaub_trans_50_xpm))->gtkobj()), 0, 0));
   toolbar10->tools().push_back(Gtk::Toolbar_Helpers::Space());
   
   Gtk::Button *button_zauber_sort = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar10->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "Zauber\n"
		"sortieren", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(Sort_Zauber_50_xpm))->gtkobj()), 0, 0));
   Gtk::Button *button_zaubermittel_sort = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar10->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "Zaubermittel\n"
		"sortieren", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(Sort_Zaubermittel_50_xpm))->gtkobj()), 0, 0));
   checkbutton_alle_zauber = manage(new class Gtk::CheckButton("Alle Zauber anzeigen"));
   checkbutton_beschwoerungen = manage(new class Gtk::CheckButton("Beschwörungen"));
   checkbutton_zaubermittel = manage(new class Gtk::CheckButton("Zaubermittel anzeigen"));
   checkbutton_zaubersalze = manage(new class Gtk::CheckButton("Zaubersalze"));
   
   Gtk::Table *table61 = manage(new class Gtk::Table(2, 2, false));
   Gtk::Frame *frame63 = manage(new class Gtk::Frame("Zusätzlich anzeigen"));
   Gtk::Table *table44 = manage(new class Gtk::Table(1, 3, false));
   Gtk::Table *table21 = manage(new class Gtk::Table(1, 1, false));
   Gtk::Frame *frame44 = manage(new class Gtk::Frame());
   Gtk::Label *label379 = manage(new class Gtk::Label("Zauber"));
   alte_zauber_tree = new class SimpleTree(4, 4);
   
   Gtk::Viewport *viewport3 = manage(new class Gtk::Viewport());
   Gtk::ScrolledWindow *scrolledwindow33 = manage(new class Gtk::ScrolledWindow());
   neue_zauber_tree = new class SimpleTree(5, 5);
   
   Gtk::Viewport *viewport5 = manage(new class Gtk::Viewport());
   Gtk::ScrolledWindow *scrolledwindow34 = manage(new class Gtk::ScrolledWindow());
   Gtk::VPaned *vpaned2 = manage(new class Gtk::VPaned());
   Gtk::VBox *vbox17 = manage(new class Gtk::VBox(false, 0));
   Gtk::Label *label380 = manage(new class Gtk::Label("Zaubermittel"));
   alte_zaubermittel_tree = new class SimpleTree(4, 4);
   
   Gtk::Viewport *viewport10 = manage(new class Gtk::Viewport());
   Gtk::ScrolledWindow *scrolledwindow51 = manage(new class Gtk::ScrolledWindow());
   neue_zaubermittel_tree = new class SimpleTree(6, 6);
   
   Gtk::Viewport *viewport11 = manage(new class Gtk::Viewport());
   Gtk::ScrolledWindow *scrolledwindow52 = manage(new class Gtk::ScrolledWindow());
   Gtk::VPaned *vpaned8 = manage(new class Gtk::VPaned());
   Gtk::VBox *vbox18 = manage(new class Gtk::VBox(false, 0));
   Gtk::HPaned *hpaned3 = manage(new class Gtk::HPaned());
   table_magier_steigern = manage(new class Gtk::Table(2, 1, false));
   
   Gtk::Label *label222 = manage(new class Gtk::Label("Zauber"));
   Gtk::Pixmap *pixmap32 = manage(new class Gtk::Pixmap(Zauber_trans_50_xpm));
   Gtk::HBox *hbox26 = manage(new class Gtk::HBox(false, 0));
   Gtk::Toolbar *toolbar34 = manage(new class Gtk::Toolbar(GTK_ORIENTATION_HORIZONTAL, GTK_TOOLBAR_BOTH));
   Gtk::Button *WidgetjXyMKHQ = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar34->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "Techniken laden", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(Load_Kido_trans_50_xpm))->gtkobj()), 0, 0));
   toolbar34->tools().push_back(Gtk::Toolbar_Helpers::Space());
   
   Gtk::Button *button_kido_sort = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar34->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "Techniken sortieren", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(Sort_KiDo_trans_50_xpm))->gtkobj()), 0, 0));
   Gtk::Table *table60 = manage(new class Gtk::Table(1, 3, false));
   Gtk::Table *table59 = manage(new class Gtk::Table(1, 2, false));
   Gtk::Frame *frame62 = manage(new class Gtk::Frame());
   alte_kido_tree = new class SimpleTree(6, 6);
   
   Gtk::Viewport *viewport14 = manage(new class Gtk::Viewport());
   Gtk::ScrolledWindow *scrolledwindow49 = manage(new class Gtk::ScrolledWindow());
   neue_kido_tree = new class SimpleTree(6, 6);
   
   Gtk::Viewport *viewport15 = manage(new class Gtk::Viewport());
   Gtk::ScrolledWindow *scrolledwindow50 = manage(new class Gtk::ScrolledWindow());
   Gtk::VPaned *vpaned7 = manage(new class Gtk::VPaned());
   table_kido_steigern = manage(new class Gtk::Table(2, 1, false));
   
   Gtk::Label *label370 = manage(new class Gtk::Label("KiDo"));
   Gtk::Pixmap *pixmap45 = manage(new class Gtk::Pixmap(KiDo_trans_50_xpm));
   Gtk::HBox *hbox29 = manage(new class Gtk::HBox(false, 0));
   Gtk::Toolbar *toolbar9 = manage(new class Gtk::Toolbar(GTK_ORIENTATION_HORIZONTAL, GTK_TOOLBAR_BOTH));
   Gtk::Button *button33 = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar9->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "Sprachen & Schriften laden", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(LoadLang_u_Font_trans_50_xpm))->gtkobj()), 0, 0));
   toolbar9->tools().push_back(Gtk::Toolbar_Helpers::Space());
   
   Gtk::Button *button_sprache_sort = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar9->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "Sprachen sortieren", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(Sort_Lang_trans_50_xpm))->gtkobj()), 0, 0));
   Gtk::Pixmap *pixmap40 = manage(new class Gtk::Pixmap(Reduzieren_trans_32_xpm));
   Gtk::Pixmap *pixmap41 = manage(new class Gtk::Pixmap(Verlernen_trans_32_xpm));
   Gtk::RadioButton::Group _RadioBGroup_sprache;
   radio_sprache_steigern = manage(new class Gtk::RadioButton(_RadioBGroup_sprache, "Steigern   "));
   radio_sprache_reduzieren = manage(new class Gtk::RadioButton(_RadioBGroup_sprache, "Reduzieren"));
   radio_sprache_verlernen = manage(new class Gtk::RadioButton(_RadioBGroup_sprache, "Verlernen"));
   
   Gtk::Pixmap *pixmap39 = manage(new class Gtk::Pixmap(Steigern_trans_32_xpm));
   Gtk::Table *table55 = manage(new class Gtk::Table(3, 2, false));
   Gtk::Frame *frame52 = manage(new class Gtk::Frame());
   Gtk::Label *label282 = manage(new class Gtk::Label("Sprachen"));
   alte_sprache_tree = new class SimpleTree(5, 5);
   
   Gtk::Viewport *viewport18 = manage(new class Gtk::Viewport());
   Gtk::ScrolledWindow *scrolledwindow26 = manage(new class Gtk::ScrolledWindow());
   neue_sprache_tree = new class SimpleTree(3, 3);
   
   Gtk::Viewport *viewport19 = manage(new class Gtk::Viewport());
   Gtk::ScrolledWindow *scrolledwindow23 = manage(new class Gtk::ScrolledWindow());
   Gtk::VPaned *vpaned3 = manage(new class Gtk::VPaned());
   Gtk::VBox *vbox14 = manage(new class Gtk::VBox(false, 0));
   Gtk::Label *label281 = manage(new class Gtk::Label("Schriften"));
   alte_schrift_tree = new class SimpleTree(3, 3);
   
   Gtk::Viewport *viewport16 = manage(new class Gtk::Viewport());
   Gtk::ScrolledWindow *scrolledwindow27 = manage(new class Gtk::ScrolledWindow());
   neue_schrift_tree = new class SimpleTree(3, 3);
   
   Gtk::Viewport *viewport17 = manage(new class Gtk::Viewport());
   Gtk::ScrolledWindow *scrolledwindow24 = manage(new class Gtk::ScrolledWindow());
   Gtk::VPaned *vpaned4 = manage(new class Gtk::VPaned());
   Gtk::VBox *vbox13 = manage(new class Gtk::VBox(false, 0));
   Gtk::HPaned *hpaned1 = manage(new class Gtk::HPaned());
   Gtk::Table *table24 = manage(new class Gtk::Table(2, 3, false));
   Gtk::Label *label254 = manage(new class Gtk::Label("Sprachen\n"
		"& Schriften"));
   Gtk::Pixmap *pixmap33 = manage(new class Gtk::Pixmap(Lang_Script_trans_50_xpm));
   Gtk::HBox *hbox27 = manage(new class Gtk::HBox(false, 0));
   Gtk::Notebook *notebook2 = manage(new class Gtk::Notebook());
   Gtk::Table *table14 = manage(new class Gtk::Table(2, 6, false));
   frame_steigern = manage(new class Gtk::Frame());
   steigern = manage(new class Gtk::Label("Steigern"));
   
   Gtk::Toolbar *toolbar39 = manage(new class Gtk::Toolbar(GTK_ORIENTATION_HORIZONTAL, GTK_TOOLBAR_BOTH));
   Gtk::Button *button_ausruestung_laden = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar39->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "Ausrüstung\n"
		"laden", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(Armor_trans_50_xpm))->gtkobj()), 0, 0));
   Gtk::Button *button_ausruestung_druck = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar39->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "Drucken", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(PrintChar_trans_50_xpm))->gtkobj()), 0, 0));
   Gtk::Table *table81 = manage(new class Gtk::Table(1, 4, false));
   viewport_modi = manage(new class Gtk::Viewport());
   
   Gtk::ScrolledWindow *scrolledwindow64 = manage(new class Gtk::ScrolledWindow());
   label_golda = manage(new class Gtk::Label("0"));
   
   Gtk::Frame *frame81 = manage(new class Gtk::Frame("Gold"));
   label_silbera = manage(new class Gtk::Label("0"));
   
   Gtk::Frame *frame82 = manage(new class Gtk::Frame("Silber"));
   label_kupfera = manage(new class Gtk::Label("0"));
   
   Gtk::Frame *frame83 = manage(new class Gtk::Frame("Kupfer"));
   Gtk::Table *table92 = manage(new class Gtk::Table(1, 3, true));
   preise_tree = new class SimpleTree(3);
   
   Gtk::Viewport *viewport26 = manage(new class Gtk::Viewport());
   Gtk::ScrolledWindow *scrolledwindow65 = manage(new class Gtk::ScrolledWindow());
   Gtk::Label *label474 = manage(new class Gtk::Label("Modifikatoren entfernen"));
   Gtk::Pixmap *pixmap67 = manage(new class Gtk::Pixmap(Job_trans_50_xpm));
   Gtk::Pixmap *pixmap68 = manage(new class Gtk::Pixmap(Weapon_trans_50_xpm));
   Gtk::Table *table90 = manage(new class Gtk::Table(2, 2, false));
   Gtk::Button *button_modi = manage(new class Gtk::Button());
   Gtk::Table *table93 = manage(new class Gtk::Table(2, 3, false));
   clist_preisliste = manage(new class Gtk::CList(3));
   
   Gtk::Viewport *viewport22 = manage(new class Gtk::Viewport());
   Gtk::ScrolledWindow *scrolledwindow58 = manage(new class Gtk::ScrolledWindow());
   viewport_ausruestung = manage(new class Gtk::Viewport());
   
   Gtk::ScrolledWindow *scrolledwindow66 = manage(new class Gtk::ScrolledWindow());
   Gtk::VPaned *vpaned12 = manage(new class Gtk::VPaned());
   Gtk::VPaned *vpaned11 = manage(new class Gtk::VPaned());
   Gtk::Pixmap *pixmap51 = manage(new class Gtk::Pixmap(Draco_small_frame_comp_xpm));
   Gtk::Table *table78 = manage(new class Gtk::Table(2, 3, false));
   Gtk::Frame *frame79 = manage(new class Gtk::Frame());
   Gtk::Label *label437 = manage(new class Gtk::Label("Ausrüstung"));
   Gtk::Notebook *notebook1 = manage(new class Gtk::Notebook());
   Gtk::Frame *frame1 = manage(new class Gtk::Frame("Midgard Charaktergenerator"));
   Gtk::EventBox *eventbox_MCG = manage(new class Gtk::EventBox());
   pixmap52->set_alignment(0.5, 0.5);
   pixmap52->set_padding(5, 0);
   label18->set_alignment(0, 0.5);
   label18->set_padding(10, 0);
   gw->set_usize(22, -1);
   gw->set_alignment(0.5, 0.5);
   gw->set_padding(0, 0);
   ko->set_usize(22, -1);
   ko->set_alignment(0.5, 0.5);
   ko->set_padding(0, 0);
   in->set_usize(22, -1);
   in->set_alignment(0.5, 0.5);
   in->set_padding(0, 0);
   zt->set_usize(22, -1);
   zt->set_alignment(0.5, 0.5);
   zt->set_padding(0, 0);
   label6->set_alignment(0, 0.5);
   label6->set_padding(10, 0);
   label7->set_alignment(0, 0.5);
   label7->set_padding(10, 0);
   label4->set_alignment(0, 0.5);
   label4->set_padding(10, 0);
   lable5->set_alignment(0, 0.5);
   lable5->set_padding(10, 0);
   st->set_usize(22, -1);
   st->set_alignment(0.5, 0.5);
   st->set_padding(0, 0);
   gs->set_alignment(0, 0.5);
   gs->set_padding(0, 0);
   label439->set_alignment(0, 0.5);
   label439->set_padding(11, 0);
   table26->attach(*label18, 0, 1, 5, 6, GTK_FILL, 0, 0, 0);
   table26->attach(*gw, 1, 2, 1, 2, GTK_FILL, 0, 0, 0);
   table26->attach(*ko, 1, 2, 3, 4, GTK_FILL, 0, 0, 0);
   table26->attach(*in, 1, 2, 4, 5, GTK_FILL, 0, 0, 0);
   table26->attach(*zt, 1, 2, 5, 6, GTK_FILL, 0, 0, 0);
   table26->attach(*label6, 0, 1, 3, 4, GTK_FILL, 0, 0, 0);
   table26->attach(*label7, 0, 1, 4, 5, GTK_FILL, 0, 0, 0);
   table26->attach(*label4, 0, 1, 0, 1, GTK_FILL, 0, 0, 0);
   table26->attach(*lable5, 0, 1, 1, 2, GTK_FILL, 0, 0, 0);
   table26->attach(*st, 1, 2, 0, 1, GTK_FILL, 0, 0, 0);
   table26->attach(*gs, 1, 2, 2, 3, 0, 0, 0, 0);
   table26->attach(*label439, 0, 1, 2, 3, GTK_FILL, 0, 0, 0);
   frame54->set_label_align(0, 0);
   frame54->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame54->add(*table26);
   resistenz->set_alignment(0.5, 0.5);
   resistenz->set_padding(10, 0);
   gift_wert->set_alignment(0.5, 0.5);
   gift_wert->set_padding(10, 0);
   label199->set_alignment(0, 0.5);
   label199->set_padding(10, 0);
   abwehr_wert->set_alignment(0.5, 0.5);
   abwehr_wert->set_padding(0, 0);
   label200->set_alignment(0, 0.5);
   label200->set_padding(10, 0);
   zaubern_wert->set_alignment(0.5, 0.5);
   zaubern_wert->set_padding(0, 0);
   label274->set_alignment(0, 0.5);
   label274->set_padding(10, 0);
   label275->set_alignment(0, 0.5);
   label275->set_padding(10, 0);
   table30->attach(*resistenz, 1, 2, 1, 2, GTK_FILL, 0, 0, 0);
   table30->attach(*gift_wert, 1, 2, 2, 3, GTK_FILL, 0, 0, 0);
   table30->attach(*label199, 0, 1, 3, 4, GTK_FILL, 0, 0, 0);
   table30->attach(*abwehr_wert, 1, 2, 3, 4, GTK_FILL, 0, 0, 0);
   table30->attach(*label200, 0, 1, 4, 5, GTK_FILL, 0, 0, 0);
   table30->attach(*zaubern_wert, 1, 2, 4, 5, GTK_FILL, 0, 0, 0);
   table30->attach(*label274, 0, 1, 2, 3, GTK_FILL, 0, 0, 0);
   table30->attach(*label275, 0, 1, 1, 2, GTK_FILL, 0, 0, 0);
   frame57->set_label_align(0, 0);
   frame57->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame57->add(*table30);
   label181->set_alignment(0, 0.5);
   label181->set_padding(10, 0);
   label182->set_alignment(0, 0.5);
   label182->set_padding(10, 0);
   bo_sc->set_alignment(0.5, 0.5);
   bo_sc->set_padding(0, 0);
   bo_an->set_alignment(0.5, 0.5);
   bo_an->set_padding(0, 0);
   label184->set_alignment(0, 0.5);
   label184->set_padding(10, 0);
   bo_ab->set_alignment(0.5, 0.5);
   bo_ab->set_padding(0, 0);
   label185->set_alignment(0, 0.5);
   label185->set_padding(10, 0);
   bo_za->set_alignment(0.5, 0.5);
   bo_za->set_padding(0, 0);
   label189->set_alignment(0, 0.5);
   label189->set_padding(0, 0);
   label187->set_alignment(0, 0.5);
   label187->set_padding(0, 0);
   label186->set_alignment(0, 0.5);
   label186->set_padding(0, 0);
   bo_gi->set_alignment(0.5, 0.5);
   bo_gi->set_padding(0, 0);
   bo_phk->set_alignment(0.5, 0.5);
   bo_phk->set_padding(0, 0);
   bo_phs->set_alignment(0.5, 0.5);
   bo_phs->set_padding(0, 0);
   bo_psy->set_alignment(0.5, 0.5);
   bo_psy->set_padding(0, 0);
   bo_au->set_alignment(0.5, 0.5);
   bo_au->set_padding(0, 0);
   label183->set_alignment(0, 0.5);
   label183->set_padding(10, 0);
   label188->set_alignment(0, 0.5);
   label188->set_padding(1, 0);
   table29->attach(*label181, 0, 1, 0, 1, GTK_FILL, 0, 0, 0);
   table29->attach(*label182, 0, 1, 1, 2, GTK_FILL, 0, 0, 0);
   table29->attach(*bo_sc, 1, 2, 1, 2, GTK_FILL, 0, 0, 0);
   table29->attach(*bo_an, 1, 2, 2, 3, GTK_FILL, 0, 0, 0);
   table29->attach(*label184, 0, 1, 3, 4, GTK_FILL, 0, 0, 0);
   table29->attach(*bo_ab, 1, 2, 3, 4, GTK_FILL, 0, 0, 0);
   table29->attach(*label185, 0, 1, 4, 5, GTK_FILL, 0, 0, 0);
   table29->attach(*bo_za, 1, 2, 4, 5, GTK_FILL, 0, 0, 0);
   table29->attach(*label189, 3, 4, 4, 5, GTK_FILL, 0, 0, 0);
   table29->attach(*label187, 3, 4, 2, 3, GTK_FILL, 0, 0, 0);
   table29->attach(*label186, 3, 4, 1, 2, GTK_FILL, 0, 0, 0);
   table29->attach(*bo_gi, 4, 5, 4, 5, GTK_FILL, 0, 0, 0);
   table29->attach(*bo_phk, 4, 5, 3, 4, GTK_FILL, 0, 0, 0);
   table29->attach(*bo_phs, 4, 5, 2, 3, GTK_FILL, 0, 0, 0);
   table29->attach(*bo_psy, 4, 5, 1, 2, GTK_FILL, 0, 0, 0);
   table29->attach(*bo_au, 1, 2, 0, 1, GTK_FILL, 0, 0, 0);
   table29->attach(*vseparator15, 2, 3, 0, 5, GTK_EXPAND, GTK_FILL, 0, 0);
   table29->attach(*label183, 0, 1, 2, 3, GTK_FILL, 0, 0, 0);
   table29->attach(*label188, 3, 4, 3, 4, GTK_FILL, 0, 0, 0);
   frame56->set_label_align(0, 0);
   frame56->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame56->add(*table29);
   pa->set_alignment(0.5, 0.5);
   pa->set_padding(0, 0);
   kaw->set_alignment(0.5, 0.5);
   kaw->set_padding(0, 0);
   sb->set_alignment(0.5, 0.5);
   sb->set_padding(0, 0);
   wlw->set_alignment(0.5, 0.5);
   wlw->set_padding(0, 0);
   rw->set_alignment(0.5, 0.5);
   rw->set_padding(0, 0);
   hgw->set_alignment(0.5, 0.5);
   hgw->set_padding(0, 0);
   lpbasis->set_alignment(0.5, 0.5);
   lpbasis->set_padding(0, 0);
   au->set_alignment(0.5, 0.5);
   au->set_padding(0, 0);
   b->set_alignment(0.5, 0.5);
   b->set_padding(0, 0);
   lp_basis->set_alignment(0.5, 0.5);
   lp_basis->set_padding(0, 0);
   label204->set_alignment(0, 0.5);
   label204->set_padding(0, 0);
   label205->set_alignment(0, 0.5);
   label205->set_padding(0, 0);
   label206->set_alignment(0, 0.5);
   label206->set_padding(0, 0);
   label207->set_alignment(0, 0.5);
   label207->set_padding(0, 0);
   label25->set_usize(29, -1);
   label25->set_alignment(0, 0.5);
   label25->set_padding(0, 0);
   label26->set_usize(29, -1);
   label26->set_alignment(0, 0.5);
   label26->set_padding(0, 0);
   label27->set_alignment(0, 0.5);
   label27->set_padding(0, 0);
   label208->set_alignment(0, 0.5);
   label208->set_padding(0, 0);
   label___->set_alignment(0, 0.5);
   label___->set_padding(0, 0);
   wk->set_alignment(0, 0.5);
   wk->set_padding(0, 0);
   table27->attach(*pa, 1, 2, 1, 2, GTK_FILL, 0, 0, 0);
   table27->attach(*kaw, 4, 5, 1, 2, GTK_FILL, 0, 0, 0);
   table27->attach(*sb, 1, 2, 2, 3, GTK_FILL, 0, 0, 0);
   table27->attach(*wlw, 4, 5, 2, 3, GTK_FILL, 0, 0, 0);
   table27->attach(*rw, 1, 2, 4, 5, GTK_FILL, 0, 0, 0);
   table27->attach(*hgw, 4, 5, 4, 5, GTK_FILL, 0, 0, 0);
   table27->attach(*lpbasis, 4, 5, 5, 6, GTK_FILL, 0, 0, 0);
   table27->attach(*au, 1, 2, 0, 1, GTK_EXPAND|GTK_FILL, 0, 0, 0);
   table27->attach(*b, 4, 5, 0, 1, GTK_EXPAND|GTK_FILL, 0, 0, 0);
   table27->attach(*lp_basis, 0, 4, 5, 6, GTK_FILL, 0, 0, 0);
   table27->attach(*label204, 0, 1, 0, 1, GTK_FILL, 0, 10, 0);
   table27->attach(*label205, 0, 1, 1, 2, GTK_FILL, 0, 10, 0);
   table27->attach(*label206, 0, 1, 2, 3, GTK_FILL, 0, 10, 0);
   table27->attach(*label207, 0, 1, 4, 5, GTK_FILL, 0, 10, 0);
   table27->attach(*label25, 3, 4, 0, 1, GTK_FILL, 0, 10, 0);
   table27->attach(*label26, 3, 4, 1, 2, GTK_FILL, 0, 10, 0);
   table27->attach(*label27, 3, 4, 2, 3, GTK_FILL, 0, 10, 0);
   table27->attach(*label208, 3, 4, 4, 5, GTK_FILL, 0, 10, 0);
   table27->attach(*label___, 0, 1, 3, 4, 0, 0, 0, 0);
   table27->attach(*wk, 1, 2, 3, 4, 0, 0, 0, 0);
   table27->attach(*vseparator14, 2, 3, 0, 5, GTK_FILL, GTK_FILL, 0, 0);
   frame55->set_label_align(0, 0);
   frame55->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame55->add(*table27);
   table68->set_col_spacings(5);
   table68->attach(*frame54, 0, 1, 0, 1, GTK_FILL, GTK_EXPAND, 0, 0);
   table68->attach(*frame57, 3, 4, 0, 1, GTK_FILL, GTK_FILL, 0, 0);
   table68->attach(*frame56, 2, 3, 0, 1, GTK_FILL, 0, 0, 0);
   table68->attach(*frame55, 1, 2, 0, 1, GTK_FILL, 0, 0, 0);
   checkbutton_Eschar->set_usize(0, 0);
   _tooltips.set_tip(*checkbutton_Eschar, "Fertigkeiten/Zauber des Eschar Quellenbuches berücksichtigen", "");
   checkbutton_Gildenbrief->set_usize(0, 0);
   _tooltips.set_tip(*checkbutton_Gildenbrief, "Fertigkeiten/Zauber/Charakterklassen aus Gildenbriefen berücksichtigen, die NICHT in 'Hexenzauber& Druidenkraft' oder 'Barbarenwut & Ritterehre' enhalten sind", "");
   checkbutton_Alba->set_usize(0, 0);
   _tooltips.set_tip(*checkbutton_Alba, "Fertigkeiten/Zauber des Alba Quellenbuches berücksichtigen", "");
   checkbutton_Nahuatlan->set_usize(0, 0);
   _tooltips.set_tip(*checkbutton_Nahuatlan, "Fertigkeiten/Zauber des Nahuatlan Quellenbuches berücksichtigen", "");
   checkbutton_Kuestenstaaten->set_usize(0, 0);
   _tooltips.set_tip(*checkbutton_Kuestenstaaten, "Fertigkeiten/Zauber des Quellenbuches 'Küstenstaaten' berücksichtigen", "");
   checkbutton_BR->set_usize(0, 0);
   _tooltips.set_tip(*checkbutton_BR, "Fertigkeiten, Zauber und Charakterklassen des Quellenbuches 'Barbarenwut & Ritterehre'", "");
   checkbutton_Rawindra->set_usize(0, 0);
   _tooltips.set_tip(*checkbutton_Rawindra, "Fertigkeiten, Zauber und Charakterklassen des Rawindra Quellenbuches berücksichtigen", "");
   checkbutton_Waeland->set_usize(0, 0);
   _tooltips.set_tip(*checkbutton_Waeland, "Fertigkeiten, Zauber und Charakterklassen des Waeland Quellenbuches berücksichtigen", "");
   checkbutton_HD->set_usize(0, 0);
   _tooltips.set_tip(*checkbutton_HD, "Zauber des Quellenbuches 'Hexenzauber & Druidenkraft'", "");
   checkbutton_KanThaiPan->set_usize(0, 0);
   _tooltips.set_tip(*checkbutton_KanThaiPan, "Fertigkeiten, Zauber und Charakterklassen des KanThaiPan Quellenbuches berücksichtigen", "");
   fixed4->put(*checkbutton_Eschar, 0, 16);
   fixed4->put(*checkbutton_Gildenbrief, 96, 64);
   fixed4->put(*checkbutton_Alba, 0, 0);
   fixed4->put(*checkbutton_Nahuatlan, 0, 64);
   fixed4->put(*checkbutton_Kuestenstaaten, 0, 48);
   fixed4->put(*checkbutton_BR, 96, 48);
   fixed4->put(*checkbutton_Rawindra, 96, 0);
   fixed4->put(*checkbutton_Waeland, 96, 16);
   fixed4->put(*checkbutton_HD, 96, 32);
   fixed4->put(*checkbutton_KanThaiPan, 0, 32);
   checkbutton_original->set_usize(99, 24);
   _tooltips.set_tip(*checkbutton_original, "Durch Deaktivierung dieses Buttons werden folgende Möglichkeiten freigeschaltet, die vom 'offiziellen' Midgard abweichen: 1. Eigenschaften können Werte > 100 und <1 annehmen, 2. Die Gildenbriefquellenbücher Hexenzauber & Druidenkraft und Barbarenwut & Ritterehre können als Erweiterung gewählt werden, 3. Es ist möglich aus allen Zaubern zu wählen, falls die ensprechende Option gewählt wird. ", "");
   checkbutton_original->set_active(true);
   checkbutton_info_fenster->set_usize(0, 0);
   _tooltips.set_tip(*checkbutton_info_fenster, "Anzeige/keine Anzeige des Info Fensters", "");
   checkbutton_info_fenster->set_active(true);
   fixed6->put(*checkbutton_original, 0, 0);
   fixed6->put(*checkbutton_info_fenster, 96, 0);
   table46->attach(*hseparator16, 0, 1, 1, 2, GTK_EXPAND|GTK_FILL, GTK_FILL, 0, 3);
   table46->attach(*fixed4, 0, 1, 2, 3, GTK_FILL, GTK_FILL, 0, 0);
   table46->attach(*fixed6, 0, 1, 0, 1, GTK_SHRINK|GTK_FILL, GTK_EXPAND|GTK_FILL, 0, 0);
   frame61->set_label_align(0, 0);
   frame61->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame61->add(*table46);
   _tooltips.set_tip(*button7, "Neuer Charakter", "");
   _tooltips.set_tip(*button8, "Charakter speichern", "");
   _tooltips.set_tip(*button9, "Charakter laden", "");
   _tooltips.set_tip(*button10, "LaTeX Charakterblatt drucken (ghostview)", "");
   _tooltips.set_tip(*button11, "Hilfe", "");
   _tooltips.set_tip(*button12, "Schließen", "");
   toolbar1->set_space_size(10);
   toolbar1->set_tooltips(true);
   toolbar2->set_space_size(17);
   toolbar2->set_tooltips(true);
   table65->attach(*frame61, 1, 2, 0, 2, GTK_EXPAND, 0, 0, 0);
   table65->attach(*toolbar1, 0, 1, 0, 1, GTK_FILL, 0, 3, 3);
   table65->attach(*toolbar2, 0, 1, 1, 2, GTK_FILL, 0, 3, 3);
   {   
      
      Gtk::Menu *_m(manage(new Gtk::Menu()));
      Gtk::MenuItem *_mi;
      _mi = manage(new Gtk::MenuItem("Charakterklassen"));
      _m->append(*_mi);
      _mi->show();
      _mi->set_user_data((gpointer)0);
      typauswahl->set_menu(*_m);
      typauswahl->set_history(0);
   }
   {   
      
      Gtk::Menu *_m(manage(new Gtk::Menu()));
      Gtk::MenuItem *_mi;
      _mi = manage(new Gtk::MenuItem("2. Charakterklasse"));
      _m->append(*_mi);
      _mi->show();
      _mi->set_user_data((gpointer)0);
      typauswahl_2->set_menu(*_m);
      typauswahl_2->set_history(0);
   }
   optionmenu_spezies->set_usize(0, 0);
   {   
      
      Gtk::Menu *_m(manage(new Gtk::Menu()));
      Gtk::MenuItem *_mi;
      _mi = manage(new Gtk::MenuItem("Spezies"));
      _m->append(*_mi);
      _mi->show();
      _mi->set_user_data((gpointer)0);
      optionmenu_spezies->set_menu(*_m);
      optionmenu_spezies->set_history(0);
   }
   radiobutton_frau->set_usize(0, 0);
   radiobutton_mann->set_usize(0, 0);
   radiobutton_mann->set_active(true);
   fixed5->put(*radiobutton_frau, 0, 16);
   fixed5->put(*radiobutton_mann, 0, 0);
   table66->set_row_spacings(5);
   table66->set_col_spacings(5);
   table66->attach(*typauswahl, 0, 1, 0, 1, GTK_FILL, 0, 0, 0);
   table66->attach(*typauswahl_2, 0, 1, 1, 2, GTK_FILL, 0, 0, 0);
   table66->attach(*optionmenu_spezies, 2, 3, 0, 1, GTK_FILL, 0, 0, 0);
   table66->attach(*fixed5, 1, 2, 0, 1, GTK_FILL, GTK_FILL, 20, 0);
   name_charakter->set_alignment(0.5, 0.5);
   name_charakter->set_padding(0, 0);
   frame30->set_label_align(0, 0);
   frame30->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame30->add(*name_charakter);
   spezialisierung->set_alignment(0.5, 0.5);
   spezialisierung->set_padding(0, 0);
   frame23->set_label_align(0, 0);
   frame23->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame23->add(*spezialisierung);
   glaube->set_alignment(0.5, 0.5);
   glaube->set_padding(0, 0);
   frame22->set_label_align(0, 0);
   frame22->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame22->add(*glaube);
   alter->set_alignment(0.5, 0.5);
   alter->set_padding(0, 0);
   frame14->set_label_align(0, 0);
   frame14->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame14->add(*alter);
   name_spieler->set_alignment(0.5, 0.5);
   name_spieler->set_padding(0, 0);
   frame31->set_label_align(0, 0);
   frame31->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame31->add(*name_spieler);
   stand->set_alignment(0.5, 0.5);
   stand->set_padding(0, 0);
   frame20->set_label_align(0, 0);
   frame20->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame20->add(*stand);
   gestalt->set_alignment(0.5, 0.5);
   gestalt->set_padding(0, 0);
   frame15->set_label_align(0, 0);
   frame15->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame15->add(*gestalt);
   groesse->set_alignment(0.5, 0.5);
   groesse->set_padding(0, 0);
   frame17->set_label_align(0, 0);
   frame17->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame17->add(*groesse);
   grad->set_alignment(0.5, 0.5);
   grad->set_padding(0, 0);
   frame18->set_label_align(0, 0);
   frame18->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame18->add(*grad);
   herkunft->set_alignment(0.5, 0.5);
   herkunft->set_padding(0, 0);
   frame21->set_label_align(0, 0);
   frame21->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame21->add(*herkunft);
   gewicht->set_alignment(0.5, 0.5);
   gewicht->set_padding(0, 0);
   frame16->set_label_align(0, 0);
   frame16->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame16->add(*gewicht);
   lp->set_alignment(0.5, 0.5);
   lp->set_padding(0, 0);
   frame10->set_usize(40, 32);
   frame10->set_label_align(0, 0);
   frame10->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame10->add(*lp);
   ap->set_alignment(0.5, 0.5);
   ap->set_padding(0, 0);
   frame11->set_usize(40, 33);
   frame11->set_label_align(0, 0);
   frame11->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame11->add(*ap);
   table67->set_row_spacings(5);
   table67->set_col_spacings(5);
   table67->attach(*frame30, 0, 1, 0, 1, GTK_EXPAND|GTK_FILL, GTK_EXPAND|GTK_FILL, 0, 0);
   table67->attach(*frame23, 0, 1, 1, 2, GTK_FILL, GTK_EXPAND|GTK_FILL, 0, 0);
   table67->attach(*frame22, 0, 1, 2, 3, GTK_FILL, GTK_EXPAND|GTK_FILL, 0, 0);
   table67->attach(*frame14, 0, 1, 3, 4, GTK_FILL, GTK_EXPAND|GTK_FILL, 0, 0);
   table67->attach(*frame31, 1, 2, 0, 1, GTK_EXPAND|GTK_FILL, GTK_FILL, 0, 0);
   table67->attach(*frame20, 1, 2, 1, 2, GTK_FILL, GTK_FILL, 0, 0);
   table67->attach(*frame15, 1, 2, 2, 3, GTK_FILL, GTK_FILL, 0, 0);
   table67->attach(*frame17, 1, 2, 3, 4, GTK_FILL, GTK_FILL, 0, 0);
   table67->attach(*frame18, 2, 3, 0, 1, GTK_EXPAND|GTK_FILL, GTK_FILL, 0, 0);
   table67->attach(*frame21, 2, 3, 1, 2, GTK_FILL, GTK_FILL, 0, 0);
   table67->attach(*frame16, 2, 3, 2, 3, GTK_FILL, GTK_FILL, 0, 0);
   table67->attach(*frame10, 3, 4, 0, 1, GTK_EXPAND|GTK_FILL, GTK_FILL, 0, 0);
   table67->attach(*frame11, 3, 4, 1, 2, GTK_FILL, GTK_FILL, 0, 0);
   table1->attach(*pixmap52, 4, 6, 1, 7, 0, 0, 0, 0);
   table1->attach(*table68, 0, 4, 6, 7, GTK_FILL, 0, 0, 0);
   table1->attach(*table65, 0, 6, 0, 1, GTK_FILL, GTK_FILL, 0, 0);
   table1->attach(*hseparator20, 0, 4, 5, 6, GTK_FILL, 0, 0, 5);
   table1->attach(*table66, 0, 4, 1, 3, GTK_FILL, 0, 5, 0);
   table1->attach(*hseparator1, 0, 4, 3, 4, GTK_FILL, 0, 0, 5);
   table1->attach(*table67, 0, 4, 4, 5, 0, 0, 0, 0);
   frame4->set_label_align(0, 0);
   frame4->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame4->add(*table1);
   grund->set_alignment(0.5, 0.5);
   grund->set_padding(0, 0);
   lernpunkte_fach->set_alignment(0.5, 0.5);
   lernpunkte_fach->set_padding(0, 0);
   frame25->set_label_align(0, 0);
   frame25->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame25->add(*lernpunkte_fach);
   lernpunkte_allgemein->set_alignment(0.5, 0.5);
   lernpunkte_allgemein->set_padding(0, 0);
   frame26->set_label_align(0, 0);
   frame26->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame26->add(*lernpunkte_allgemein);
   lernpunkte_unge->set_alignment(0.5, 0.5);
   lernpunkte_unge->set_padding(0, 0);
   frame80->set_label_align(0, 0);
   frame80->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame80->add(*lernpunkte_unge);
   lernpunkte_w->set_alignment(0.5, 0.5);
   lernpunkte_w->set_padding(0, 0);
   frame27->set_label_align(0, 0);
   frame27->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame27->add(*lernpunkte_w);
   lernpunkte_z->set_alignment(0.5, 0.5);
   lernpunkte_z->set_padding(0, 0);
   frame28->set_label_align(0, 0);
   frame28->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame28->add(*lernpunkte_z);
   hbox7->pack_start(*frame25);
   hbox7->pack_start(*frame26);
   hbox7->pack_start(*frame80);
   hbox7->pack_start(*frame27);
   hbox7->pack_start(*frame28);
   frame24->set_label_align(0, 0);
   frame24->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame24->add(*hbox7);
   toolbar3->set_space_size(10);
   toolbar3->set_tooltips(true);
   fertig_typ->set_alignment(0.5, 0.5);
   fertig_typ->set_padding(5, 5);
   frame59->set_label_align(0, 0);
   frame59->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame59->add(*fertig_typ);
   berufe_clist->set_usize(350, 300);
   berufe_clist->set_column_title(0, "Beruf");
   berufe_clist->set_column_width(0, 80);
   berufe_clist->set_column_title(1, "Fertigkeit");
   berufe_clist->set_column_width(1, 80);
   berufe_clist->set_column_title(2, "Kategorie");
   berufe_clist->set_column_justification(2, GTK_JUSTIFY_RIGHT);
   berufe_clist->set_column_width(2, 80);
   berufe_clist->column_titles_show();
   scrolledwindow43->set_policy(GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
   scrolledwindow43->add(*berufe_clist);
   _tooltips.set_tip(*button_beruf_erfolgswert, "Linke Maustaste: Erfolgswert auswürfeln, rechte Maustaste: Erfolgswert eingeben", "");
   toolbar8->set_space_size(10);
   toolbar8->set_tooltips(true);
   label_beruf_ew->set_alignment(0.5, 0.5);
   label_beruf_ew->set_padding(0, 0);
   spinbutton_beruferfolgesert->set_editable(true);
   vbox_beruferfolgswert->pack_start(*label_beruf_ew, false, false, 0);
   vbox_beruferfolgswert->pack_start(*spinbutton_beruferfolgesert, false, false, 0);
   table_beruf->attach(*scrolledwindow43, 0, 3, 1, 2, GTK_FILL, GTK_EXPAND|GTK_FILL, 0, 0);
   table_beruf->attach(*toolbar8, 1, 2, 0, 1, GTK_FILL, 0, 5, 5);
   table_beruf->attach(*vbox_beruferfolgswert, 2, 3, 0, 1, GTK_FILL, 0, 0, 0);
   label343->set_alignment(0.5, 0.5);
   label343->set_padding(0, 0);
   pixmap26->set_alignment(0.5, 0.5);
   pixmap26->set_padding(0, 0);
   hbox_beruf->pack_start(*label343, false, false, 0);
   hbox_beruf->pack_start(*pixmap26);
   fertigkeiten_clist->set_column_title(0, "Fertigkeit");
   fertigkeiten_clist->set_column_width(0, 80);
   fertigkeiten_clist->set_column_title(1, "Wert");
   fertigkeiten_clist->set_column_justification(1, GTK_JUSTIFY_RIGHT);
   fertigkeiten_clist->set_column_width(1, 80);
   fertigkeiten_clist->column_titles_show();
   scrolledwindow42->set_policy(GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
   scrolledwindow42->add(*fertigkeiten_clist);
   clist_sinne->set_column_title(0, "Sinn");
   clist_sinne->set_column_width(0, 80);
   clist_sinne->set_column_title(1, "Wert");
   clist_sinne->set_column_justification(1, GTK_JUSTIFY_RIGHT);
   clist_sinne->set_column_width(1, 80);
   clist_sinne->column_titles_show();
   scrolledwindow59->set_policy(GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
   scrolledwindow59->add(*clist_sinne);
   _tooltips.set_tip(*button42, "Zum würfeln: linke Maustaste, zum wählen: rechte Maustaste", "");
   toolbar13->set_border_width(5);
   toolbar13->set_space_size(20);
   toolbar13->set_tooltips(true);
   table_fertigkeit->attach(*scrolledwindow42, 0, 3, 1, 2, GTK_FILL, GTK_EXPAND|GTK_FILL, 0, 0);
   table_fertigkeit->attach(*scrolledwindow59, 3, 4, 1, 2, GTK_EXPAND|GTK_FILL, GTK_FILL, 0, 0);
   table_fertigkeit->attach(*toolbar13, 0, 4, 0, 1, GTK_EXPAND, 0, 0, 0);
   label344->set_alignment(0.5, 0.5);
   label344->set_padding(0, 0);
   pixmap27->set_alignment(0.5, 0.5);
   pixmap27->set_padding(0, 0);
   hbox_fertigkeit->pack_start(*label344, false, false, 0);
   hbox_fertigkeit->pack_start(*pixmap27);
   label_spezialwaffe->set_alignment(0, 0.5);
   label_spezialwaffe->set_padding(21, 0);
   waffen_clist->set_usize(300, 300);
   waffen_clist->set_column_title(0, "Waffen");
   waffen_clist->set_column_width(0, 80);
   waffen_clist->set_column_title(1, "Wert");
   waffen_clist->set_column_justification(1, GTK_JUSTIFY_RIGHT);
   waffen_clist->set_column_width(1, 80);
   waffen_clist->column_titles_show();
   scrolledwindow41->set_policy(GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
   scrolledwindow41->add(*waffen_clist);
   toolbar7->set_space_size(5);
   toolbar7->set_tooltips(true);
   table_waffen->attach(*label_spezialwaffe, 2, 3, 0, 1, GTK_FILL, 0, 0, 0);
   table_waffen->attach(*scrolledwindow41, 0, 3, 1, 2, GTK_FILL, GTK_EXPAND|GTK_FILL, 0, 0);
   table_waffen->attach(*toolbar7, 1, 2, 0, 1, GTK_FILL, 0, 5, 5);
   label345->set_alignment(0.5, 0.5);
   label345->set_padding(0, 0);
   pixmap28->set_alignment(0.5, 0.5);
   pixmap28->set_padding(0, 0);
   hbox_waffen->pack_start(*label345, false, false, 0);
   hbox_waffen->pack_start(*pixmap28);
   zauber_clist->set_usize(300, 300);
   zauber_clist->set_column_title(0, "Zauber");
   zauber_clist->set_column_width(0, 80);
   zauber_clist->set_column_title(1, "Wert");
   zauber_clist->set_column_justification(1, GTK_JUSTIFY_RIGHT);
   zauber_clist->set_column_width(1, 78);
   zauber_clist->column_titles_show();
   scrolledwindow40->set_policy(GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
   scrolledwindow40->add(*zauber_clist);
   toolbar6->set_space_size(10);
   toolbar6->set_tooltips(true);
   _tooltips.set_tip(*option_magier_spezialgebiet, "Magier wählen ein Spezialgebiet, Elementarbeschwörer eine Primär/Sekundäerelement Kombination", "");
   {   
      
      Gtk::Menu *_m(manage(new Gtk::Menu()));
      Gtk::MenuItem *_mi;
      _mi = manage(new Gtk::MenuItem("SPEZIAL"));
      _m->append(*_mi);
      _mi->show();
      _mi->set_user_data((gpointer)0);
      option_magier_spezialgebiet->set_menu(*_m);
      option_magier_spezialgebiet->set_history(0);
   }
   table_magier_lernen->attach(*scrolledwindow40, 0, 3, 1, 2, GTK_FILL, GTK_EXPAND|GTK_FILL, 0, 0);
   table_magier_lernen->attach(*toolbar6, 1, 2, 0, 1, GTK_FILL, 0, 5, 5);
   table_magier_lernen->attach(*option_magier_spezialgebiet, 2, 3, 0, 1, GTK_FILL, 0, 0, 0);
   label279->set_alignment(0.5, 0.5);
   label279->set_padding(0, 0);
   pixmap58->set_alignment(0.5, 0.5);
   pixmap58->set_padding(0, 0);
   hbox_zauber->pack_start(*label279, false, false, 0);
   hbox_zauber->pack_start(*pixmap58);
   clist_kido->set_usize(300, 300);
   clist_kido->set_column_title(0, "HoHo");
   clist_kido->set_column_width(0, 80);
   clist_kido->set_column_title(1, "Technik");
   clist_kido->set_column_width(1, 78);
   clist_kido->set_column_title(2, "AP");
   clist_kido->set_column_justification(2, GTK_JUSTIFY_CENTER);
   clist_kido->set_column_width(2, 80);
   clist_kido->set_column_title(3, "FP");
   clist_kido->set_column_justification(3, GTK_JUSTIFY_RIGHT);
   clist_kido->set_column_width(3, 80);
   clist_kido->column_titles_show();
   scrolledwindow46->set_usize(351, -1);
   scrolledwindow46->set_policy(GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
   scrolledwindow46->add(*clist_kido);
   toolbar16->set_space_size(10);
   toolbar16->set_tooltips(true);
   _tooltips.set_tip(*optionmenu_KiDo_Stile, "KiDo Stil wählen", "");
   {   
      
      Gtk::Menu *_m(manage(new Gtk::Menu()));
      Gtk::MenuItem *_mi;
      _mi = manage(new Gtk::MenuItem("STIL"));
      _m->append(*_mi);
      _mi->show();
      _mi->set_user_data((gpointer)0);
      _mi = manage(new Gtk::MenuItem("hart"));
      _m->append(*_mi);
      _mi->show();
      _mi->set_user_data((gpointer)1);
      _mi = manage(new Gtk::MenuItem("sanft"));
      _m->append(*_mi);
      _mi->show();
      _mi->set_user_data((gpointer)2);
      _mi = manage(new Gtk::MenuItem("gemischt"));
      _m->append(*_mi);
      _mi->show();
      _mi->set_user_data((gpointer)3);
      optionmenu_KiDo_Stile->set_menu(*_m);
      optionmenu_KiDo_Stile->set_history(0);
   }
   table_kido_lernen->attach(*scrolledwindow46, 0, 3, 1, 2, GTK_FILL, GTK_EXPAND|GTK_FILL, 0, 0);
   table_kido_lernen->attach(*toolbar16, 1, 2, 0, 1, GTK_FILL, 0, 5, 5);
   table_kido_lernen->attach(*optionmenu_KiDo_Stile, 2, 3, 0, 1, GTK_FILL, 0, 0, 0);
   label371->set_alignment(0.5, 0.5);
   label371->set_padding(0, 0);
   pixmap46->set_alignment(0.5, 0.5);
   pixmap46->set_padding(0, 0);
   hbox_kido->pack_start(*label371, false, false, 0);
   hbox_kido->pack_start(*pixmap46);
   notebook3->set_show_tabs(true);
   notebook3->set_tab_border(3);
   notebook3->pages().push_back(Gtk::Notebook_Helpers::TabElem(*table_beruf, *hbox_beruf));
   notebook3->pages().push_back(Gtk::Notebook_Helpers::TabElem(*table_fertigkeit, *hbox_fertigkeit));
   notebook3->pages().push_back(Gtk::Notebook_Helpers::TabElem(*table_waffen, *hbox_waffen));
   notebook3->pages().push_back(Gtk::Notebook_Helpers::TabElem(*table_magier_lernen, *hbox_zauber));
   notebook3->pages().push_back(Gtk::Notebook_Helpers::TabElem(*table_kido_lernen, *hbox_kido));
   table4->attach(*hseparator13, 0, 3, 3, 4, GTK_FILL, GTK_FILL, 0, 5);
   table4->attach(*frame24, 0, 3, 2, 3, GTK_FILL, 0, 0, 0);
   table4->attach(*hseparator14, 0, 3, 1, 2, GTK_FILL, GTK_FILL, 0, 3);
   table4->attach(*toolbar3, 0, 1, 0, 1, GTK_FILL, 0, 6, 5);
   table4->attach(*frame59, 1, 2, 0, 1, GTK_FILL, 0, 5, 5);
   table4->attach(*notebook3, 0, 3, 4, 5, GTK_FILL, GTK_FILL, 0, 0);
   frame_lernschema->set_label_align(0, 0);
   frame_lernschema->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame_lernschema->add(*table4);
   fertigkeiten->set_alignment(0.5, 0.5);
   fertigkeiten->set_padding(0, 0);
   gfp->set_alignment(0.5, 0.5);
   gfp->set_padding(0, 0);
   frame41->set_usize(33, 33);
   frame41->set_label_align(0, 0);
   frame41->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame41->add(*gfp);
   label_aep->set_alignment(0.5, 0.5);
   label_aep->set_padding(0, 0);
   frame67->set_label_align(0, 0);
   frame67->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame67->add(*label_aep);
   label_kep->set_alignment(0.5, 0.5);
   label_kep->set_padding(0, 0);
   frame68->set_label_align(0, 0);
   frame68->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame68->add(*label_kep);
   label_zep->set_alignment(0.5, 0.5);
   label_zep->set_padding(0, 0);
   frame69->set_label_align(0, 0);
   frame69->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame69->add(*label_zep);
   hbox30->pack_start(*frame67);
   hbox30->pack_start(*frame68);
   hbox30->pack_start(*frame69);
   label_gold->set_alignment(0.5, 0.5);
   label_gold->set_padding(0, 0);
   frame70->set_label_align(0, 0);
   frame70->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame70->add(*label_gold);
   label_silber->set_alignment(0.5, 0.5);
   label_silber->set_padding(0, 0);
   frame71->set_label_align(0, 0);
   frame71->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame71->add(*label_silber);
   label_kupfer->set_alignment(0.5, 0.5);
   label_kupfer->set_padding(0, 0);
   frame72->set_label_align(0, 0);
   frame72->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame72->add(*label_kupfer);
   hbox31->pack_start(*frame70);
   hbox31->pack_start(*frame71);
   hbox31->pack_start(*frame72);
   table72->attach(*frame41, 0, 3, 1, 2, GTK_EXPAND|GTK_FILL, GTK_FILL, 0, 0);
   table72->attach(*hbox30, 0, 3, 0, 1, GTK_FILL, GTK_EXPAND|GTK_FILL, 0, 0);
   table72->attach(*hbox31, 0, 3, 2, 3, GTK_FILL, GTK_EXPAND|GTK_FILL, 0, 0);
   label_EP->set_alignment(0, 0.5);
   label_EP->set_padding(0, 0);
   label_Gold->set_alignment(0, 0.5);
   label_Gold->set_padding(0, 0);
   vscale_EP_Gold->set_digits(1);
   vscale_EP_Gold->set_draw_value(false);
   vscale_EP_Gold->set_value_pos(GTK_POS_TOP);
   table73->attach(*label_EP, 0, 1, 0, 1, 0, 0, 0, 0);
   table73->attach(*label_Gold, 0, 1, 2, 3, 0, 0, 0, 0);
   table73->attach(*vscale_EP_Gold, 0, 1, 1, 2, GTK_FILL, GTK_EXPAND|GTK_FILL, 0, 0);
   _tooltips.set_tip(*eventbox1, "Einstellen des Verhältnisses zwischen Erfahrungspunkten und Gold beim Steigern", "");
   eventbox1->add(*table73);
   toolbar37->set_space_size(5);
   toolbar37->set_tooltips(true);
   _tooltips.set_tip(*checkbutton_EP_Geld, "Ist dieser Knopf aktiviert, dann werden die Erfahrungspunkte und das Geld beim Steigern entsprechend dem eingestellten Verhältnis reduziert. Ist dieser Knof deaktiviert, so kann beliebig gesteigert werden.", "");
   checkbutton_EP_Geld->set_active(true);
   table74->attach(*toolbar37, 0, 1, 1, 2, GTK_FILL, 0, 0, 0);
   table74->attach(*checkbutton_EP_Geld, 0, 1, 0, 1, GTK_FILL, 0, 0, 0);
   _tooltips.set_tip(*button_grad, "Ist von den GFP her ein Gradanstieg möglich, so wird dieser hier gesetzt.", "");
   _tooltips.set_tip(*button_grad_ausdauer, "Ausdauerpunkte neu auswürfeln", "");
   _tooltips.set_tip(*button_grad_abwehr, "Abwehr, Zaubern und Resistenz an den Grad anpassen", "");
   _tooltips.set_tip(*button_grad_basiswerte, "Würfeln, ob sich die Basiswerte beim Gradanstieg erhöhen", "");
   toolbar38->set_space_size(5);
   toolbar38->set_tooltips(true);
   _tooltips.set_tip(*grad_anstieg, "Dieser Knopf macht all das, was die darunterliegenden vier auch machen", "");
   toolbar17->set_tooltips(true);
   table75->attach(*toolbar38, 0, 1, 1, 2, GTK_FILL, 0, 0, 0);
   table75->attach(*toolbar17, 0, 1, 0, 1, GTK_FILL, 0, 0, 0);
   steigern_typ->set_alignment(0.5, 0.5);
   steigern_typ->set_padding(5, 5);
   frame65->set_label_align(0, 0);
   frame65->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame65->add(*steigern_typ);
   label_s_ap->set_alignment(0.5, 0.5);
   label_s_ap->set_padding(0, 0);
   frame74->set_label_align(0, 0);
   frame74->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame74->add(*label_s_ap);
   label_s_resistenz->set_alignment(0.5, 0.5);
   label_s_resistenz->set_padding(0, 0);
   frame77->set_label_align(0, 0);
   frame77->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame77->add(*label_s_resistenz);
   label_s_zaubern->set_alignment(0.5, 0.5);
   label_s_zaubern->set_padding(0, 0);
   frame76->set_label_align(0, 0);
   frame76->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame76->add(*label_s_zaubern);
   label_s_abwehr->set_alignment(0.5, 0.5);
   label_s_abwehr->set_padding(0, 0);
   frame75->set_label_align(0, 0);
   frame75->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame75->add(*label_s_abwehr);
   label_s_grad->set_alignment(0.5, 0.5);
   label_s_grad->set_padding(0, 0);
   frame73->set_label_align(0, 0);
   frame73->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame73->add(*label_s_grad);
   table76->attach(*frame65, 0, 3, 0, 1, GTK_EXPAND|GTK_FILL, 0, 0, 0);
   table76->attach(*frame74, 1, 2, 1, 2, GTK_FILL, 0, 0, 0);
   table76->attach(*frame77, 2, 3, 2, 3, GTK_FILL, 0, 0, 0);
   table76->attach(*frame76, 1, 2, 2, 3, GTK_FILL, 0, 0, 0);
   table76->attach(*frame75, 0, 1, 2, 3, GTK_FILL, 0, 0, 0);
   table76->attach(*frame73, 0, 1, 1, 2, GTK_FILL, 0, 0, 0);
   pixmap62->set_alignment(0.5, 0.5);
   pixmap62->set_padding(0, 0);
   label408->set_alignment(0.5, 0.5);
   label408->set_padding(0, 0);
   hbox32->pack_start(*pixmap62, false, true, 0);
   hbox32->pack_start(*label408, false, false, 0);
   button66->add(*hbox32);
   pixmap63->set_alignment(0.5, 0.5);
   pixmap63->set_padding(0, 0);
   label409->set_alignment(0.5, 0.5);
   label409->set_padding(0, 0);
   hbox33->pack_start(*pixmap63, false, true, 0);
   hbox33->pack_start(*label409, false, false, 0);
   button67->add(*hbox33);
   pixmap64->set_alignment(0.5, 0.5);
   pixmap64->set_padding(0, 0);
   label410->set_alignment(0.5, 0.5);
   label410->set_padding(0, 0);
   hbox34->pack_start(*pixmap64, false, true, 0);
   hbox34->pack_start(*label410, false, false, 0);
   button68->add(*hbox34);
   alignment1->add(*button68);
   table42->attach(*button66, 0, 1, 0, 1, GTK_FILL, 0, 0, 0);
   table42->attach(*button67, 0, 1, 1, 2, GTK_FILL, 0, 0, 0);
   table42->attach(*alignment1, 0, 1, 2, 3, GTK_FILL, 0, 0, 0);
   frame78->set_label_align(0, 0);
   frame78->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame78->add(*table42);
   pixmap35->set_alignment(0.5, 0.5);
   pixmap35->set_padding(0, 0);
   pixmap36->set_alignment(0.5, 0.5);
   pixmap36->set_padding(0, 0);
   radio_fert_steigern->set_active(true);
   pixmap34->set_alignment(0.5, 0.5);
   pixmap34->set_padding(0, 0);
   table53->attach(*radio_fert_reduzieren, 1, 2, 1, 2, GTK_FILL, 0, 0, 0);
   table53->attach(*radio_fert_verlernen, 1, 2, 2, 3, GTK_FILL, 0, 0, 0);
   table53->attach(*pixmap35, 0, 1, 1, 2, GTK_FILL, GTK_FILL, 0, 0);
   table53->attach(*pixmap36, 0, 1, 2, 3, GTK_FILL, GTK_FILL, 0, 0);
   table53->attach(*radio_fert_steigern, 1, 2, 0, 1, GTK_FILL, 0, 0, 0);
   table53->attach(*pixmap34, 0, 1, 0, 1, GTK_EXPAND|GTK_FILL, GTK_FILL, 0, 0);
   frame43->set_label_align(0, 0);
   frame43->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame43->add(*table53);
   radiobutton_praxis_wuerfeln_fertigkeiten->set_active(true);
   pixmap44->set_alignment(0.5, 0.5);
   pixmap44->set_padding(0, 0);
   table57->attach(*radiobutton_praxis_wuerfeln_fertigkeiten, 1, 2, 1, 2, GTK_FILL, 0, 0, 0);
   table57->attach(*pixmap44, 0, 1, 1, 3, GTK_FILL, GTK_FILL, 0, 0);
   table57->attach(*togglebutton_praxispunkte_fertigkeiten, 0, 2, 0, 1, 0, 0, 0, 0);
   table57->attach(*radiobutton_praxis_auto_fertigkeiten, 1, 2, 2, 3, GTK_FILL, 0, 0, 0);
   frame49->set_label_align(0, 0);
   frame49->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame49->add(*table57);
   _tooltips.set_tip(*button_fertigkeiten_sort, "Die gelernten Fertigkeiten werden in der aktuellen Reinfolge für den Ausdruck sortiert", "");
   toolbar14->set_space_size(10);
   toolbar14->set_tooltips(true);
   viewport4->set_shadow_type(GTK_SHADOW_NONE);
   viewport4->add(*alte_fert_tree);
   scrolledwindow53->set_policy(GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
   scrolledwindow53->add(*viewport4);
   viewport6->set_shadow_type(GTK_SHADOW_NONE);
   viewport6->add(*neue_fert_tree);
   scrolledwindow55->set_policy(GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
   scrolledwindow55->add(*viewport6);
   vpaned1->set_usize(537, -1);
   vpaned1->set_handle_size(10);
   vpaned1->set_gutter_size(20);
   vpaned1->set_position(198);
   vpaned1->pack1(*scrolledwindow53, false, true);
   vpaned1->pack2(*scrolledwindow55, true, true);
   clist_landauswahl->set_column_title(0, "Land auswählen");
   clist_landauswahl->set_column_width(0, 80);
   clist_landauswahl->column_titles_show();
   viewport24->set_shadow_type(GTK_SHADOW_NONE);
   viewport24->add(*clist_landauswahl);
   scrolledwindow_landauswahl->set_usize(175, -1);
   scrolledwindow_landauswahl->set_policy(GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
   scrolledwindow_landauswahl->add(*viewport24);
   table15->attach(*frame43, 0, 1, 0, 1, GTK_FILL, GTK_FILL, 0, 0);
   table15->attach(*frame49, 1, 2, 0, 1, 0, GTK_FILL, 0, 0);
   table15->attach(*toolbar14, 3, 4, 0, 1, GTK_FILL, 0, 0, 0);
   table15->attach(*vpaned1, 0, 4, 1, 2, 0, GTK_EXPAND|GTK_FILL, 0, 0);
   table15->attach(*scrolledwindow_landauswahl, 4, 5, 1, 2, GTK_FILL, GTK_FILL, 0, 0);
   label346->set_alignment(0.5, 0.5);
   label346->set_padding(0, 0);
   pixmap30->set_alignment(0.5, 0.5);
   pixmap30->set_padding(0, 0);
   hbox24->pack_start(*label346, false, false, 0);
   hbox24->pack_start(*pixmap30);
   radio_waffen_steigern->set_active(true);
   pixmap37->set_alignment(0.5, 0.5);
   pixmap37->set_padding(0, 0);
   pixmap38->set_alignment(0.5, 0.5);
   pixmap38->set_padding(0, 0);
   table54->attach(*radio_waffen_steigern, 1, 2, 0, 1, GTK_FILL, 0, 0, 0);
   table54->attach(*radio_waffen_reduzieren, 1, 2, 1, 2, GTK_FILL, 0, 0, 0);
   table54->attach(*pixmap37, 0, 1, 0, 1, GTK_EXPAND|GTK_FILL, GTK_FILL, 0, 0);
   table54->attach(*pixmap38, 0, 1, 1, 2, GTK_FILL, GTK_FILL, 0, 0);
   frame47->set_label_align(0, 0);
   frame47->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame47->add(*table54);
   pixmap43->set_alignment(0.5, 0.5);
   pixmap43->set_padding(0, 0);
   radiobutton_praxis_wuerfeln_waffen->set_active(true);
   table56->attach(*pixmap43, 0, 1, 1, 3, GTK_FILL, GTK_FILL, 0, 0);
   table56->attach(*togglebutton_praxispunkte_waffen, 0, 2, 0, 1, 0, 0, 0, 0);
   table56->attach(*radiobutton_praxis_wuerfeln_waffen, 1, 2, 1, 2, 0, 0, 0, 0);
   table56->attach(*radiobutton_praxis_auto_waffen, 1, 2, 2, 3, GTK_FILL, 0, 0, 0);
   frame48->set_label_align(0, 0);
   frame48->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame48->add(*table56);
   table20->attach(*frame47, 0, 1, 0, 2, GTK_EXPAND|GTK_FILL, GTK_FILL, 0, 0);
   table20->attach(*frame48, 2, 3, 0, 2, GTK_EXPAND, GTK_FILL, 0, 0);
   table19->attach(*table20, 0, 1, 0, 1, GTK_EXPAND|GTK_FILL, GTK_EXPAND|GTK_FILL, 0, 0);
   _tooltips.set_tip(*button_waffen_sort, "Die gelernten Waffen werden in der aktuellen Reinfolge für den Ausdruck sortiert", "");
   toolbar4->set_space_size(10);
   toolbar4->set_tooltips(true);
   pixmap50->set_alignment(0.5, 0.5);
   pixmap50->set_padding(0, 0);
   table63->attach(*radiobutton_grundkenntnisse_verlernen, 1, 2, 0, 1, GTK_FILL, 0, 0, 0);
   table63->attach(*pixmap50, 0, 1, 0, 1, GTK_EXPAND|GTK_FILL, GTK_FILL, 0, 5);
   frame64->set_label_align(0, 0);
   frame64->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame64->add(*table63);
   vbox8->pack_start(*frame64, true, false, 0);
   label284->set_alignment(0.5, 0.5);
   label284->set_padding(0, 0);
   viewport7->set_shadow_type(GTK_SHADOW_NONE);
   viewport7->add(*alte_waffen_tree);
   scrolledwindow30->set_policy(GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
   scrolledwindow30->add(*viewport7);
   viewport8->set_shadow_type(GTK_SHADOW_NONE);
   viewport8->add(*neue_waffen_tree);
   scrolledwindow31->set_policy(GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
   scrolledwindow31->add(*viewport8);
   vpaned6->set_handle_size(10);
   vpaned6->set_gutter_size(10);
   vpaned6->set_position(142);
   vpaned6->pack1(*scrolledwindow30, false, true);
   vpaned6->pack2(*scrolledwindow31, true, true);
   vbox16->pack_start(*label284, false, false, 10);
   vbox16->pack_start(*vpaned6);
   label283->set_alignment(0.5, 0.5);
   label283->set_padding(0, 0);
   viewport12->set_shadow_type(GTK_SHADOW_NONE);
   viewport12->add(*alte_grund_tree);
   scrolledwindow32->set_policy(GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
   scrolledwindow32->add(*viewport12);
   viewport13->set_shadow_type(GTK_SHADOW_NONE);
   viewport13->add(*neue_grund_tree);
   scrolledwindow11->set_policy(GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
   scrolledwindow11->add(*viewport13);
   vpaned5->set_handle_size(10);
   vpaned5->set_gutter_size(10);
   vpaned5->set_position(143);
   vpaned5->pack1(*scrolledwindow32, false, true);
   vpaned5->pack2(*scrolledwindow11, true, true);
   vbox15->pack_start(*label283, false, false, 10);
   vbox15->pack_start(*vpaned5);
   hpaned2->set_usize(600, -1);
   hpaned2->set_handle_size(10);
   hpaned2->set_gutter_size(10);
   hpaned2->set_position(378);
   hpaned2->pack1(*vbox16, false, true);
   hpaned2->pack2(*vbox15, true, true);
   table18->attach(*table19, 0, 1, 0, 1, GTK_FILL, GTK_FILL, 0, 0);
   table18->attach(*toolbar4, 1, 2, 0, 1, 0, 0, 0, 0);
   table18->attach(*vbox8, 2, 3, 0, 1, GTK_FILL, GTK_FILL, 0, 0);
   table18->attach(*hpaned2, 0, 3, 1, 2, GTK_SHRINK|GTK_FILL, GTK_EXPAND|GTK_SHRINK|GTK_FILL, 0, 0);
   label221->set_alignment(0.5, 0.5);
   label221->set_padding(0, 0);
   pixmap31->set_alignment(0.5, 0.5);
   pixmap31->set_padding(0, 0);
   hbox25->pack_start(*label221, false, false, 0);
   hbox25->pack_start(*pixmap31);
   toolbar15->set_border_width(5);
   toolbar15->set_space_size(10);
   toolbar15->set_tooltips(true);
   pixmap42->set_alignment(0.5, 0.5);
   pixmap42->set_padding(0, 0);
   table50->attach(*radio_spruchrolle_wuerfeln, 1, 2, 0, 1, GTK_FILL, 0, 0, 0);
   table50->attach(*pixmap42, 0, 1, 0, 2, 0, GTK_EXPAND|GTK_FILL, 0, 0);
   table50->attach(*radio_spruchrolle_auto, 1, 2, 1, 2, 0, 0, 0, 0);
   hbox28->pack_start(*toolbar15, false, false, 0);
   hbox28->pack_start(*table50, false, false, 0);
   frame60->set_label_align(0, 0);
   frame60->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame60->add(*hbox28);
   _tooltips.set_tip(*button_zauber_sort, "Die gelernten Zauber werden in der aktuellen Reinfolge für den Ausdruck sortiert", "");
   _tooltips.set_tip(*button_zaubermittel_sort, "Die gelernten Zaubermittel werden in der aktuellen Reinfolge für den Ausdruck sortiert", "");
   toolbar10->set_space_size(10);
   toolbar10->set_tooltips(true);
   checkbutton_alle_zauber->set_usize(0, 0);
   checkbutton_beschwoerungen->set_usize(0, 0);
   checkbutton_zaubermittel->set_usize(0, 0);
   checkbutton_zaubersalze->set_usize(0, 0);
   table61->attach(*checkbutton_alle_zauber, 1, 2, 0, 1, GTK_FILL, 0, 0, 0);
   table61->attach(*checkbutton_beschwoerungen, 0, 1, 1, 2, GTK_FILL, 0, 0, 0);
   table61->attach(*checkbutton_zaubermittel, 1, 2, 1, 2, GTK_FILL, 0, 0, 0);
   table61->attach(*checkbutton_zaubersalze, 0, 1, 0, 1, GTK_FILL, 0, 0, 0);
   frame63->set_label_align(0, 0);
   frame63->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame63->add(*table61);
   table44->attach(*frame60, 0, 1, 0, 1, 0, 0, 23, 0);
   table44->attach(*toolbar10, 1, 2, 0, 1, GTK_FILL, 0, 0, 0);
   table44->attach(*frame63, 2, 3, 0, 1, 0, 0, 20, 2);
   table21->attach(*table44, 0, 1, 0, 1, GTK_EXPAND|GTK_FILL, GTK_FILL, 0, 0);
   frame44->set_label_align(0, 0);
   frame44->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame44->add(*table21);
   label379->set_alignment(0.5, 0.5);
   label379->set_padding(0, 0);
   viewport3->set_shadow_type(GTK_SHADOW_NONE);
   viewport3->add(*alte_zauber_tree);
   scrolledwindow33->set_policy(GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
   scrolledwindow33->add(*viewport3);
   viewport5->set_shadow_type(GTK_SHADOW_NONE);
   viewport5->add(*neue_zauber_tree);
   scrolledwindow34->set_policy(GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
   scrolledwindow34->add(*viewport5);
   vpaned2->set_usize(491, 350);
   vpaned2->set_handle_size(10);
   vpaned2->set_gutter_size(10);
   vpaned2->set_position(175);
   vpaned2->pack1(*scrolledwindow33, false, true);
   vpaned2->pack2(*scrolledwindow34, true, true);
   vbox17->pack_start(*label379, false, false, 0);
   vbox17->pack_start(*vpaned2);
   label380->set_alignment(0.5, 0.5);
   label380->set_padding(0, 0);
   viewport10->set_shadow_type(GTK_SHADOW_NONE);
   viewport10->add(*alte_zaubermittel_tree);
   scrolledwindow51->set_policy(GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
   scrolledwindow51->add(*viewport10);
   viewport11->set_shadow_type(GTK_SHADOW_NONE);
   viewport11->add(*neue_zaubermittel_tree);
   scrolledwindow52->set_policy(GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
   scrolledwindow52->add(*viewport11);
   vpaned8->set_usize(-1, 350);
   vpaned8->set_handle_size(10);
   vpaned8->set_gutter_size(10);
   vpaned8->set_position(175);
   vpaned8->pack1(*scrolledwindow51, false, true);
   vpaned8->pack2(*scrolledwindow52, true, true);
   vbox18->pack_start(*label380, false, false, 0);
   vbox18->pack_start(*vpaned8);
   hpaned3->set_handle_size(10);
   hpaned3->set_gutter_size(6);
   hpaned3->set_position(-1);
   hpaned3->pack1(*vbox17, false, true);
   hpaned3->pack2(*vbox18, true, true);
   table_magier_steigern->attach(*frame44, 0, 1, 0, 1, GTK_FILL, GTK_FILL, 0, 0);
   table_magier_steigern->attach(*hpaned3, 0, 1, 1, 2, GTK_FILL, GTK_EXPAND|GTK_FILL, 0, 0);
   label222->set_alignment(0.5, 0.5);
   label222->set_padding(0, 0);
   pixmap32->set_alignment(0.5, 0.5);
   pixmap32->set_padding(0, 0);
   hbox26->pack_start(*label222, false, false, 0);
   hbox26->pack_start(*pixmap32);
   _tooltips.set_tip(*button_kido_sort, "Die gelernten Technicken werden in der aktuellen Reinfolge für den Ausdruck sortiert", "");
   toolbar34->set_space_size(10);
   toolbar34->set_tooltips(true);
   table60->attach(*toolbar34, 2, 3, 0, 1, GTK_FILL, 0, 5, 5);
   table59->attach(*table60, 0, 1, 0, 1, GTK_EXPAND|GTK_FILL, GTK_FILL, 0, 0);
   frame62->set_label_align(0, 0);
   frame62->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame62->add(*table59);
   viewport14->set_shadow_type(GTK_SHADOW_NONE);
   viewport14->add(*alte_kido_tree);
   scrolledwindow49->set_policy(GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
   scrolledwindow49->add(*viewport14);
   viewport15->set_shadow_type(GTK_SHADOW_NONE);
   viewport15->add(*neue_kido_tree);
   scrolledwindow50->set_policy(GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
   scrolledwindow50->add(*viewport15);
   vpaned7->set_usize(600, 350);
   vpaned7->set_handle_size(10);
   vpaned7->set_gutter_size(10);
   vpaned7->set_position(175);
   vpaned7->pack1(*scrolledwindow49, false, true);
   vpaned7->pack2(*scrolledwindow50, true, true);
   table_kido_steigern->attach(*frame62, 0, 1, 0, 1, GTK_FILL, GTK_FILL, 0, 0);
   table_kido_steigern->attach(*vpaned7, 0, 1, 1, 2, 0, GTK_EXPAND|GTK_FILL, 0, 0);
   label370->set_alignment(0.5, 0.5);
   label370->set_padding(0, 0);
   pixmap45->set_alignment(0.5, 0.5);
   pixmap45->set_padding(0, 0);
   hbox29->pack_start(*label370, false, false, 0);
   hbox29->pack_start(*pixmap45);
   _tooltips.set_tip(*button_sprache_sort, "Die gelernten Sprachen werden in der aktuellen Reinfolge für den Ausdruck sortiert", "");
   toolbar9->set_space_size(10);
   toolbar9->set_tooltips(true);
   pixmap40->set_alignment(0.5, 0.5);
   pixmap40->set_padding(0, 0);
   pixmap41->set_alignment(0.5, 0.5);
   pixmap41->set_padding(0, 0);
   pixmap39->set_alignment(0.5, 0.5);
   pixmap39->set_padding(0, 0);
   table55->attach(*pixmap40, 0, 1, 1, 2, 0, 0, 0, 0);
   table55->attach(*pixmap41, 0, 1, 2, 3, 0, 0, 0, 0);
   table55->attach(*radio_sprache_steigern, 1, 2, 0, 1, GTK_FILL, 0, 0, 0);
   table55->attach(*radio_sprache_reduzieren, 1, 2, 1, 2, GTK_FILL, 0, 0, 0);
   table55->attach(*radio_sprache_verlernen, 1, 2, 2, 3, GTK_FILL, 0, 0, 0);
   table55->attach(*pixmap39, 0, 1, 0, 1, GTK_EXPAND|GTK_FILL, GTK_FILL, 0, 0);
   frame52->set_label_align(0, 0);
   frame52->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame52->add(*table55);
   label282->set_alignment(0.5, 0.5);
   label282->set_padding(0, 0);
   viewport18->set_shadow_type(GTK_SHADOW_NONE);
   viewport18->add(*alte_sprache_tree);
   scrolledwindow26->set_policy(GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
   scrolledwindow26->add(*viewport18);
   viewport19->set_shadow_type(GTK_SHADOW_NONE);
   viewport19->add(*neue_sprache_tree);
   scrolledwindow23->set_policy(GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
   scrolledwindow23->add(*viewport19);
   vpaned3->set_handle_size(10);
   vpaned3->set_gutter_size(10);
   vpaned3->set_position(203);
   vpaned3->pack1(*scrolledwindow26, false, true);
   vpaned3->pack2(*scrolledwindow23, true, true);
   vbox14->pack_start(*label282, false, false, 0);
   vbox14->pack_start(*vpaned3);
   label281->set_alignment(0.5, 0.5);
   label281->set_padding(0, 0);
   viewport16->set_shadow_type(GTK_SHADOW_NONE);
   viewport16->add(*alte_schrift_tree);
   scrolledwindow27->set_policy(GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
   scrolledwindow27->add(*viewport16);
   viewport17->set_shadow_type(GTK_SHADOW_NONE);
   viewport17->add(*neue_schrift_tree);
   scrolledwindow24->set_policy(GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
   scrolledwindow24->add(*viewport17);
   vpaned4->set_handle_size(10);
   vpaned4->set_gutter_size(10);
   vpaned4->set_position(203);
   vpaned4->pack1(*scrolledwindow27, false, true);
   vpaned4->pack2(*scrolledwindow24, true, true);
   vbox13->pack_start(*label281, false, false, 0);
   vbox13->pack_start(*vpaned4);
   hpaned1->set_usize(731, -1);
   hpaned1->set_handle_size(10);
   hpaned1->set_gutter_size(10);
   hpaned1->set_position(454);
   hpaned1->pack1(*vbox14, false, true);
   hpaned1->pack2(*vbox13, true, true);
   table24->attach(*toolbar9, 1, 2, 0, 1, 0, 0, 0, 0);
   table24->attach(*frame52, 0, 1, 0, 1, 0, 0, 7, 0);
   table24->attach(*hpaned1, 0, 3, 1, 2, GTK_FILL, GTK_EXPAND|GTK_FILL, 0, 0);
   label254->set_alignment(0.5, 0.5);
   label254->set_padding(0, 0);
   pixmap33->set_alignment(0.5, 0.5);
   pixmap33->set_padding(0, 0);
   hbox27->pack_start(*label254, false, false, 0);
   hbox27->pack_start(*pixmap33);
   notebook2->set_show_tabs(true);
   notebook2->set_tab_border(3);
   notebook2->pages().push_back(Gtk::Notebook_Helpers::TabElem(*table15, *hbox24));
   notebook2->pages().push_back(Gtk::Notebook_Helpers::TabElem(*table18, *hbox25));
   notebook2->pages().push_back(Gtk::Notebook_Helpers::TabElem(*table_magier_steigern, *hbox26));
   notebook2->pages().push_back(Gtk::Notebook_Helpers::TabElem(*table_kido_steigern, *hbox29));
   notebook2->pages().push_back(Gtk::Notebook_Helpers::TabElem(*table24, *hbox27));
   table14->attach(*table72, 1, 2, 0, 1, GTK_FILL, GTK_FILL, 0, 5);
   table14->attach(*eventbox1, 0, 1, 0, 1, 0, GTK_FILL, 0, 0);
   table14->attach(*table74, 2, 3, 0, 1, 0, 0, 0, 0);
   table14->attach(*table75, 3, 4, 0, 1, GTK_FILL, GTK_FILL, 0, 0);
   table14->attach(*table76, 4, 5, 0, 1, GTK_FILL, 0, 0, 0);
   table14->attach(*frame78, 5, 6, 0, 1, GTK_FILL, GTK_FILL, 5, 0);
   table14->attach(*notebook2, 0, 6, 1, 2, GTK_EXPAND|GTK_SHRINK|GTK_FILL, GTK_EXPAND|GTK_SHRINK|GTK_FILL, 0, 0);
   frame_steigern->set_label_align(0, 0);
   frame_steigern->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame_steigern->add(*table14);
   steigern->set_alignment(0.5, 0.5);
   steigern->set_padding(0, 0);
   toolbar39->set_space_size(5);
   toolbar39->set_tooltips(true);
   table81->attach(*toolbar39, 0, 1, 0, 1, GTK_FILL, 0, 0, 0);
   viewport_modi->set_shadow_type(GTK_SHADOW_NONE);
   scrolledwindow64->set_policy(GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
   scrolledwindow64->add(*viewport_modi);
   label_golda->set_alignment(0.5, 0.5);
   label_golda->set_padding(0, 0);
   frame81->set_label_align(0, 0);
   frame81->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame81->add(*label_golda);
   label_silbera->set_alignment(0.5, 0.5);
   label_silbera->set_padding(0, 0);
   frame82->set_label_align(0, 0);
   frame82->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame82->add(*label_silbera);
   label_kupfera->set_alignment(0.5, 0.5);
   label_kupfera->set_padding(0, 0);
   frame83->set_label_align(0, 0);
   frame83->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame83->add(*label_kupfera);
   table92->attach(*frame81, 0, 1, 0, 1, GTK_EXPAND|GTK_FILL, GTK_EXPAND|GTK_FILL, 0, 0);
   table92->attach(*frame82, 1, 2, 0, 1, GTK_EXPAND|GTK_FILL, GTK_FILL, 0, 0);
   table92->attach(*frame83, 2, 3, 0, 1, GTK_EXPAND|GTK_FILL, GTK_FILL, 0, 0);
   viewport26->set_shadow_type(GTK_SHADOW_NONE);
   viewport26->add(*preise_tree);
   scrolledwindow65->set_usize(305, -1);
   scrolledwindow65->set_policy(GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
   scrolledwindow65->add(*viewport26);
   label474->set_alignment(0, 0.5);
   label474->set_padding(0, 0);
   pixmap67->set_alignment(0.5, 0.5);
   pixmap67->set_padding(0, 0);
   pixmap68->set_alignment(0.5, 0.5);
   pixmap68->set_padding(0, 0);
   table90->attach(*label474, 0, 2, 1, 2, GTK_FILL, 0, 0, 0);
   table90->attach(*pixmap67, 0, 1, 0, 1, GTK_FILL, GTK_EXPAND|GTK_FILL, 0, 0);
   table90->attach(*pixmap68, 1, 2, 0, 1, GTK_FILL, GTK_FILL, 0, 0);
   button_modi->add(*table90);
   table93->attach(*scrolledwindow64, 1, 3, 1, 2, GTK_FILL, GTK_FILL, 0, 0);
   table93->attach(*table92, 2, 3, 0, 1, GTK_EXPAND, 0, 0, 0);
   table93->attach(*scrolledwindow65, 0, 1, 0, 2, GTK_EXPAND|GTK_FILL, GTK_EXPAND|GTK_FILL, 0, 0);
   table93->attach(*button_modi, 1, 2, 0, 1, 0, 0, 5, 0);
   clist_preisliste->set_column_title(0, "Name");
   clist_preisliste->set_column_width(0, 80);
   clist_preisliste->set_column_title(1, "Preis");
   clist_preisliste->set_column_justification(1, GTK_JUSTIFY_RIGHT);
   clist_preisliste->set_column_width(1, 80);
   clist_preisliste->set_column_title(2, "Einheit");
   clist_preisliste->set_column_width(2, 80);
   clist_preisliste->column_titles_show();
   viewport22->add(*clist_preisliste);
   scrolledwindow58->set_policy(GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
   scrolledwindow58->add(*viewport22);
   scrolledwindow66->set_policy(GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
   scrolledwindow66->add(*viewport_ausruestung);
   vpaned12->set_handle_size(10);
   vpaned12->set_gutter_size(10);
   vpaned12->set_position(-1);
   vpaned12->pack1(*scrolledwindow58, false, true);
   vpaned12->pack2(*scrolledwindow66, true, true);
   vpaned11->set_handle_size(10);
   vpaned11->set_gutter_size(10);
   vpaned11->set_position(-1);
   vpaned11->pack1(*table93, false, true);
   vpaned11->pack2(*vpaned12, true, true);
   pixmap51->set_alignment(0.5, 0.5);
   pixmap51->set_padding(0, 0);
   table78->attach(*table81, 0, 3, 0, 1, GTK_FILL, 0, 0, 0);
   table78->attach(*vpaned11, 0, 2, 1, 2, GTK_FILL, GTK_EXPAND|GTK_FILL, 0, 0);
   table78->attach(*pixmap51, 2, 3, 1, 2, GTK_EXPAND, 0, 0, 0);
   frame79->set_label_align(0, 0);
   frame79->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame79->add(*table78);
   label437->set_alignment(0.5, 0.5);
   label437->set_padding(0, 0);
   notebook1->set_show_tabs(true);
   notebook1->set_tab_border(3);
   notebook1->pages().push_back(Gtk::Notebook_Helpers::TabElem(*frame4, *grund));
   notebook1->pages().push_back(Gtk::Notebook_Helpers::TabElem(*frame_lernschema, *fertigkeiten));
   notebook1->pages().push_back(Gtk::Notebook_Helpers::TabElem(*frame_steigern, *steigern));
   notebook1->pages().push_back(Gtk::Notebook_Helpers::TabElem(*frame79, *label437));
   frame1->set_label_align(0, 0);
   frame1->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame1->add(*notebook1);
   eventbox_MCG->add(*frame1);
   midgard_CG->set_title("Midgard");
   midgard_CG->set_default_size(-1, 700);
   midgard_CG->set_policy(true, true, true);
   midgard_CG->add(*eventbox_MCG);
   pixmap52->show();
   label18->show();
   gw->show();
   ko->show();
   in->show();
   zt->show();
   label6->show();
   label7->show();
   label4->show();
   lable5->show();
   st->show();
   gs->show();
   label439->show();
   table26->show();
   frame54->show();
   resistenz->show();
   gift_wert->show();
   label199->show();
   abwehr_wert->show();
   label200->show();
   zaubern_wert->show();
   label274->show();
   label275->show();
   table30->show();
   frame57->show();
   label181->show();
   label182->show();
   bo_sc->show();
   bo_an->show();
   label184->show();
   bo_ab->show();
   label185->show();
   bo_za->show();
   label189->show();
   label187->show();
   label186->show();
   bo_gi->show();
   bo_phk->show();
   bo_phs->show();
   bo_psy->show();
   bo_au->show();
   vseparator15->show();
   label183->show();
   label188->show();
   table29->show();
   frame56->show();
   pa->show();
   kaw->show();
   sb->show();
   wlw->show();
   rw->show();
   hgw->show();
   lpbasis->show();
   au->show();
   b->show();
   lp_basis->show();
   label204->show();
   label205->show();
   label206->show();
   label207->show();
   label25->show();
   label26->show();
   label27->show();
   label208->show();
   label___->show();
   wk->show();
   vseparator14->show();
   table27->show();
   frame55->show();
   table68->show();
   hseparator16->show();
   checkbutton_Eschar->show();
   checkbutton_Gildenbrief->show();
   checkbutton_Alba->show();
   checkbutton_Nahuatlan->show();
   checkbutton_Kuestenstaaten->show();
   checkbutton_BR->show();
   checkbutton_Rawindra->show();
   checkbutton_Waeland->show();
   checkbutton_HD->show();
   checkbutton_KanThaiPan->show();
   fixed4->show();
   checkbutton_original->show();
   checkbutton_info_fenster->show();
   fixed6->show();
   table46->show();
   frame61->show();
   toolbar1->show();
   toolbar2->show();
   table65->show();
   hseparator20->show();
   typauswahl->show();
   typauswahl_2->show();
   optionmenu_spezies->show();
   radiobutton_frau->show();
   radiobutton_mann->show();
   fixed5->show();
   table66->show();
   hseparator1->show();
   name_charakter->show();
   frame30->show();
   spezialisierung->show();
   frame23->show();
   glaube->show();
   frame22->show();
   alter->show();
   frame14->show();
   name_spieler->show();
   frame31->show();
   stand->show();
   frame20->show();
   gestalt->show();
   frame15->show();
   groesse->show();
   frame17->show();
   grad->show();
   frame18->show();
   herkunft->show();
   frame21->show();
   gewicht->show();
   frame16->show();
   lp->show();
   frame10->show();
   ap->show();
   frame11->show();
   table67->show();
   table1->show();
   frame4->show();
   grund->show();
   hseparator13->show();
   lernpunkte_fach->show();
   frame25->show();
   lernpunkte_allgemein->show();
   frame26->show();
   lernpunkte_unge->show();
   frame80->show();
   lernpunkte_w->show();
   frame27->show();
   lernpunkte_z->show();
   frame28->show();
   hbox7->show();
   frame24->show();
   hseparator14->show();
   toolbar3->show();
   fertig_typ->show();
   frame59->show();
   berufe_clist->show();
   scrolledwindow43->show();
   toolbar8->show();
   label_beruf_ew->show();
   spinbutton_beruferfolgesert->show();
   vbox_beruferfolgswert->show();
   table_beruf->show();
   label343->show();
   pixmap26->show();
   hbox_beruf->show();
   fertigkeiten_clist->show();
   scrolledwindow42->show();
   clist_sinne->show();
   scrolledwindow59->show();
   toolbar13->show();
   table_fertigkeit->show();
   label344->show();
   pixmap27->show();
   hbox_fertigkeit->show();
   label_spezialwaffe->show();
   waffen_clist->show();
   scrolledwindow41->show();
   toolbar7->show();
   table_waffen->show();
   label345->show();
   pixmap28->show();
   hbox_waffen->show();
   zauber_clist->show();
   scrolledwindow40->show();
   toolbar6->show();
   option_magier_spezialgebiet->show();
   table_magier_lernen->show();
   label279->show();
   pixmap58->show();
   hbox_zauber->show();
   clist_kido->show();
   scrolledwindow46->show();
   toolbar16->show();
   optionmenu_KiDo_Stile->show();
   table_kido_lernen->show();
   label371->show();
   pixmap46->show();
   hbox_kido->show();
   notebook3->show();
   table4->show();
   frame_lernschema->show();
   fertigkeiten->show();
   gfp->show();
   frame41->show();
   label_aep->show();
   frame67->show();
   label_kep->show();
   frame68->show();
   label_zep->show();
   frame69->show();
   hbox30->show();
   label_gold->show();
   frame70->show();
   label_silber->show();
   frame71->show();
   label_kupfer->show();
   frame72->show();
   hbox31->show();
   table72->show();
   label_EP->show();
   label_Gold->show();
   vscale_EP_Gold->show();
   table73->show();
   eventbox1->show();
   toolbar37->show();
   checkbutton_EP_Geld->show();
   table74->show();
   toolbar38->show();
   toolbar17->show();
   table75->show();
   steigern_typ->show();
   frame65->show();
   label_s_ap->show();
   frame74->show();
   label_s_resistenz->show();
   frame77->show();
   label_s_zaubern->show();
   frame76->show();
   label_s_abwehr->show();
   frame75->show();
   label_s_grad->show();
   frame73->show();
   table76->show();
   pixmap62->show();
   label408->show();
   hbox32->show();
   button66->show();
   pixmap63->show();
   label409->show();
   hbox33->show();
   button67->show();
   pixmap64->show();
   label410->show();
   hbox34->show();
   button68->show();
   alignment1->show();
   table42->show();
   frame78->show();
   radio_fert_reduzieren->show();
   radio_fert_verlernen->show();
   pixmap35->show();
   pixmap36->show();
   radio_fert_steigern->show();
   pixmap34->show();
   table53->show();
   frame43->show();
   radiobutton_praxis_wuerfeln_fertigkeiten->show();
   pixmap44->show();
   togglebutton_praxispunkte_fertigkeiten->show();
   radiobutton_praxis_auto_fertigkeiten->show();
   table57->show();
   frame49->show();
   toolbar14->show();
   alte_fert_tree->show();
   viewport4->show();
   scrolledwindow53->show();
   neue_fert_tree->show();
   viewport6->show();
   scrolledwindow55->show();
   vpaned1->show();
   clist_landauswahl->show();
   viewport24->show();
   scrolledwindow_landauswahl->show();
   table15->show();
   label346->show();
   pixmap30->show();
   hbox24->show();
   radio_waffen_steigern->show();
   radio_waffen_reduzieren->show();
   pixmap37->show();
   pixmap38->show();
   table54->show();
   frame47->show();
   pixmap43->show();
   togglebutton_praxispunkte_waffen->show();
   radiobutton_praxis_wuerfeln_waffen->show();
   radiobutton_praxis_auto_waffen->show();
   table56->show();
   frame48->show();
   table20->show();
   table19->show();
   toolbar4->show();
   radiobutton_grundkenntnisse_verlernen->show();
   pixmap50->show();
   table63->show();
   frame64->show();
   vbox8->show();
   label284->show();
   alte_waffen_tree->show();
   viewport7->show();
   scrolledwindow30->show();
   neue_waffen_tree->show();
   viewport8->show();
   scrolledwindow31->show();
   vpaned6->show();
   vbox16->show();
   label283->show();
   alte_grund_tree->show();
   viewport12->show();
   scrolledwindow32->show();
   neue_grund_tree->show();
   viewport13->show();
   scrolledwindow11->show();
   vpaned5->show();
   vbox15->show();
   hpaned2->show();
   table18->show();
   label221->show();
   pixmap31->show();
   hbox25->show();
   toolbar15->show();
   radio_spruchrolle_wuerfeln->show();
   pixmap42->show();
   radio_spruchrolle_auto->show();
   table50->show();
   hbox28->show();
   frame60->show();
   toolbar10->show();
   checkbutton_alle_zauber->show();
   checkbutton_beschwoerungen->show();
   checkbutton_zaubermittel->show();
   checkbutton_zaubersalze->show();
   table61->show();
   frame63->show();
   table44->show();
   table21->show();
   frame44->show();
   label379->show();
   alte_zauber_tree->show();
   viewport3->show();
   scrolledwindow33->show();
   neue_zauber_tree->show();
   viewport5->show();
   scrolledwindow34->show();
   vpaned2->show();
   vbox17->show();
   label380->show();
   alte_zaubermittel_tree->show();
   viewport10->show();
   scrolledwindow51->show();
   neue_zaubermittel_tree->show();
   viewport11->show();
   scrolledwindow52->show();
   vpaned8->show();
   vbox18->show();
   hpaned3->show();
   table_magier_steigern->show();
   label222->show();
   pixmap32->show();
   hbox26->show();
   toolbar34->show();
   table60->show();
   table59->show();
   frame62->show();
   alte_kido_tree->show();
   viewport14->show();
   scrolledwindow49->show();
   neue_kido_tree->show();
   viewport15->show();
   scrolledwindow50->show();
   vpaned7->show();
   table_kido_steigern->show();
   label370->show();
   pixmap45->show();
   hbox29->show();
   toolbar9->show();
   pixmap40->show();
   pixmap41->show();
   radio_sprache_steigern->show();
   radio_sprache_reduzieren->show();
   radio_sprache_verlernen->show();
   pixmap39->show();
   table55->show();
   frame52->show();
   label282->show();
   alte_sprache_tree->show();
   viewport18->show();
   scrolledwindow26->show();
   neue_sprache_tree->show();
   viewport19->show();
   scrolledwindow23->show();
   vpaned3->show();
   vbox14->show();
   label281->show();
   alte_schrift_tree->show();
   viewport16->show();
   scrolledwindow27->show();
   neue_schrift_tree->show();
   viewport17->show();
   scrolledwindow24->show();
   vpaned4->show();
   vbox13->show();
   hpaned1->show();
   table24->show();
   label254->show();
   pixmap33->show();
   hbox27->show();
   notebook2->show();
   table14->show();
   frame_steigern->show();
   steigern->show();
   toolbar39->show();
   table81->show();
   viewport_modi->show();
   scrolledwindow64->show();
   label_golda->show();
   frame81->show();
   label_silbera->show();
   frame82->show();
   label_kupfera->show();
   frame83->show();
   table92->show();
   preise_tree->show();
   viewport26->show();
   scrolledwindow65->show();
   label474->show();
   pixmap67->show();
   pixmap68->show();
   table90->show();
   button_modi->show();
   table93->show();
   clist_preisliste->show();
   viewport22->show();
   scrolledwindow58->show();
   viewport_ausruestung->show();
   scrolledwindow66->show();
   vpaned12->show();
   vpaned11->show();
   pixmap51->show();
   table78->show();
   frame79->show();
   label437->show();
   notebook1->show();
   frame1->show();
   eventbox_MCG->show();
   midgard_CG->show();
   checkbutton_Eschar->toggled.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_checkbutton_Eschar_toggled));
   checkbutton_Gildenbrief->toggled.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_checkbutton_Gildenbrief_toggled));
   checkbutton_Alba->toggled.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_checkbutton_Alba_toggled));
   checkbutton_Nahuatlan->toggled.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_checkbutton_Nahuatlan_toggled));
   checkbutton_Kuestenstaaten->toggled.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_checkbutton_Kuestenstaaten_toggled));
   checkbutton_BR->toggled.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_checkbutton_BR_toggled));
   checkbutton_Rawindra->toggled.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_checkbutton_Rawindra_toggled));
   checkbutton_Waeland->toggled.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_checkbutton_Waeland_toggled));
   checkbutton_HD->toggled.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_checkbutton_HD_toggled));
   checkbutton_KanThaiPan->toggled.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_checkbutton_KanThaiPan_toggled));
   checkbutton_original->toggled.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_checkbutton_original_toggled));
   checkbutton_info_fenster->toggled.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_checkbutton_info_fenster_toggled));
   button7->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_neuer_charakter_clicked));
   button8->button_release_event.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_speichern_release_event));
   button9->button_release_event.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_laden_release_event));
   button10->button_release_event.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_latex_release_event));
   button11->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_button_hilfe_clicked));
   button_info->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_button_info_clicked));
   button12->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_schliessen_CG_clicked));
   button_grundwerte->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::gw_wuerfeln));
   button_abg_werte->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_abge_werte_setzen_clicked));
   button15->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::werte_editieren));
   button_herkunft->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_herkunftsland_clicked));
   button_sprache->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_muttersprache_clicked));
   button_beschreibung->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_charakter_beschreibung_clicked));
   radiobutton_frau->toggled.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_radiobutton_frau_toggled));
   radiobutton_mann->toggled.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_radiobutton_mann_toggled));
   button19->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_lernpunkte_wuerfeln_clicked));
   button20->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_lernpunkte_editieren_clicked));
   button_geld_waffen->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_button_geld_waffen_clicked));
   button_ruestung->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_button_ruestung_clicked));
   button29->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_berufe_wahl_clicked));
   button_beruf_erfolgswert->button_release_event.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_beruf_erfolgswert_release_event));
   spinbutton_beruferfolgesert->activate.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_spinbutton_beruferfolgesert_activate));
   button_fertigkeiten->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_fertigkeiten_wahl_clicked));
   button42->button_release_event.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_angeborene_fertigkeit_button_release_event));
   waffen_clist->select_row.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_waffen_clist_select_row));
   button28->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_waffen_wahl_clicked));
   button27->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_zauber_wahl_clicked));
   button_kido_auswahl->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_kido_wahl_clicked));
   optionmenu_KiDo_Stile->get_menu()->deactivate.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::stil_optionmenue));
   vscale_EP_Gold->button_release_event.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::vscale_value_changed));
   button_EP->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_button_EP_clicked));
   checkbutton_EP_Geld->toggled.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_checkbutton_EP_Geld_toggled));
   button_grad->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_button_grad_clicked));
   button_grad_ausdauer->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_button_grad_ausdauer_clicked));
   button_grad_abwehr->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_button_grad_abwehr_clicked));
   button_grad_zaubern->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_button_grad_zaubern_clicked));
   button_grad_resistenz->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_button_grad_resistenz_clicked));
   button_grad_basiswerte->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_button_grad_basiswerte_clicked));
   grad_anstieg->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_grad_anstieg_clicked));
   button66->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_button_geld_s_clicked));
   button67->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_button_waffen_s_clicked));
   button68->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_button_ruestung_s_clicked));
   radio_fert_reduzieren->toggled.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_radio_fert_reduzieren_toggled));
   radio_fert_verlernen->toggled.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_radio_fert_verlernen_toggled));
   radio_fert_steigern->toggled.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_radio_fert_steigern_toggled));
   radiobutton_praxis_wuerfeln_fertigkeiten->toggled.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_radiobutton_praxis_wuerfeln_fertigkeiten_toggled));
   togglebutton_praxispunkte_fertigkeiten->toggled.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_togglebutton_praxispunkte_fertigkeiten_toggled));
   radiobutton_praxis_auto_fertigkeiten->toggled.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_radiobutton_praxis_auto_fertigkeiten_toggled));
   button43->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_fertigkeiten_laden_clicked));
   button_fertigkeiten_sort->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_button_fertigkeiten_sort_clicked));
   alte_fert_tree->leaf_selected.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_leaf_selected_alte_fert));
   neue_fert_tree->leaf_selected.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_leaf_selected_neue_fert));
   clist_landauswahl->select_row.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_clist_landauswahl_select_row));
   radio_waffen_steigern->toggled.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_radio_waffen_steigern_toggled));
   radio_waffen_reduzieren->toggled.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_radio_waffen_reduzieren_toggled));
   togglebutton_praxispunkte_waffen->toggled.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_togglebutton_praxispunkte_waffen_toggled));
   radiobutton_praxis_wuerfeln_waffen->toggled.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_radiobutton_praxis_wuerfeln_waffen_toggled));
   radiobutton_praxis_auto_waffen->toggled.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_radiobutton_praxis_auto_waffen_toggled));
   button23->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_waffen_laden_clicked));
   button_waffen_sort->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_button_waffen_sort_clicked));
   radiobutton_grundkenntnisse_verlernen->toggled.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_radio_waffen_steigern_toggled));
   alte_waffen_tree->leaf_selected.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_leaf_selected_alte_waffen));
   neue_waffen_tree->leaf_selected.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_leaf_selected_neue_waffen));
   alte_grund_tree->leaf_selected.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_leaf_selected_alte_grund));
   neue_grund_tree->leaf_selected.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_leaf_selected_neue_grund));
   spruchrolle->toggled.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_spruchrolle_toggled));
   button34->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_zauber_laden_clicked));
   button_zauber_sort->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_button_zauber_sort_clicked));
   button_zaubermittel_sort->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_button_zaubermittel_sort_clicked));
   checkbutton_alle_zauber->toggled.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_checkbutton_alle_zauber_toggled));
   checkbutton_beschwoerungen->toggled.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_checkbutton_beschwoerungen_toggled));
   checkbutton_zaubermittel->toggled.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_checkbutton_zaubermittel_toggled));
   checkbutton_zaubersalze->toggled.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_checkbutton_zaubersalze_toggled));
   alte_zauber_tree->leaf_selected.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_leaf_selected_alte_zauber));
   neue_zauber_tree->leaf_selected.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_leaf_selected_neue_zauber));
   alte_zaubermittel_tree->leaf_selected.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_leaf_selected_alte_zauberwerk));
   neue_zaubermittel_tree->leaf_selected.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_leaf_selected_neue_zauberwerk));
   WidgetjXyMKHQ->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_kido_laden_clicked));
   button_kido_sort->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_button_kido_sort_clicked));
   alte_kido_tree->leaf_selected.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_leaf_selected_alte_kido));
   neue_kido_tree->leaf_selected.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_leaf_selected_neue_kido));
   button33->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_sprache_laden_clicked));
   button_sprache_sort->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_button_sprache_sort_clicked));
   radio_sprache_steigern->toggled.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_radio_sprache_steigern_toggled));
   radio_sprache_reduzieren->toggled.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_radio_sprache_reduzieren_toggled));
   radio_sprache_verlernen->toggled.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_radio_sprache_verlernen_toggled));
   alte_sprache_tree->leaf_selected.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_leaf_selected_alte_sprache));
   neue_sprache_tree->leaf_selected.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_leaf_selected_neue_sprache));
   alte_schrift_tree->leaf_selected.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_leaf_selected_alte_schrift));
   neue_schrift_tree->leaf_selected.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_leaf_selected_neue_schrift));
   button_ausruestung_laden->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::ausruestung_laden));
   button_ausruestung_druck->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_button_ausruestung_druck_clicked));
   preise_tree->leaf_selected.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_preise_leaf_selected));
   button_modi->clicked.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_button_modi_clicked));
   clist_preisliste->select_row.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_clist_preisliste_select_row));
   eventbox_MCG->button_press_event.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::on_eventbox_MCG_button_press_event));
   glademm_set_Widget("checkbutton_info_fenster", checkbutton_info_fenster);
}

midgard_CG_glade::~midgard_CG_glade()
{   delete alte_fert_tree;
   delete neue_fert_tree;
   delete alte_waffen_tree;
   delete neue_waffen_tree;
   delete alte_grund_tree;
   delete neue_grund_tree;
   delete alte_zauber_tree;
   delete neue_zauber_tree;
   delete alte_zaubermittel_tree;
   delete neue_zaubermittel_tree;
   delete alte_kido_tree;
   delete neue_kido_tree;
   delete alte_sprache_tree;
   delete neue_sprache_tree;
   delete alte_schrift_tree;
   delete neue_schrift_tree;
   delete preise_tree;
}
