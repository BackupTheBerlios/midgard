/*  Midgard Character Generator
 *  Copyright (C) 2001-2002 Malte Thoma
 *  Copyright (C) 2002      Christof Petig 
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include "Fertigkeiten_angeboren.hh"
#ifndef USE_XML
#include <Aux/SQLerror.h>
#include <Aux/Transaction.h>
exec sql include sqlca;
#endif
#include <gtk--/main.h>

cH_Fertigkeit_angeborene::cache_t cH_Fertigkeit_angeborene::cache;

cH_Fertigkeit_angeborene::cH_Fertigkeit_angeborene(const std::string& name IF_XML(,bool create))
{
 cH_Fertigkeit_angeborene *cached(cache.lookup(name));
 if (cached) *this=*cached;
 else
#ifndef USE_XML
  {
   *this=cH_Fertigkeit_angeborene(new Fertigkeit_angeborene(name));
   cache.Register(name,*this);
  }
#else
  cerr << "angeborene Fertigkeit '" << name << "' nicht im Cache\n";
  if (create)
  {  static Tag t2("angeboreneFertigkeit"); 
     // note that this Tag is shared ... works well for now
     t2.setAttr("Name",name);
     *this=cH_Fertigkeit_angeborene(&t2);
  }
  else throw NotFound();
//  assert(!"angeborene Fertigkeit im Cache");
#endif
}

#ifdef USE_XML
cH_Fertigkeit_angeborene::cH_Fertigkeit_angeborene(const Tag *tag)
{*this=cH_Fertigkeit_angeborene(new Fertigkeit_angeborene(tag));
 cache.Register(tag->getAttr("Name"),*this);
}
#endif

void Fertigkeit_angeborene::get_Fertigkeit()
{
#ifndef USE_XML
 exec sql begin declare section;
   char db_name[50];
   int db_min,db_max,db_wert;
 exec sql end declare section;
 strncpy(db_name,Name().c_str(),sizeof(db_name));
 exec sql select min,max,coalesce(wert,0) into :db_min,:db_max,:db_wert
   from angeborene_fertigkeiten where name = :db_name;
 SQLerror::test(__FILELINE__);
 erfolgswert=db_wert;
 min=db_min;
 max=db_max;
#else
 assert(tag);
 min=tag->getIntAttr("Min");
 max=tag->getIntAttr("Max");
 erfolgswert=tag->getIntAttr("Wert");
#endif 
}

Fertigkeiten_angeborene_All::Fertigkeiten_angeborene_All(Gtk::ProgressBar *progressbar)
{
#ifndef USE_XML
 exec sql begin declare section;
   char db_name[50];
   int db_size;
 exec sql end declare section;
 exec sql select count(name) into :db_size from angeborene_fertigkeiten;
 exec sql declare FAein cursor for select name from angeborene_fertigkeiten order by min;
 Transaction tr;
 exec sql open FAein;
 SQLerror::test(__FILELINE__);
 double count=0;
 while(true)
  {
   progressbar->set_percentage(count/db_size);
   while(Gtk::Main::events_pending()) Gtk::Main::iteration() ;
   exec sql fetch FAein into :db_name;
   SQLerror::test(__FILELINE__,100);
   if (sqlca.sqlcode) break;
   list_All.push_back(&*(cH_Fertigkeit_angeborene(db_name)));
   ++count;
  }
 exec sql close FAein;
 tr.close();
#else
 const Tag *angeboreneFertigkeiten=xml_data->find("angeboreneFertigkeiten");
 if (angeboreneFertigkeiten)
 {  Tag::const_iterator b=angeboreneFertigkeiten->begin(),e=angeboreneFertigkeiten->end();
    double size=e-b;
    FOR_EACH_CONST_TAG_OF_5(i,*angeboreneFertigkeiten,b,e,"angeboreneFertigkeit")
    {  progressbar->set_percentage((i-b)/size);
       while(Gtk::Main::events_pending()) Gtk::Main::iteration() ;
       list_All.push_back(&*(cH_Fertigkeit_angeborene(&*i)));
    }
 }
#endif 
 progressbar->set_percentage(1);
}
