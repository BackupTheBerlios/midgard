/*  Midgard Character Generator
 *  Copyright (C) 2001 Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include "Spezialgebiet.hh"
#include <Aux/SQLerror.h>
#include <Aux/Transaction.h>
exec sql include sqlca;
#include <gtk--/main.h>


cH_Spezialgebiet::cache_t cH_Spezialgebiet::cache;

cH_Spezialgebiet::cH_Spezialgebiet(const std::string& name)
{
 cH_Spezialgebiet *cached(cache.lookup(name));
 if (cached) *this=*cached;
 else
  {
   *this=cH_Spezialgebiet(new Spezialgebiet(name));
   cache.Register(name,*this);
  }
}


Spezialgebiet::Spezialgebiet(const std::string& _name)
: nr(0),name(_name)
{
 exec sql begin declare section;
   char db_s[100];
   char db_typ[10],db_s1[50],db_s2[50];
   int db_nr;         
 exec sql end declare section;
 strncpy(db_s,Name().c_str(),sizeof(db_s));
 exec sql select typ, nr, coalesce(spezial,''),coalesce(spezial2,'')
      into :db_typ,:db_nr,:db_s1,:db_s2
      from spezialgebiete where spezialgebiet=:db_s;
 SQLerror::test(__FILELINE__); 
 typ=db_typ;
 nr=db_nr;
 spezial=db_s1;
 spezial2=db_s2;
}


Spezialgebiet_All::Spezialgebiet_All(Gtk::ProgressBar *progressbar)
{
  exec sql begin declare section;
   char db_name[100],db_dummy[10];
   int db_size,db_dummy2;
 exec sql end declare section;
 exec sql select count(spezialgebiet) into :db_size from spezialgebiete;
 exec sql declare S_EIN cursor for select distinct 
      spezialgebiet,typ,nr from spezialgebiete order by typ,nr;
 Transaction tr;
 exec sql open S_EIN;
 SQLerror::test(__FILELINE__); 
 double count=0;
 while (true)
  { 
    progressbar->set_percentage(count/db_size);
    while(Gtk::Main::events_pending()) Gtk::Main::iteration() ;
    exec sql fetch S_EIN  into :db_name,:db_dummy,:db_dummy2;
    SQLerror::test(__FILELINE__,100); 
    if (sqlca.sqlcode) break;
    list_All.push_back(cH_Spezialgebiet(db_name));
    ++count;
  }
 exec sql close S_EIN;
 tr.close();
 progressbar->set_percentage(1);
}

