/*  Midgard Character Generator
 *  Copyright (C) 2001 Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include "midgard_CG.hh"
exec sql include sqlca;
#include <cstring>
#include <Aux/Transaction.h>
#include <Aux/SQLerror.h>
#include "xml_fileselection.hh"

gint midgard_CG::on_speichern_release_event(GdkEventButton *ev)
{
  if (ev->button==1) on_speichern_clicked();
//  if (ev->button==3) midgard_CG::xml_export();
//  if (ev->button==3) xml_export_auswahl();
  frame_steigern->show();
  return false;
}

void midgard_CG::xml_export_auswahl()
{
  manage (new xml_fileselection(this,"save"));
  frame_steigern->show();
}
 



void midgard_CG::xml_export(const std::string& datei)
{
  std::string cname   = Werte.Name_Charakter();
  std::string version = Werte.Version();
  std::string command = "midgard_xmlexport '"+cname+"' '"+version+"' > '"+datei+"'";
  system(command.c_str());
  std::string strinfo = "Charakter "+cname+" exportiert\n";
  manage (new WindowInfo(strinfo));
}

void midgard_CG::on_speichern_clicked()
{
   grundwerte_speichern();
   Transaction tr;

   ///////////////////////////////////////////////////////////////////////   
   // Berufe, (angeborene) Fertigkeiten, Waffen und Zauber
   // Grundfertigkeiten (Waffen), Sprache, Schrift
   exec sql begin declare section;
      char db_name_ch[50];
      char db_version[50];
      int db_av_bonus,db_sl_bonus;
       char db_region[20];
      char db_fertigkeit[50];
      char db_magisch[1024];
      int db_wert;
   exec sql end declare section;
   strncpy(db_name_ch,Werte.Name_Charakter().c_str(),sizeof(db_name_ch));
   strncpy(db_version,Werte.Version().c_str(),sizeof(db_version));
   // Alte einträge löschen

   exec sql DELETE FROM charaktere_fertigkeiten WHERE charakter_name = :db_name_ch ;
   // Sinne
   std::map<std::string,int> Sinnmap=Werte.Sinne();
   for(std::map<std::string,int>::const_iterator i=Sinnmap.begin();i!=Sinnmap.end();++i) 
    { 
      strncpy(db_fertigkeit, i->first.c_str(),sizeof(db_fertigkeit));
      db_wert =i->second;     
      exec sql INSERT INTO charaktere_fertigkeiten
        (charakter_name,version,fertigkeit,wert,art) VALUES
        (:db_name_ch,:db_version,:db_fertigkeit,:db_wert,'Sinn') ;
      SQLerror::test(__FILELINE__);
    }

   MidgardBasicElement::saveElementliste(list_Beruf,Werte,Typ,Database.ausnahmen);
   MidgardBasicElement::saveElementliste(list_Fertigkeit_ang,Werte,Typ,Database.ausnahmen);
   MidgardBasicElement::saveElementliste(list_Fertigkeit,Werte,Typ,Database.ausnahmen);
   MidgardBasicElement::saveElementliste(list_Waffen,Werte,Typ,Database.ausnahmen);
   for (std::list<cH_MidgardBasicElement>::const_iterator i=list_Waffen_besitz.begin();
         i!=list_Waffen_besitz.end();++i)
      {
         cH_WaffeBesitz WB(*i);
         strncpy(db_fertigkeit, (WB->Name()).c_str(),sizeof(db_fertigkeit));
         strncpy(db_magisch, (WB->Magisch()).c_str(),sizeof(db_magisch));
         db_av_bonus = WB->av_Bonus();
         db_sl_bonus = WB->sl_Bonus();
         strncpy(db_region,(WB->Region()).c_str(),sizeof(db_region));
         exec sql INSERT INTO charaktere_fertigkeiten
            (charakter_name,version,fertigkeit,wert,art,av_bonus,sl_bonus,region,magisch)
         VALUES
            (:db_name_ch,:db_version,:db_fertigkeit,0,'Besitz_W',:db_av_bonus,:db_sl_bonus,:db_region,:db_magisch) ;
            SQLerror::test(__FILELINE__);
      }
   MidgardBasicElement::saveElementliste(list_Zauber,Werte,Typ,Database.ausnahmen);
   MidgardBasicElement::saveElementliste(list_Zauberwerk,Werte,Typ,Database.ausnahmen);
   MidgardBasicElement::saveElementliste(list_Kido,Werte,Typ,Database.ausnahmen);
   MidgardBasicElement::saveElementliste(list_WaffenGrund,Werte,Typ,Database.ausnahmen);
   MidgardBasicElement::saveElementliste(list_Sprache,Werte,Typ,Database.ausnahmen);
   MidgardBasicElement::saveElementliste(list_Schrift,Werte,Typ,Database.ausnahmen);
   // Regionen & Ähnliches
   if (!Originalbool) 
    {  
     exec sql INSERT INTO charaktere_fertigkeiten
        (charakter_name,version,fertigkeit,region,art)
        VALUES(:db_name_ch,:db_version,'Region','ORIG','Region');
      SQLerror::test(__FILELINE__);
    }
   if (!Infobool) 
    {  
     exec sql INSERT INTO charaktere_fertigkeiten
        (charakter_name,version,fertigkeit,region,art)
        VALUES(:db_name_ch,:db_version,'Region','INFO','Region');
      SQLerror::test(__FILELINE__);
    }
   if (Albabool) 
    {  
     exec sql INSERT INTO charaktere_fertigkeiten
        (charakter_name,version,fertigkeit,region,art)
        VALUES(:db_name_ch,:db_version,'Region','A','Region');
      SQLerror::test(__FILELINE__);
    }
   if (Escharbool) 
    {  
     exec sql INSERT INTO charaktere_fertigkeiten
        (charakter_name,version,fertigkeit,region,art)
        VALUES(:db_name_ch,:db_version,'Region','E','Region');
      SQLerror::test(__FILELINE__);
    }
   if (Rawindrabool) 
    {  
     exec sql INSERT INTO charaktere_fertigkeiten
        (charakter_name,version,fertigkeit,region,art)
        VALUES(:db_name_ch,:db_version,'Region','R','Region');
      SQLerror::test(__FILELINE__);
    }
   if (KanThaiPanbool) 
    {  
     exec sql INSERT INTO charaktere_fertigkeiten
        (charakter_name,version,fertigkeit,region,art)
        VALUES(:db_name_ch,:db_version,'Region','K','Region');
      SQLerror::test(__FILELINE__);
    }
   if (Nahuatlanbool) 
    {  
     exec sql INSERT INTO charaktere_fertigkeiten
        (charakter_name,version,fertigkeit,region,art)
        VALUES(:db_name_ch,:db_version,'Region','N','Region');
      SQLerror::test(__FILELINE__);
    }
   if (Waelandbool) 
    {  
     exec sql INSERT INTO charaktere_fertigkeiten
        (charakter_name,version,fertigkeit,region,art)
        VALUES(:db_name_ch,:db_version,'Region','W','Region');
      SQLerror::test(__FILELINE__);
    }
   if (HDbool) 
    {  
     exec sql INSERT INTO charaktere_fertigkeiten
        (charakter_name,version,fertigkeit,region,art)
        VALUES(:db_name_ch,:db_version,'Region','HD','Region');
      SQLerror::test(__FILELINE__);
    }
   if (BRbool) 
    {  
     exec sql INSERT INTO charaktere_fertigkeiten
        (charakter_name,version,fertigkeit,region,art)
        VALUES(:db_name_ch,:db_version,'Region','BR','Region');
      SQLerror::test(__FILELINE__);
    }
   if (Gildenbriefbool) 
    {  
     exec sql INSERT INTO charaktere_fertigkeiten
        (charakter_name,version,fertigkeit,region,art)
        VALUES(:db_name_ch,:db_version,'Region','G','Region');
      SQLerror::test(__FILELINE__);
    }
   if (Kuestenstaatenbool) 
    {  
     exec sql INSERT INTO charaktere_fertigkeiten
        (charakter_name,version,fertigkeit,region,art)
        VALUES(:db_name_ch,:db_version,'Region','S','Region');
      SQLerror::test(__FILELINE__);
    }
   tr.commit();
}

void midgard_CG::grundwerte_speichern()
{
   exec sql begin declare section;
//      char db_beschreibung[102400] ;
      char *db_beschreibung; 
      char db_typ_s[5];
      char db_typ_2_s[5];
      int db_st, db_gw, db_gs,db_ko, db_in,db_zt,db_au,db_pa,db_sb,db_wk,db_rw,db_hgw,
          db_b, db_lp, db_ap, db_kaw,db_wlw,db_abwehr,db_zaubern,
          db_resistenz, db_bo_au, db_bo_sc,db_bo_an,db_bo_ab,db_bo_za,  
          db_bo_psy, db_bo_phs , db_bo_phk, db_bo_gi,db_lpbasis, db_alter  ;
      char db_gestalt[20] ;
      char db_hand[30] ;
      char db_geschlecht[5];
      int db_gewicht, db_groesse, db_grad ;
      char db_spez[30]    ;
      char db_stand[30]   ;
      char db_herkunft[50];
      char db_glaube[50]  ;
      char db_name_ch[50] ;
      char db_name_sp[50] ;
      char db_version[50] ;
      int db_gfp,db_gold ,db_silber,db_kupfer;
      char db_ruestung[20];
      char db_spezies[50];
      int db_aep,db_kep,db_zep;
      bool db_steigern_bool;
      int db_steigern_EP;
      int db_grad_basiswerte;
   exec sql end declare section;


      db_st = Werte.St();      
      db_gw = Werte.Gw();      
      db_gs = Werte.Gs();      
      db_ko = Werte.Ko();      
      db_in = Werte.In();      
      db_zt = Werte.Zt();      
      db_au = Werte.Au();      
      db_pa = Werte.pA();      
      db_sb = Werte.Sb();      
      db_wk = Werte.Wk();      
      db_rw = Werte.RW();      
      db_hgw= Werte.HGW();      
      db_b  = Werte.B();      
      db_lp = Werte.LP();      
      db_ap = Werte.AP();      
      db_kaw= Werte.KAW();      
      db_wlw= Werte.WLW();      
      db_abwehr       = Werte.Abwehr_wert();      
      db_zaubern      = Werte.Zaubern_wert();
      db_resistenz    = Werte.Resistenz();      
      db_bo_au        = Werte.bo_Au();      
      db_bo_sc        = Werte.bo_Sc();      
      db_bo_an        = Werte.bo_An();      
      db_bo_ab        = Werte.bo_Ab();      
      db_bo_za        = Werte.bo_Za();      
      db_bo_psy       = Werte.bo_Psy();      
      db_bo_phs       = Werte.bo_Phs();      
      db_bo_phk       = Werte.bo_Phk();      
      db_bo_gi        = Werte.bo_Gift();      
//      db_lpbasis      = Werte.LPBasis();      
      db_alter        = Werte.Alter();      
      db_gewicht      = Werte.Gewicht();      
      db_groesse      = Werte.Groesse();      
      db_grad         = Werte.Grad();      
      db_gfp = Werte.GFP() ;
      db_gold = Werte.Gold();
      db_silber = Werte.Silber();
      db_kupfer = Werte.Kupfer();
      db_aep = Werte.AEP();
      db_kep = Werte.KEP();
      db_zep = Werte.ZEP();
      db_steigern_bool = steigern_bool;
      db_steigern_EP = Database.GradAnstieg.get_Steigern_EP_Prozent();
      db_grad_basiswerte = Database.GradAnstieg.get_Grad_Basiswerte();

   db_beschreibung = (char *) (Werte.Beschreibung()).c_str();
   strncpy(db_gestalt,(Werte.Gestalt()).c_str(),sizeof(db_gestalt));
   strncpy(db_hand,(Werte.Hand()).c_str(),sizeof(db_hand));
   strncpy(db_geschlecht,(Werte.Geschlecht()).c_str(),sizeof(db_geschlecht));
   strncpy(db_spez,(Werte.Spezialisierung()).c_str(),sizeof(db_spez));
   strncpy(db_stand,(Werte.Stand()).c_str(),sizeof(db_stand));
   strncpy(db_herkunft,(Werte.Herkunft()->Name().c_str()),sizeof(db_herkunft));
   strncpy(db_glaube,(Werte.Glaube()).c_str(),sizeof(db_glaube));
   strncpy(db_name_ch,(Werte.Name_Charakter()).c_str(),sizeof(db_name_ch));
   strncpy(db_name_sp,(Werte.Name_Spieler()).c_str(),sizeof(db_name_sp));
   strncpy(db_version,(Werte.Version()).c_str(),sizeof(db_version));
   strncpy(db_typ_s,Typ[0]->Short().c_str(),sizeof(db_typ_s));
   strncpy(db_typ_2_s,Typ[1]->Short().c_str(),sizeof(db_typ_2_s));
   strncpy(db_ruestung,(Werte.Ruestung()->Name()).c_str(),sizeof(db_ruestung));
   strncpy(db_spezies,(Werte.Spezies()->Name()).c_str(),sizeof(db_spezies));
   
   exec sql UPDATE charaktere SET 
      charakter_name = :db_name_ch  , 
      beschreibung   = :db_beschreibung  , 
      version        = :db_version  ,
      typ_s          = :db_typ_s    ,
      typ_2_s        = :db_typ_2_s    ,
      spieler_name   = :db_name_sp  , 
      st             = :db_st       ,
      gw             = :db_gw       ,
      gs             = :db_gs       ,
      ko             = :db_ko       ,
      inn            = :db_in       ,
      zt             = :db_zt       ,
      au             = :db_au       ,
      pa             = :db_pa       ,
      sb             = :db_sb       ,
      wk             = :db_wk       ,
      rw             = :db_rw       ,
      hgw            = :db_hgw      ,
      b              = :db_b        ,
      lp             = :db_lp       ,
      ap             = :db_ap       ,
      kaw            = :db_kaw      ,
      wlw            = :db_wlw      ,
      abwehr         = :db_abwehr   ,
      zaubern        = :db_zaubern  ,
      resistenz      = :db_resistenz,
      lpbasis        = :db_lpbasis  ,
      alter          = :db_alter    ,
      gestalt        = :db_gestalt  ,
      hand           = :db_hand     ,
      geschlecht     = :db_geschlecht  ,
      gewicht        = :db_gewicht  ,
      groesse        = :db_groesse  ,
      grad           = :db_grad     ,
      spezialisierung= :db_spez     ,
      stand          = :db_stand    ,
      herkunft       = :db_herkunft ,
      glaube         = :db_glaube   ,
      db_bo_au       = :db_bo_au       ,
      db_bo_sc       = :db_bo_sc       ,
      db_bo_an       = :db_bo_an       ,
      db_bo_ab       = :db_bo_ab       ,
      db_bo_za       = :db_bo_za       ,
      db_bo_psy      = :db_bo_psy      ,
      db_bo_phs      = :db_bo_phs      ,
      db_bo_phk      = :db_bo_phk      ,
      db_bo_gi       = :db_bo_gi       ,  
      db_gfp         = :db_gfp         ,
      gold           = :db_gold        ,
      silber         = :db_silber      ,
      kupfer         = :db_kupfer      ,
      ruestung       = :db_ruestung    ,
      spezies          = :db_spezies ,
      aep            = :db_aep,
      kep            = :db_kep,
      zep            = :db_zep,
      steigern_bool  = :db_steigern_bool,
      steigern_EP_prozent  = :db_steigern_EP,
      grad_basiswerte =:db_grad_basiswerte
      WHERE charakter_name = :db_name_ch and version= :db_version;
   SQLerror::test(__FILELINE__,100);
   if (sqlca.sqlcode==100) charakter_db_anlegen();
}

void midgard_CG::charakter_db_anlegen()
{
  
   exec sql begin declare section;
      char db_name_ch[50];
      char db_version[50];
   exec sql end declare section;
   strncpy(db_name_ch,(Werte.Name_Charakter()).c_str(),sizeof(db_name_ch));
   strncpy(db_version,(Werte.Version()).c_str(),sizeof(db_version));
   std::cout << "Neuen Charakter "<< db_name_ch  <<" in Datenbank anlegen\n";
   exec sql insert into charaktere 
        (charakter_name,version)
     values
        (:db_name_ch,:db_version);

   midgard_CG::on_speichern_clicked();   
}
