/*  Midgard Character Generator
 *  Copyright (C) 2001 Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include "midgard_CG.hh"
#include <Aux/itos.h>

#ifndef USE_XML
#include <Aux/Transaction.h>
#include <Aux/SQLerror.h>
#include "Window_charakter_auswahl.hh"
//exec sql include sqlca;
#include <cstring>
#else
#include "TagStream.hh"
#include "WindowInfo.hh"
#endif

#include "xml_fileselection.hh"
#include <Sprache.hh>
#include <Schrift.hh>
#include "Fertigkeiten_angeboren.hh"
#include "Waffe.hh"
#include "WaffeGrund.hh"
#include "Zauber.hh"
#include "Zauberwerk.hh"
#include "KiDo.hh"
#include <SelectMatching.h>
 
gint midgard_CG::on_laden_release_event(GdkEventButton *ev)
{
#ifdef USE_XML
  xml_import_auswahl();
#else
  if (ev->button==1) on_laden_clicked();
//  if (ev->button==3) xml_import_auswahl();
#endif
  return false;
}

void midgard_CG::xml_import_auswahl()
{
#ifdef USE_XML
  manage (new xml_fileselection(this,"load"/*"Abenteurer laden"*/))
	  ->set_filename(filename);
#endif
}


#ifdef USE_XML
bool operator!=(const cH_Preise &a, const string &b)
{  return a->Name()!=b;
}
#endif

void midgard_CG::xml_import(const std::string& datei)
{
#ifdef USE_XML
   TagStream ts(datei);
   const Tag *data=&ts;
   const Tag *top=ts.find("Midgard-Abenteurer"); // -V8
   if (!top) 
   {  data=ts.find("MidgardCG-data");  // V8+
      if (!data) data=ts.find("MAGUS-data"); // V10?
      if (data) 
      {  top=data->find("Midgard-Abenteurer");
         if (!top) top=data->find("Midgard-Abenteurer"); // V10?
      }
   }
   // Wenn mehrere Abenteurer -> auswählen?
   if (!top)
   {  manage(new WindowInfo("(Abenteurer in) Datei '"+datei
                   +"' nicht gefunden."));
      return;
   }
   
   const int xml_version=top->getIntAttr("Version");
   if (xml_version<3 || xml_version>9)
   {  manage(new WindowInfo("XML Version "+itos(xml_version)
   			+" wird noch nicht unterstützt"));
   }

   if (data)
   {  const Tag *Preise=data->find("Preise");
      if (Preise)
      {  FOR_EACH_CONST_TAG_OF(i,*Preise,"Kaufpreis")
         {  std::string name=i->getAttr("Ware");
         
            // gleichnamige Ware überschreiben, sonst läuft das irgendwann
            // mit häufigem Laden/Speichen über (alte Einträge werden nicht
            // gelöscht)
            std::list<cH_Preise>::iterator iter;
            while ((iter=std::find(Database.preise.begin(),Database.preise.end(),name))
            		!=Database.preise.end())
            {  iter=Database.preise.erase(iter);
            }
            
            Preise::saveArtikel(i->getAttr("Art"),i->getAttr("Art2"),name,
            		i->getFloatAttr("Preis"),i->getAttr("Währung"),
            		i->getFloatAttr("Gewicht"));
            Database.preise.push_back(cH_Preise(name));
         }
      }
   }

 on_neuer_charakter_clicked();
   
   const Tag *Figur=top->find("Figur");
   const Tag *Typ=top->find("Typ");
   const Tag *Basiseigenschaften=top->find("Basiseigenschaften");
   const Tag *abgeleiteteEigenschaften=top->find("abgeleiteteEigenschaften");
   const Tag *Erfolgswerte=top->find("Erfolgswerte");
   const Tag *Resistenzen=top->find("Resistenzen");
   const Tag *Gesundheit=top->find("Gesundheit");
   const Tag *Beschreibung=top->find("Beschreibung");
//   const Tag *Boni=top->find("Boni");
//   const Tag *Boni_Resistenzen=Boni->find("Resistenzen");
   const Tag *Vermoegen=top->find("Vermoegen"); // V3
   if (!Vermoegen) Vermoegen=top->find("Vermögen"); // V4
   const Tag *Ruestung=top->find("Ruestung"); // V2?
   if (!Ruestung) Ruestung=top->find("Rüstung"); // V3
   const Tag *Ausruestung=top->find("Ausrüstung"); // V4+
   if (!Ausruestung) Ausruestung=top->find("Fertigkeiten"); // V3-
   if (!Ruestung) Ruestung=Ausruestung->find("Rüstung"); // V4+
   const Tag *Fertigkeiten=top->find("Fertigkeiten");
   const Tag *Steigern=top->find("Steigern");
   const Tag *Praxispunkte=Steigern?Steigern->find("Praxispunkte"):0;

   Werte.setBasiswerte(Basiseigenschaften->getIntAttr("St"),
   	Basiseigenschaften->getIntAttr("Gw",abgeleiteteEigenschaften->getIntAttr("RW")),
   	Basiseigenschaften->getIntAttr("Gs",Basiseigenschaften->getIntAttr("Ge")),
   	Basiseigenschaften->getIntAttr("Ko"),
   	Basiseigenschaften->getIntAttr("In"),
   	Basiseigenschaften->getIntAttr("Zt"));
   Werte.setAu(abgeleiteteEigenschaften->getIntAttr("Au"));
   Werte.setpA(abgeleiteteEigenschaften->getIntAttr("pA"));
   Werte.setSb(abgeleiteteEigenschaften->getIntAttr("Sb"));
   Werte.setWk(abgeleiteteEigenschaften->getIntAttr("Wk"));
   Werte.setB(abgeleiteteEigenschaften->getIntAttr("B"));
   Werte.setLP(Gesundheit->getIntAttr("LP"));
   Werte.setAP(Gesundheit->getIntAttr("AP"));
   Werte.setZaubern_wert(Erfolgswerte->getIntAttr("Zaubern"));
   Werte.setAbwehr_wert(Erfolgswerte->getIntAttr("Abwehr"));
   Werte.setResistenz(Erfolgswerte->getIntAttr("ZauberResistenz", // V9
   	!Resistenzen?0:Resistenzen->getIntAttr("Zauber", // V5
   	Resistenzen->getIntAttr("Resistenz", // V4.Malte
   	Resistenzen->getIntAttr("psy"))))); // V-4
   if (Praxispunkte)
   {  Werte.setZaubernPP(Praxispunkte->getIntAttr("Zaubern")); // V8
      Werte.setAbwehrPP(Praxispunkte->getIntAttr("Abwehr")); // V8
      Werte.setResistenzPP(Praxispunkte->getIntAttr("Resistenz")); // V8
   }
   else
   {  Werte.setZaubernPP(0);
      Werte.setAbwehrPP(0);
      Werte.setResistenzPP(0);
   }
   Werte.setHand(Typ->getAttr("Hand"));
   Werte.setGewicht(Beschreibung->getIntAttr("Gewicht"));
   Werte.setGroesse(Beschreibung->getIntAttr("Größe"));
   Werte.setGrad(Figur->getIntAttr("Grad"));
   Werte.setStand(Beschreibung->getAttr("Stand"));

   Werte.setAlter(Beschreibung->getIntAttr("Alter")); 
   Werte.setGeschlecht(Typ->getAttr("Geschlecht","m"));
   Werte.setSpezialisierung(Typ->getAttr("Spezialisierung"));
   Werte.setHerkunft(cH_Land(Beschreibung->getAttr("Herkunft"),true));
   Werte.setGlaube(Beschreibung->getAttr("Glaube"));
   Werte.setNamen(Figur->getAttr("Name"),Figur->getAttr("Spieler"),Figur->getAttr("Zeitpunkt"));
   Werte.setGFP(Steigern ? Steigern->getIntAttr("GFP", // V9
   		top->getInt("GFP")) : top->getInt("GFP"));
   Werte.setGG(abgeleiteteEigenschaften->getIntAttr("GG")); // V9
   Werte.setSG(abgeleiteteEigenschaften->getIntAttr("SG")); // V9
   Werte.setBeschreibung(top->getString("Text")); 
   Werte.setGeld(Vermoegen->getIntAttr("GS"),Vermoegen->getIntAttr("SS"),Vermoegen->getIntAttr("KS"));
   if (Ruestung) Werte.setRuestung(cH_Ruestung(Ruestung->Value(),true));
   else Werte.setRuestung(cH_Ruestung("OR",true));
   Werte.setSpezies(cH_Spezies(Typ->getAttr("Spezies","Mensch"),true));
   if (Steigern) // V7+
      Werte.setEP(Steigern->getIntAttr("AEP"),Steigern->getIntAttr("KEP"),Steigern->getIntAttr("ZEP"));
   else
      Werte.setEP(0,0,0);
   Werte.setStadt_Land(Typ->getAttr("Stadt_Land","Stadt")); // V8+
   if (Steigern)
      Database.GradAnstieg.set_Grad_Anstieg(Steigern->getIntAttr("EPproGFP",50)
      	,Steigern->getIntAttr("Basiswerte",Werte.Grad()));
   else Database.GradAnstieg.set_Grad_Anstieg(50,Werte.Grad());

   // Abenteurerklasse setzen und anzeigen 
   this->Typ[0]=cH_Typen(Typ->getAttr("Abkürzung"),true);

   { std::string s = Typ->getAttr("Abkürzung2");
     if(s!="") this->Typ[1]=cH_Typen(s,true);
   }

   ///////////////////////////////////////////////////////////////////////   
   // Berufe, Fertigkeiten, Waffen und Zauber (KiDo), Grundkenntnisse (Waffen)
   load_fertigkeiten(Fertigkeiten,Ausruestung,xml_version);
   Typ_Geschlecht_Spezies_setzen();
   load_ausruestung(Ausruestung,&besitz);
   
   filename=datei;
#endif
}

void midgard_CG::Typ_Geschlecht_Spezies_setzen() // nach laden etc.
{  
//////////////////////////////////////////////////////////////////////////////
//   // Land oder Stadt?
//   if(Werte.Stadt_Land()=="Stadt") optionmenu_land->set_history(0);
//   else radiobutton_land->set_active;

   // Geschlecht setzen ////////////////////////////////////////////////
   if (Werte.Geschlecht()=="w") radiobutton_frau->set_active(true);
   if (Werte.Geschlecht()=="m") radiobutton_mann->set_active(true);

   fill_typauswahl();
   if(!Typ[1]->Short().empty()) fill_typauswahl_2();
   
   if (this->Typ[0]->Zaubern()=="n" || this->Typ[0]->Short() == "Or" ||
#ifndef USE_XML
       this->Typ[0]->Short() == "Ord" || this->Typ[1]->Short() == "Ord" ||
#endif
       this->Typ[1]->Zaubern()=="n" || this->Typ[1]->Short() == "Or")
      label_spezialwaffe->set_text("Spezialwaffe durch \nSelektieren auswählen");
   else label_spezialwaffe->set_text("");
   Database.ausnahmen.set_Typ(this->Typ);

   menu_init();

   Database.ausnahmen.set_Beruf(list_Beruf);

   // Spezies setzen ////////////////////////////////////////////
   Gtk::Menu_Helpers::SelectMatching(*optionmenu_spezies,Werte.Spezies());
   //////////////////////////////////////////////////////////////

   show_gtk();
   if(cH_Spezialgebiet::is_cached(Werte.Spezialisierung()))
      Werte.setSpezialgebiet(cH_Spezialgebiet(Werte.Spezialisierung()));
}


#ifndef USE_XML
void midgard_CG::on_laden_clicked()
{
 on_neuer_charakter_clicked();
 manage (new Window_charakter_auswahl(this));
}

void midgard_CG::select_charakter(const std::string& name, const std::string& version)
{
  try{
    load_charakter(name,version);
   }catch(SQLerror &e) {regnot("Laden Fehlgeschlagen");}
  button_abg_werte->set_sensitive(true);
//  button_herkunft->set_sensitive(true);
//  button_sprache->set_sensitive(true);
  button_beschreibung->set_sensitive(true);
  frame_steigern->set_sensitive(true);
  on_radio_steigern_all();
  frame_lernschema->set_sensitive(true);
}


void midgard_CG::load_charakter(std::string name, std::string version)
{
   Werte.setNamen(name,"",version);
   // Werte
   exec sql begin declare section;
      char *db_beschreibung=0;
      char db_typ_s[5]     ;
      char db_typ_2_s[5]     ;
      int db_st,db_gw,db_gs,db_ko,db_in,db_zt,db_au,db_pa,db_sb,db_wk,
          db_b,db_lp,db_ap,db_abwehr,db_zaubern,db_resistenz
          ,db_abwehr_pp,db_zaubern_pp,db_resistenz_pp,db_alter;
      char db_hand[30] ;
      char db_geschlecht[5];
      int db_gewicht,db_groesse,db_grad;
      char db_spez[30]    ;
      char db_stand[30]   ;
      char db_herkunft[50];
      char db_glaube[50]  ;
      char db_name_ch[50] ;
      char db_name_sp[50] ;
      char db_version[50] ;
      int db_gfp,db_gg,db_sg,db_gold,db_silber,db_kupfer;
      char db_ruestung[20];
      char db_spezies[50];
      int db_aep,db_kep,db_zep;
      int db_steigern_EP;      
      int db_grad_basiswerte;
      char db_stadt_land[20];
   exec sql end declare section;

 //  db_beschreibung=0; /* Ist nötig !!! */
   strncpy(db_name_ch,name.c_str(),sizeof(db_name_ch));
   strncpy(db_version,version.c_str(),sizeof(db_version));

   Transaction tr;

   exec sql DECLARE cha CURSOR FOR
      select 
         charakter_name ,
         beschreibung   ,
         version        ,
         typ_s          ,
         coalesce(typ_2_s,'')          ,
         spieler_name   ,
         st             ,
         gw             ,
         gs             ,
         ko             ,
         inn            ,
         zt             ,
         au             ,
         pa             ,
         sb             ,
         wk             ,
         b              ,
         lp             ,
         ap             ,
         abwehr         ,
         zaubern        ,
         resistenz      ,
         abwehr_pp         ,
         zaubern_pp        ,
         resistenz_pp      ,
         alter          ,
         hand           ,
         geschlecht     ,
         gewicht        ,
         groesse        ,
         grad           ,
         spezialisierung,
         stand          ,
         herkunft       ,
         glaube         ,
         db_gfp         ,
         gg         ,
         sg         ,
         gold        ,
         silber      ,
         kupfer      ,
         ruestung    ,
         spezies  ,
         coalesce(aep,0), coalesce(kep,0),coalesce(zep,0),
         coalesce(steigern_EP_prozent,50),
         coalesce(grad_basiswerte,1),
         stadt_land
      FROM charaktere WHERE charakter_name= :db_name_ch
            AND version= :db_version;


      exec sql open cha;
      SQLerror::test(__FILELINE__);

      exec sql fetch cha into 
       :db_name_ch  , 
       :db_beschreibung,
       :db_version  ,
       :db_typ_s      ,
       :db_typ_2_s      ,
       :db_name_sp  , 
       :db_st       ,
       :db_gw       ,
       :db_gs       ,
       :db_ko       ,
       :db_in       ,
       :db_zt       ,
       :db_au       ,
       :db_pa       ,
       :db_sb       ,
       :db_wk       ,
       :db_b        ,
       :db_lp       ,
       :db_ap       ,
       :db_abwehr   ,
       :db_zaubern  ,
       :db_resistenz,
       :db_abwehr_pp   ,
       :db_zaubern_pp  ,
       :db_resistenz_pp,
       :db_alter    ,
       :db_hand     ,
       :db_geschlecht,
       :db_gewicht  ,
       :db_groesse  ,
       :db_grad     ,
       :db_spez     ,
       :db_stand    ,
       :db_herkunft ,
       :db_glaube   ,
       :db_gfp         ,
       :db_gg         ,
       :db_sg         ,
       :db_gold        ,
       :db_silber      ,
       :db_kupfer      ,
       :db_ruestung    ,
       :db_spezies     ,
       :db_aep,:db_kep,:db_zep  ,
       :db_steigern_EP,
       :db_grad_basiswerte,
       :db_stadt_land;
   SQLerror::test(__FILELINE__);
   exec sql close cha;
   Werte.setBasiswerte(db_st,db_gw,db_gs,db_ko,db_in,db_zt) ;    
   Werte.setAu(db_au);
   Werte.setpA(db_pa);
   Werte.setSb(db_sb);
   Werte.setWk(db_wk);
   Werte.setB(db_b);
   Werte.setLP(db_lp);
   Werte.setAP(db_ap);
   Werte.setZaubern_wert(db_zaubern);
   Werte.setAbwehr_wert(db_abwehr);
   Werte.setResistenz(db_resistenz);
   Werte.setZaubernPP(db_zaubern_pp);
   Werte.setAbwehrPP(db_abwehr_pp);
   Werte.setResistenzPP(db_resistenz_pp);
   Werte.setHand(db_hand);
   Werte.setGewicht(db_gewicht);
   Werte.setGroesse(db_groesse);
   Werte.setGrad(db_grad);
   Werte.setStand(db_stand);

   Werte.setAlter(db_alter); 
   Werte.setGeschlecht(db_geschlecht) ;
   Werte.setSpezialisierung(db_spez) ;
   Werte.setHerkunft(cH_Land(db_herkunft));
   Werte.setGlaube(db_glaube);
   Werte.setNamen(db_name_ch,db_name_sp,db_version) ;
   Werte.setGFP(db_gfp);
   Werte.setGG(db_gg);
   Werte.setSG(db_sg);
   Werte.setBeschreibung(db_beschreibung); free(db_beschreibung);
   Werte.setGeld(db_gold,db_silber,db_kupfer);
   Werte.setRuestung(cH_Ruestung(db_ruestung));
   Werte.setSpezies(cH_Spezies(db_spezies)) ;
   Werte.setEP(db_aep,db_kep,db_zep);
   Werte.setStadt_Land(db_stadt_land);
   Database.GradAnstieg.set_Grad_Anstieg(db_steigern_EP,db_grad_basiswerte);

   Typ[0]=cH_Typen(db_typ_s);
   { std::string s = db_typ_2_s;
     if(s!="") Typ[1]=cH_Typen(s);
   }

   ///////////////////////////////////////////////////////////////////////   
   // Berufe, Fertigkeiten, Waffen und Zauber (KiDo), Grundkenntnisse (Waffen)
   load_fertigkeiten();
   Typ_Geschlecht_Spezies_setzen();
   load_ausruestung();
}

void midgard_CG::load_ausruestung()
{
  exec sql begin declare section;
    char adb_name[50];
    char adb_vers[50];
    char adb_art[50],adb_fert[50],adb_magisch[50];
    int adb_wert,adb_self;
    char query[1024];
  exec sql end declare section;
  strncpy(adb_name,Werte.Name_Abenteurer().c_str(),sizeof(adb_name));
  strncpy(adb_vers,Werte.Version(OptionBool.version).c_str(),sizeof(adb_vers));
  strncpy(adb_art,"Ausruestung",sizeof(adb_art));
  std::string squery = "select fertigkeit,wert,magisch,sl_bonus
      from charaktere_fertigkeiten
      where charakter_name='"+Werte.Name_Abenteurer()+"' and 
            version ='"+Werte.Version(OptionBool.version)+"' and art='Ausruestung'
            and av_bonus="+itos(0);
  strncpy(query,squery.c_str(),sizeof(query));
  exec sql prepare AFEIN_ from :query;
  exec sql declare AFEIN cursor for AFEIN_;
  Transaction tr;
  exec sql open AFEIN;
  SQLerror::test(__FILELINE__);
  while(true)
    {
      //av_bonus entspricht dem Parent
      //sl_bonus dem self
      exec sql fetch AFEIN into :adb_fert, :adb_wert,:adb_magisch,:adb_self;
      SQLerror::test(__FILELINE__,100);
      if (sqlca.sqlcode) break;
      AusruestungBaum *A = &besitz.push_back(Ausruestung(adb_fert,adb_magisch,adb_wert));
      A->setParent(&besitz);
      load_ausruestung_C(adb_self,A);
    }
  exec sql close AFEIN;
  tr.close();
}

void midgard_CG::load_ausruestung_C(int parent,AusruestungBaum *AB)
{
  vector<pair<int,AusruestungBaum*> > V;
  exec sql begin declare section;
    char acdb_name[50];
    char acdb_vers[50];
    char acdb_art[50],acdb_fert[50],acdb_magisch[50];
    int acdb_wert,acdb_self;
    char cquery[1024];
  exec sql end declare section;
  strncpy(acdb_name,Werte.Name_Abenteurer().c_str(),sizeof(acdb_name));
  strncpy(acdb_vers,Werte.Version(OptionBool.version).c_str(),sizeof(acdb_vers));
  strncpy(acdb_art,"Ausruestung",sizeof(acdb_art));
  std::string squery = "select fertigkeit,wert,magisch,sl_bonus "
      "from charaktere_fertigkeiten "
      "where charakter_name='"+Werte.Name_Abenteurer()+"' and "
            "version ='"+Werte.Version(OptionBool.version)+"' and art='Ausruestung' "
            "and av_bonus="+itos(parent);
  strncpy(cquery,squery.c_str(),sizeof(cquery));
//cout << cquery<<'\n'<<parent<<'\n';
  exec sql prepare LCFEIN_ from :cquery;
  exec sql declare LCFEIN cursor for LCFEIN_;
  Transaction tr;
  exec sql open LCFEIN;
  SQLerror::test(__FILELINE__);
  while(true)
    {
      //av_bonus entspricht dem Parent
      //sl_bonus dem self
      //wert entspricht sichtbar
      exec sql fetch LCFEIN into :acdb_fert, :acdb_wert,:acdb_magisch, :acdb_self;
//cout << "Eingelesen: ";
//cout << acdb_fert<<'-'<<acdb_wert<<'-'<<acdb_magisch<<'-'<<acdb_self<<'-'<<'\n';
      SQLerror::test(__FILELINE__,100);
      if (sqlca.sqlcode) break;
      AusruestungBaum *A = &AB->push_back(Ausruestung(acdb_fert,acdb_magisch,acdb_wert));
      A->setParent(AB);
//cout << "Child: "<<acdb_self<<' '<<parent<<'\t';
//cout<<A->getAusruestung().Name()<<'\t'<<AB->getAusruestung().Name()<<'\n';
      V.push_back(pair<int,AusruestungBaum*>(acdb_self,A));  
     }
  exec sql close LCFEIN;
  tr.close();

  for(vector<pair<int,AusruestungBaum*> >::iterator i=V.begin();i!=V.end();++i)
   {
//cout << i->first<<' '<<i->second.getAusruestung().Name()<<'\n';
    load_ausruestung_C(i->first,i->second);
   }
}
#else
void midgard_CG::load_ausruestung(const Tag *tag, AusruestungBaum *AB)
{  FOR_EACH_CONST_TAG_OF(i,*tag,"Gegenstand")
   {  cH_Preise(i->getAttr("Bezeichnung"),true); // create dummy if needed
      AusruestungBaum *A = &AB->push_back(
   	Ausruestung(i->getAttr("Bezeichnung"),i->getAttr("Besonderheit")
   					,i->getBoolAttr("sichtbar")));
      A->setParent(AB);
      load_ausruestung(&*i,A);
   }
}
#endif

void midgard_CG::load_fertigkeiten(IF_XML(const Tag *tag, const Tag *waffen_b, int xml_version))
{
#ifndef USE_XML
  exec sql begin declare section;
   char db_fert[50],db_art[50];
   int db_wert;
   char query[1024];
   int db_av_bonus,db_sl_bonus;
   char db_magisch[512],db_region[30],db_zauberwerk_stufe[10];
  exec sql end declare section;
  std::string squery = "select fertigkeit,coalesce(wert,0),art,
      coalesce(av_bonus,0),coalesce(sl_bonus,0),coalesce(region,''),
      coalesce(magisch,''),coalesce(zauberwerk_stufe,'')
      from charaktere_fertigkeiten
      where charakter_name='"+Werte.Name_Abenteurer()+"' and 
            version ='"+Werte.Version(OptionBool.version)+"' and art!='Ausruestung'";
  strncpy(query,squery.c_str(),sizeof(query));
  exec sql prepare LFEIN_ from :query;
  exec sql declare LFEIN cursor for LFEIN_;
  Transaction tr;
  exec sql open LFEIN;
  SQLerror::test(__FILELINE__);
  while(true)
    {
      exec sql fetch LFEIN into :db_fert, :db_wert, :db_art,
            :db_av_bonus, :db_sl_bonus, :db_region, :db_magisch,
            :db_zauberwerk_stufe ;
      SQLerror::test(__FILELINE__,100);
      if (sqlca.sqlcode) break;
      std::string sart=db_art;
      if(sart=="Sinn")
        {
         Werte.setSinn(db_fert,db_wert);
        }
      if(sart=="Beruf")
        {
         cH_MidgardBasicElement beruf(&*cH_Beruf(db_fert));
// gibt es nicht mehr         cH_Beruf(beruf)->set_Erfolgswert(db_wert);
         list_Beruf.push_back(beruf);
        }
      if(sart=="ang.Fertigkeit")
       {
         cH_MidgardBasicElement fert_an(&*cH_Fertigkeit_angeborene(db_fert));
         cH_Fertigkeit_angeborene(fert_an)->set_Erfolgswert(db_wert);
         list_Fertigkeit_ang.push_back(fert_an);
       }    
      if(sart=="Fertigkeit")
       {
         cH_MidgardBasicElement fert(&*cH_Fertigkeit(db_fert));
         fert->set_Erfolgswert(db_wert);
         fert->set_Praxispunkte(db_av_bonus);
         if(fert->Name()=="Landeskunde") 
         {  fert=new Fertigkeit(*cH_Fertigkeit(fert));
            cH_Fertigkeit(fert)->setZusatz(db_magisch);
         }
         list_Fertigkeit.push_back(fert);
         if      (fert->Name()=="KiDo") kido_bool=true;
         else if (fert->Name()=="Zaubern") magie_bool=true;
       }    
      if(sart=="Waffe")
        {
         cH_MidgardBasicElement waffe(&*cH_Waffe(db_fert));
         waffe->set_Erfolgswert(db_wert);
         waffe->set_Praxispunkte(db_av_bonus);
         list_Waffen.push_back(waffe);
        }
      if(sart=="Besitz_W")
        {
         std::string wn = Database.Waffe_from_Alias[db_fert];
         if (wn=="") wn=db_fert; 
         list_Waffen_besitz.push_back(new 
           WaffeBesitz(cH_Waffe(wn),
                        db_fert,db_region,db_av_bonus,db_sl_bonus,db_magisch));
        }
      if(sart=="Zauber")        list_Zauber.push_back(&*cH_Zauber(db_fert));
      if(sart=="Zauberwerk")    list_Zauberwerk.push_back(&*cH_Zauberwerk(db_fert,db_magisch,db_zauberwerk_stufe));
      if(sart=="KiDo")          list_Kido.push_back(&*cH_KiDo(db_fert)) ;
      if(sart=="Grundkenntnis") list_WaffenGrund.push_back(new WaffeGrund(db_fert)) ;
      if(sart=="Sprache")
        {
         cH_MidgardBasicElement sprache(&*cH_Sprache(db_fert));
         sprache->set_Erfolgswert(db_wert);
         sprache->set_Praxispunkte(db_av_bonus);
         list_Sprache.push_back(sprache);
        }
      if(sart=="Urschrift") 
        {
         cH_MidgardBasicElement schrift(&*cH_Schrift(db_fert));
         schrift->set_Erfolgswert(db_wert);
         schrift->set_Praxispunkte(db_av_bonus);
         list_Schrift.push_back(schrift);
        }
      if(sart=="bool")
        {
         std::string reg=db_region;
         if (reg=="ORIG") {OptionBool.Original=false ; }
         else if (reg=="INFO") {OptionBool.Info=false ;}
         else if (reg=="PICS") {OptionBool.Info=false ;}
         else if (reg=="VERS") {OptionBool.version=false ;}
         else if (reg=="STEI") {OptionBool.steigern=false ;}
        }
      if(sart=="Region")
        {
         cH_Region R(db_fert);
         bool active=db_wert;         
         Region::setActive(Database.Regionen,R,active);
        }
    } 
  exec sql close LFEIN;
  tr.close();
#else

#warning wer löscht die Listen? (Fertigkeiten etc.)
// alle bools an
    OptionBool.Original=OptionBool.Info=OptionBool.Info=
    	OptionBool.version=OptionBool.steigern=true;
// alle Regionen aus
    for(std::vector<cH_Region>::const_iterator i=Database.Regionen.begin();
    			i!=Database.Regionen.end();++i)
    {  Region::setActive(Database.Regionen,(*i),false);
    }
    
    FOR_EACH_CONST_TAG(i,*tag)
    {
      const std::string sart=i->Type();
      if(sart=="Sinn")
        {
         Werte.setSinn(i->getAttr("Bezeichnung"),i->getIntAttr("Wert"));
        }
      else if(sart=="Beruf")
        {
         cH_MidgardBasicElement beruf(&*cH_Beruf(i->getAttr("Bezeichnung"),true));
         cH_Beruf(beruf)->set_Erfolgswert(i->getIntAttr("Wert"));
         list_Beruf.push_back(beruf);
        }
      else if(sart=="ang-Fertigkeit" || sart=="ang.Fertigkeit")
       {
         cH_MidgardBasicElement fert_an(&*cH_Fertigkeit_angeborene(i->getAttr("Bezeichnung"),true));
         cH_Fertigkeit_angeborene(fert_an)->set_Erfolgswert(i->getIntAttr("Wert"));
         list_Fertigkeit_ang.push_back(fert_an);
       }    
      else if(sart=="Fertigkeit")
       {
         cH_MidgardBasicElement fert(&*cH_Fertigkeit(i->getAttr("Bezeichnung"),true));
         fert->set_Erfolgswert(i->getIntAttr("Wert"));
         fert->set_Praxispunkte(i->getIntAttr("Praxispunkte"));
         if(fert->Name()=="Landeskunde") 
         {  fert=new Fertigkeit(*cH_Fertigkeit(fert));
            cH_Land(i->getAttr("Land"),true);
            cH_Fertigkeit(fert)->setZusatz(i->getAttr("Land"));
         }
         list_Fertigkeit.push_back(fert);
         if      (fert->Name()=="KiDo") kido_bool=true;
         else if (fert->Name()=="Zaubern") magie_bool=true;
       }    
      else if(sart=="Waffe")
        {
         cH_MidgardBasicElement waffe(&*cH_Waffe(i->getAttr("Bezeichnung"),true));
         waffe->set_Erfolgswert(i->getIntAttr("Wert"));
         waffe->set_Praxispunkte(i->getIntAttr("Praxispunkte"));
         list_Waffen.push_back(waffe);
        }
#if 0 // andere Liste       
      if(sart=="Besitz_W")
#endif
      else if(sart=="Zauber")
      	  list_Zauber.push_back(&*cH_Zauber(i->getAttr("Bezeichnung"),true));
      else if(sart=="Zauberwerk")
          list_Zauberwerk.push_back(&*cH_Zauberwerk(i->getAttr("Bezeichnung"),
          	i->getAttr("Art"),i->getAttr("Stufe"),true));
      else if(sart=="KiDo")
          list_Kido.push_back(&*cH_KiDo(i->getAttr("Bezeichnung"),true)) ;
      else if(sart=="Grundkenntnis")
          list_WaffenGrund.push_back(&*cH_WaffeGrund(i->getAttr("Bezeichnung"),true));
      else if(sart=="Sprache")
        {
         cH_MidgardBasicElement sprache(&*cH_Sprache(i->getAttr("Bezeichnung"),true));
         int wert=i->getIntAttr("Wert");
         if (xml_version<8) // 3. Auflage
         {  switch (wert)
            {  case 1: wert=4;
               case 2: wert=6;
               case 3: wert=10;
               case 4: wert=13;
            }
         }
         sprache->set_Erfolgswert(wert);
         sprache->set_Praxispunkte(i->getIntAttr("Praxispunkte"));
         list_Sprache.push_back(sprache);
        }
      else if(sart=="Urschrift") 
        {
         cH_MidgardBasicElement schrift(&*cH_Schrift(i->getAttr("Bezeichnung"),true));
         int wert=i->getIntAttr("Wert");
         if (xml_version<8 && !wert) wert=12;
         schrift->set_Erfolgswert(wert);
         schrift->set_Praxispunkte(i->getIntAttr("Praxispunkte"));
         list_Schrift.push_back(schrift);
        }
      else if(sart=="bool" && i->attbegin()!=i->attend())
        {
         std::string reg=i->attbegin()->first;
         if (reg=="ORIG") {OptionBool.Original=false ; }
         else if (reg=="INFO") {OptionBool.Info=false ;}
         else if (reg=="PICS") {OptionBool.Info=false ;}
         else if (reg=="VERS") {OptionBool.version=false ;}
         else if (reg=="STEI") {OptionBool.steigern=false ;}
        }
      else if(sart=="Region")
        {
         try
         {  cH_Region R(i->getAttr("Name",i->getAttr("Region")));
            Region::setActive(Database.Regionen,R,false);
         }
         catch (const NotFound &e)
         {}
        }
    } 
    FOR_EACH_CONST_TAG_OF(i,*waffen_b,"Waffe")
    {   std::string wn = Database.Waffe_from_Alias[i->getAttr("Bezeichnung")];
        if (wn=="") wn=i->getAttr("Bezeichnung"); 
        list_Waffen_besitz.push_back(new 
	        WaffeBesitz(cH_Waffe(wn,true),
                        i->getAttr("Bezeichnung"),
                        i->getAttr("Region"),
                        i->getIntAttr("AngriffVerteidigung_Bonus"),
                        i->getIntAttr("SchadenLebenspunkte_Bonus"),
                        i->Value()));
    }
#endif
}

