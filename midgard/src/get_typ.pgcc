/*  Midgard Character Generator
 *  Copyright (C) 2001 Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include "midgard_CG.hh"
#include <Aux/SQLerror.h>
exec sql include sqlca;

//void midgard_CG::get_typ_after_load(int nr, int typ_1_2)
void midgard_CG::get_typ_after_load()
{
//cout << nr<<"\t"<<typ_1_2<<"\n";
 exec sql begin declare section ;
  char db_typs[50], db_typl[50], db_typz[5], db_ausdauer[5];
  int  db_stand, db_sb, db_ruestung;
 exec sql end declare section ; 
 int Typ12=1;
 if (Typ2.Short()!="") Typ12=2; //  == Doppelcharakter

 for (int typ_1_2=1;typ_1_2<=Typ12;++typ_1_2)
   {
    if (typ_1_2==1) strncpy(db_typs,Typ.Short().c_str(),sizeof(db_typs));
    else if (typ_1_2==2) strncpy(db_typs,Typ2.Short().c_str(),sizeof(db_typs));
    exec sql select typs, typl, typz, ausdauer, stand, sb ,ruestung
      into :db_typs, :db_typl, :db_typz, :db_ausdauer, :db_stand, :db_sb, :db_ruestung
      from typen where typs = :db_typs;
//  else abort();
  SQLerror::test(__FILELINE__); 

  if (werte.geschlecht=="w")
  exec sql select typlw into :db_typl from typen where typl = :db_typl;
  SQLerror::test(__FILELINE__); 
 
  if (typ_1_2==1)
  {
    Typ.set_Short(db_typs);
    Typ.set_Name(db_typl);
    Typ.set_Zaubern(db_typz);
    Typ.set_Ausdauer(db_ausdauer);
    Typ.set_Stand (db_stand);
    Typ.set_Sb (db_sb);
    Typ.set_Ruestung (db_ruestung);
   }
  else if (typ_1_2==2)
  {
    Typ2.set_Short(db_typs);
    Typ2.set_Name(db_typl);
    Typ2.set_Zaubern(db_typz);
    Typ2.set_Ausdauer(db_ausdauer);
    Typ2.set_Stand (db_stand);
    Typ2.set_Sb (db_sb);
    Typ2.set_Ruestung (db_ruestung);
   }
 else abort();
  }
//cout <<typ.l <<"\t"<<typ_2.l <<"<-\n";
 midgard_CG::get_Ausnahmen();

//cout << typ.l<<"\n";
}

int midgard_CG::get_typ_nr(int typ_1_2)
{
//cout << "get_typ_nr für "<<typ_1_2<<"\n";
 exec sql begin declare section ;
  char db_typs[5];
  int db_typnr;
 exec sql end declare section ; 
 if (typ_1_2==1) strncpy(db_typs,Typ.Short().c_str(),sizeof(db_typs));
 else if (typ_1_2==2) strncpy(db_typs,Typ2.Short().c_str(),sizeof(db_typs));
 else abort();

 exec sql select typnr into :db_typnr from typen where typs = :db_typs;
 SQLerror::test(__FILELINE__,100); 
 if (sqlca.sqlcode) return 0; // Kein Charakter gewählt
 int count=0;
 if (typ_1_2==1)
   {
      for (vector<cH_Data_typen>::const_iterator i=vec_Typen.begin();
           i!=vec_Typen.end();++i)
      { if(db_typnr==(*i)->Nr()) { return count ; }
        ++count;
      }
   }
 if (typ_1_2==2)
   {for (vector<cH_Data_typen>::const_iterator i=vec_Typen_2.begin();
           i!=vec_Typen_2.end();++i)
      { if(db_typnr==(*i)->Nr()) { return count+100 ; } // 2. Charakterklasse ab 100
        ++count;
      }
   }
 return 0; // Kein Charakter = 1. Charakter
}
