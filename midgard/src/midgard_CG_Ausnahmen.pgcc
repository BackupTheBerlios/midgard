/*  Midgard Character Generator
 *  Copyright (C) 2001 Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include "midgard_CG.hh"
#include <Aux/Transaction.h>
#include <Aux/SQLerror.h>
exec sql include sqlca;


bool midgard_CG::Ausnahmen_bool(const string& name)
{
 abort();
}

void midgard_CG::get_Ausnahmen()
{
 vec_ausnahmen.clear();
 exec sql begin declare section;
   char db_name[50], db_art[5], db_standard[5];
   char query[1024];
 exec sql end declare section;
 string squery;
 for (int n=0;n<2;++n) 
  {
    if (n==0)
     { 
       squery = "select name, art, standard from ausnahmen \
         where (spezies = '"+werte.spezies+"' or spezies=null) \
         and (herkunft = '"+werte.herkunft+"' or herkunft = null) \
         and typ = '"+typ.s+"'";
         if (typ_2.s!="") squery += "or typ = '"+typ_2.s+"'";
      }
     else if (n==1)
      { 
       squery = "select name, art, standard from ausnahmen \
         where typ=null \
         and (herkunft = '"+werte.herkunft+"'";
         for(vector<H_Data_beruf>::iterator i=vec_Beruf.begin();i!=vec_Beruf.end();++i)
            squery += " or beruf = '"+(*i)->Name()+"' ";
         squery += " or  stand = '"+werte.stand+"' )";
      }
     else abort();
     strncpy (query,squery.c_str(),sizeof(query));
     Transaction tr;
     exec sql prepare ein_ from :query;
     exec sql declare ein cursor for ein_;
     exec sql open ein;
    SQLerror::test(__FILELINE__);
    while (true)
      {
        exec sql fetch ein into :db_name, :db_art, :db_standard;
        SQLerror::test(__FILELINE__,100);
        if (sqlca.sqlcode) break;
        string art=db_art;
        string standard = db_standard;
        float fac;
        if (art=="z")
         { if (standard == "G" ) fac = 0.5;
           else if (standard == "S" ) fac = 1;
           else if (standard == "A" ) fac = 5;
           else abort();
         }
        else if (art=="f")
         { if (standard == "G" ) fac = 0.5;
           else if (standard == "S" ) fac = 1;
           else if (standard == "A" ) fac = 2;
           else abort();
         }
        else abort();
        vec_ausnahmen.push_back(st_ausnahmen(db_name,db_art,fac,db_standard)); 
      }
    tr.close();
   }   
/*
 for (vector<st_ausnahmen>::const_iterator i=vec_ausnahmen.begin();
         i!=vec_ausnahmen.end();++i)
   cout <<i->name<<"\t" <<i->art<<"\t"<<i->fac<<"\t"<<i->standard<<"\n";
*/
}

float midgard_CG::Ausnahmen_float(const string& name)
{
 for (vector<st_ausnahmen>::const_iterator i=vec_ausnahmen.begin();
         i!=vec_ausnahmen.end();++i)
   if (i->name==name) return i->fac;
 return 0;
}

string midgard_CG::Ausnahmen_string(const string& name, const string& alt,const string& alt2)
{
 for (vector<st_ausnahmen>::const_iterator i=vec_ausnahmen.begin();
         i!=vec_ausnahmen.end();++i)
   if (i->name==name) return i->standard;
  return alt+" "+alt2;
}
