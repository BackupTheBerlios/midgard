/*  Midgard Character Generator
 *  Copyright (C) 2001 Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include "midgard_CG.hh"
#include <Aux/Transaction.h>
#include <Aux/SQLerror.h>
exec sql include sqlca;

void midgard_CG::fill_typauswahl()
{
  typen_vector.clear();
  exec sql begin declare section;
   char db_typ[50];
   char db_region[10];
   char db_spezies[50];
   int db_typnr, db_tanz;
  exec sql end declare section;
  exec sql select count(typnr) into :db_tanz from typen;
  typen_vector.resize(db_tanz);
  Transaction tr;
  if (werte.spezies!="Mensch")
   {
     strncpy(db_spezies,werte.spezies.c_str(),sizeof(db_spezies));
     exec sql declare ein cursor for 
       select t.typl,t.typnr,coalesce(t.region,'') from typen t, spezies_typen st
       where t.typs = st.typen and st.spezies = :db_spezies order by typnr;
     exec sql open ein;
   }
  else
   {   
     exec sql declare einM cursor for 
      select typl,typnr,coalesce(region,'') from typen order by typnr ;
     exec sql open einM;
   }
  SQLerror::test(__FILELINE__);
  Gtk::Menu *_m(manage(new Gtk::Menu()));
  Gtk::MenuItem *_mi;
  unsigned int count=0;
  while (true)
   {
      if (werte.spezies!="Mensch")
         exec sql fetch ein into :db_typ, :db_typnr, :db_region;
      else
         exec sql fetch einM into :db_typ, :db_typnr, :db_region;
      SQLerror::test(__FILELINE__,100);
      if (sqlca.sqlcode) break;   
      if (region_check(db_region))
       {
         typen_vector[db_typnr-1]=db_typ;
         _mi = manage(new Gtk::MenuItem(db_typ));
         _m->append(*_mi);
         _mi->show();
         _mi->set_user_data((gpointer)count);
         ++count;
       }
   }  
  typauswahl->set_menu(*_m);
  typauswahl->get_menu()->deactivate.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::typauswahl_button));
  typauswahl->set_history(get_typ_nr());
}

void midgard_CG::fill_spezies()
{
  spezies_vector.clear();
  exec sql begin declare section;
   char db_spezies[50];
   int db_nr;
  exec sql end declare section;
  Transaction tr;
  exec sql declare ein_r cursor for 
      select nr,spezies from spezies order by nr ;
  exec sql open ein_r;
  SQLerror::test(__FILELINE__);
  Gtk::Menu *_m(manage(new Gtk::Menu()));
  Gtk::MenuItem *_mi;
  while (true)
   {
      exec sql fetch ein_r into :db_nr, :db_spezies;
      SQLerror::test(__FILELINE__,100);
      if (sqlca.sqlcode) break;   
      spezies_vector.push_back(db_spezies);
      _mi = manage(new Gtk::MenuItem(db_spezies));
      _m->append(*_mi);
      _mi->show();
      _mi->set_user_data((gpointer)db_nr);
    }
  optionmenu_spezies->set_menu(*_m);
  optionmenu_spezies->get_menu()->deactivate.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::spezieswahl_button));
}

