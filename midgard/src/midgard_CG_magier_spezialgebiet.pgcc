// $Id: midgard_CG_magier_spezialgebiet.pgcc,v 1.12 2001/05/25 10:22:38 thoma Exp $
/*  Midgard Character Generator
 *  Copyright (C) 2001 Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include "midgard_CG.hh"
#include <Aux/Transaction.h>
#include <Aux/SQLerror.h>
exec sql include sqlca;


void midgard_CG::magier_spezialgebiet(const string& whattodo)
{
 if (whattodo=="show") 
   { spezialgebiet_button_fill();
     option_magier_spezialgebiet->show();
   }
 if (whattodo=="hide") option_magier_spezialgebiet->hide();
}

void midgard_CG::spezialgebiet_button_fill()
{
  vec_spezialgebiet.clear();
  exec sql begin declare section;
   char db_typ[50];
   int db_nr;
   char db_spezial[50],db_spezialgebiet[50],db_spezial2[50];
  exec sql end declare section;
  Transaction tr;
  strncpy(db_typ,typ.s.c_str(),sizeof(db_typ));
  exec sql declare ein cursor for 
     select nr,spezialgebiet,coalesce(spezial,''),coalesce(spezial2,'') 
       from spezialgebiete where typ = :db_typ order by nr;
  exec sql open ein;
  SQLerror::test(__FILELINE__);
  Gtk::Menu *_m(manage(new Gtk::Menu()));
  Gtk::MenuItem *_mi;
  while (true)
   {
      exec sql fetch ein into :db_nr, :db_spezialgebiet, :db_spezial, :db_spezial2;
      SQLerror::test(__FILELINE__,100);
      if (sqlca.sqlcode) break;   
      vec_spezialgebiet.push_back(db_spezialgebiet);
      _mi = manage(new Gtk::MenuItem(db_spezialgebiet));
      _m->append(*_mi);
      _mi->show();
      _mi->set_user_data((gpointer)db_nr);
    }
  option_magier_spezialgebiet->set_menu(*_m);
  option_magier_spezialgebiet->get_menu()->deactivate.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::spezialgebiet_button));;
}

void midgard_CG::spezialgebiet_button()
{
 int i = int(option_magier_spezialgebiet->get_menu()->get_active()->get_user_data());
 if (i==0) return ;
//cout << i<<"\n";
 werte.spezialisierung=vec_spezialgebiet[i];
 get_spezial_from_spezialgebiet();
} 

void midgard_CG::get_spezial_from_spezialgebiet()
{
  exec sql begin declare section;
   char db_typ[50];
   char db_spezial[50],db_spezialgebiet[50],db_spezial2[50];
  exec sql end declare section;
  Transaction tr;
  strncpy(db_typ,typ.s.c_str(),sizeof(db_typ));
  strncpy(db_spezialgebiet,werte.spezialisierung.c_str(),sizeof(db_spezialgebiet));
  exec sql select spezial,coalesce(spezial2,'') 
      into :db_spezial, :db_spezial2
      from spezialgebiete
      where typ = :db_typ and spezialgebiet = :db_spezialgebiet;
  SQLerror::test(__FILELINE__,100);
  if (sqlca.sqlcode) return;
  werte.spezial=db_spezial;
  werte.spezial2=db_spezial2;
//cout << werte.spezialisierung<<"<-\t"<<werte.spezial<<"\t"<<werte.spezial2<<"\n\n\n";
}
