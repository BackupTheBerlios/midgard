/*  Midgard Character Generator
 *  Copyright (C) 2001 Malte Thoma
 *  Copyright (C) 2002 Christof Petig
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#ifndef USE_XML
#include <Aux/Transaction.h>
#include <Aux/SQLerror.h>
exec sql include sqlca;
#endif
#include "KiDo.hh"
#include <cstring>
#include <Gtk_OStream.h>
#include <Aux/itos.h>
#include <gtk--/main.h>

cH_KiDo::cache_t cH_KiDo::cache;

cH_KiDo::cH_KiDo(const std::string& name)
{
 cH_KiDo *cached(cache.lookup(name));
 if (cached) *this=*cached;
 else
#ifndef USE_XML
  {
   *this=cH_KiDo(new KiDo(name));
   cache.Register(name,*this);
  }
#else
  assert(!"KiDo im Cache");
#endif  
}

#ifdef USE_XML
cH_KiDo::cH_KiDo(const Tag *tag)
{*this=cH_KiDo(new KiDo(tag));
 cache.Register(tag->getAttr("Name"),*this);
}
#endif

void KiDo::get_KiDo()
{
#ifndef USE_XML
  exec sql begin declare section;
   char db_name_orig[50],db_name[50],db_stufe[20],db_stil[20],db_effekt[1024];
   int db_fp,db_ap;
  exec sql end declare section;

  strncpy(db_name_orig,(Hoho()).c_str(),sizeof(db_name_orig));
  exec sql select name,stufe,stil,fp,ap,effekt
       into :db_name,:db_stufe,:db_stil,:db_fp,:db_ap,:db_effekt
       from kido where name_orig = :db_name_orig;
  SQLerror::test(__FILELINE__);
  name = db_name;
  stufe = db_stufe;
  stil=db_stil;
  kosten=db_fp;
  ap=db_ap;
  effekt=db_effekt;  
#else
  assert(tag);
  hoho = tag->getAttr("Name"); // "Übersetzung" ?
  stufe = tag->getAttr("Stufe");
  stil=tag->getAttr("Stil");
  kosten=tag->getIntAttr("Lernkosten");
  ap=tag->getIntAttr("AP");
  effekt=tag->Value();  
#endif  
}


int KiDo::get_erfolgswert_kido(const std::list<cH_MidgardBasicElement>& L)
{
 for (std::list<cH_MidgardBasicElement>::const_iterator i= L.begin();i!=L.end();++i)
   if (cH_Fertigkeit(*i)->Name() == "KiDo") return cH_Fertigkeit(*i)->Erfolgswert();
 abort();
}   

std::map<std::string,int> KiDo::maxkidostil(const std::list<cH_MidgardBasicElement>& list_Kido)
{
  std::map<std::string,int> MK;
  for (std::list<cH_MidgardBasicElement>::const_iterator i=list_Kido.begin();i!=list_Kido.end();++i)
     MK[cH_KiDo(*i)->Stufe()]++;
  return MK;
}


KiDo_All::KiDo_All(Gtk::ProgressBar *progressbar)
{
#ifndef USE_XML
 exec sql begin declare section;
   char db_name[100];
   int db_size;
 exec sql end declare section;
 exec sql select count(name_orig) into :db_size from kido;
 exec sql declare KIein cursor for select distinct name_orig from kido;
 Transaction tr;
 exec sql open KIein; 
 SQLerror::test(__FILELINE__);
 double count=0;  
 while(true)
  {
   progressbar->set_percentage(count/db_size);
   while(Gtk::Main::events_pending()) Gtk::Main::iteration() ;
   exec sql fetch KIein into :db_name;
   SQLerror::test(__FILELINE__,100);
   if (sqlca.sqlcode) break;
   list_All.push_back(&*(cH_KiDo(db_name)));
   ++count;
  }
 exec sql close KIein;
 tr.close();
#else
 const Tag *Kido_Fertigkeiten=xml_data->find("Kido-Fertigkeiten");
 if (Kido_Fertigkeiten)
 {  Tag::const_iterator b=Kido_Fertigkeiten->begin(),e=Kido_Fertigkeiten->end();
    double size=(e-b);
    FOR_EACH_CONST_TAG_OF_5(i,*Kido_Fertigkeiten,b,e,"KiDo")
    {  progressbar->set_percentage((i-b)/size);
       while(Gtk::Main::events_pending()) Gtk::Main::iteration() ;
       list_All.push_back(&*(cH_KiDo(&*i)));
    }
 }
#endif 
 progressbar->set_percentage(1);
}  
