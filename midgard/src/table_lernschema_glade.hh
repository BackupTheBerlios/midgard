// generated 2005/4/27 10:13:15 CEST by thoma@Tiger.(none)
// using glademm V2.6.0
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- --image-provider=MagusImage --gtkmmversion 2.4.0 midgard.glade
// for gtk 2.6.2 and gtkmm 2.4.0
//
// Please modify the corresponding derived classes in ./src/table_lernschema.hh and./src/table_lernschema.cc

#ifndef _TABLE_LERNSCHEMA_GLADE_HH
#  define _TABLE_LERNSCHEMA_GLADE_HH


#if !defined(GLADEMM_DATA)
#define GLADEMM_DATA 
#include <gtkmm/accelgroup.h>

class GlademmData
{  
        
        Glib::RefPtr<Gtk::AccelGroup> accgrp;
public:
        
        GlademmData(Glib::RefPtr<Gtk::AccelGroup> ag) : accgrp(ag)
        {  
        }
        
        Glib::RefPtr<Gtk::AccelGroup>  getAccelGroup()
        {  return accgrp;
        }
};
#endif //GLADEMM_DATA

#include <gtkmm/table.h>
#include <gtkmm/tooltips.h>
#include <gtkmm/checkbutton.h>
#include <gtkmm/label.h>
#include <gtkmm/togglebutton.h>
#include <gtkmm/eventbox.h>
#include "MidgardBasicTree.hh"
#include <gtkmm/scrolledwindow.h>
#include <gtkmm/frame.h>
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#include <gtkmm/toolbutton.h>
#else //
#include <gtkmm/button.h>
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#include <gtkmm/toggletoolbutton.h>
#else //
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //
#include <gtkmm/spinbutton.h>
#include <gtkmm/entry.h>
#include <gtkmm/box.h>
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //
#include <gtkmm/handlebox.h>
#include <gtkmm/radiobutton.h>
#include <gtkmm/combo.h>

class table_lernschema_glade : public Gtk::Table
{  
protected:
        
        Gtk::Tooltips _tooltips;
        class Gtk::Table * table_lernschema;
        class Gtk::CheckButton * togglebutton_teure_anzeigen;
        class Gtk::CheckButton * togglebutton_gelernte_anzeigen;
        class Gtk::Label * fertig_typ;
        class Gtk::Label * label_ruestung_lernschema;
        class Gtk::ToggleButton * togglebutton_spezialwaffe;
        class Gtk::Label * label_herkunft_lernschema;
        class Gtk::EventBox * eventbox_zusatz;
        class Gtk::Table * table_lernschema_121;
        class MidgardBasicTree * tree_gelerntes;
        class Gtk::ToggleButton * togglebutton_gelernt_verlernen;
        class Gtk::ScrolledWindow * scrolledwindow_lernen;
        class MidgardBasicTree * Tree_Lernschema_Zusatz;
        class Gtk::CheckButton * checkbutton_einschraenkungen_zusatz;
        class Gtk::Frame * frame_lernschema_zusatz;
        class Gtk::Label * label_lernschma_titel;
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
        class Gtk::ToolButton * button_herkunft;
#else //
        class Gtk::Button * button_herkunft;
#endif //
        class Gtk::Button * button_angeborene_fert;
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
        class Gtk::ToggleToolButton * togglebutton_lernpunkte_edit;
#else //
        class Gtk::ToggleButton * togglebutton_lernpunkte_edit;
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
        class Gtk::ToolButton * button_beruf;
#else //
        class Gtk::Button * button_beruf;
#endif //
        class Gtk::SpinButton * spinbutton_beruf;
        class Gtk::Table * table_berufsprozent;
        class Gtk::Entry * entry_berufsname;
        class Gtk::VBox * vbox_berufsname;
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
        class Gtk::ToolButton * button_lernschema_geld;
#else //
        class Gtk::Button * button_lernschema_geld;
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
        class Gtk::ToolButton * button_lernschema_waffen;
#else //
        class Gtk::Button * button_lernschema_waffen;
#endif //
        class Gtk::Label * label_gwr;
        class Gtk::SpinButton * spinbutton_waffen_lernschema;
        class Gtk::Table * table_waffen_lernschema_eingabe;
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
        class Gtk::ToolButton * button_ruestung;
#else //
        class Gtk::Button * button_ruestung;
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
        class Gtk::ToolButton * button_ausruestung;
#else //
        class Gtk::Button * button_ausruestung;
#endif //
        class Gtk::HandleBox * handlebox_lernschema;
        class Gtk::SpinButton * spinbutton_fach;
        class Gtk::RadioButton * button_fachkenntnisse;
        class Gtk::SpinButton * spinbutton_allgemein;
        class Gtk::RadioButton * button_allgemeinwissen;
        class Gtk::SpinButton * spinbutton_unge;
        class Gtk::RadioButton * button_untyp_fertigkeiten;
        class Gtk::Combo * combo_kido_stil;
        class Gtk::RadioButton * button_kido_auswahl;
        class Gtk::Frame * frame_KiDo_lernschema;
        class Gtk::SpinButton * spinbutton_waffen;
        class Gtk::RadioButton * button_waffen;
        class Gtk::SpinButton * spinbutton_zauber;
        class Gtk::RadioButton * button_zauber;
        class Gtk::Combo * combo_magier_spezialgebiet;
        class Gtk::Frame * frame_lernpunkte;
        
        table_lernschema_glade(GlademmData *gmm_data);
        
        ~table_lernschema_glade();
private:
        virtual void on_togglebutton_teure_anzeigen_toggled() = 0;
        virtual void on_togglebutton_gelernte_anzeigen_toggled() = 0;
        virtual void on_togglebutton_spezialwaffe_toggled() = 0;
        virtual bool on_eventbox_zusatz_leave_notify_event(GdkEventCrossing *ev) = 0;
        virtual void on_tree_gelerntes_leaf_selected(cH_RowDataBase leaf) = 0;
        virtual void on_togglebutton_einschraenkungen_zusatz_anzeigen_toggled() = 0;
        virtual void on_herkunftsland_clicked() = 0;
        virtual void on_button_angeborene_fertigkeit() = 0;
        virtual void on_togglebutton_lernpunkte_edit_toggled() = 0;
        virtual void on_button_beruf() = 0;
        virtual void on_spinbutton_beruf_activate() = 0;
        virtual bool on_spinbutton_beruf_focus_in(GdkEventFocus *ev) = 0;
        virtual void on_entry_berufsname_activate() = 0;
        virtual void on_button_lernschema_geld() = 0;
        virtual void on_button_lernschema_waffen() = 0;
        virtual void on_spinbutton_waffen_lernschema_activate() = 0;
        virtual bool on_spinbutton_waffen_lernschema_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_button_ruestung() = 0;
        virtual void on_button_ausruestung() = 0;
        virtual void on_button_waffe_trans_clicked() = 0;
        virtual void on_button_fach_trans_clicked() = 0;
        virtual void on_spinbutton_fach_activate() = 0;
        virtual bool on_spinbutton_fach_focus_out_event(GdkEventFocus *ev) = 0;
        virtual bool on_spinbutton_fach_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_lernliste_wahl_toggled() = 0;
        virtual void on_spinbutton_allgemein_activate() = 0;
        virtual bool on_spinbutton_allgemein_focus_out_event(GdkEventFocus *ev) = 0;
        virtual bool on_spinbutton_allgemein_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_spinbutton_unge_activate() = 0;
        virtual bool on_spinbutton_unge_focus_out_event(GdkEventFocus *ev) = 0;
        virtual bool on_spinbutton_unge_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_combo_kido_stil_activate() = 0;
        virtual bool on_combo_kido_stil_focus_out_event(GdkEventFocus *ev) = 0;
        virtual void on_combo_kido_stil_changed() = 0;
        virtual void on_kido_wahl_clicked() = 0;
        virtual void on_spinbutton_waffen_activate() = 0;
        virtual bool on_spinbutton_waffen_focus_out_event(GdkEventFocus *ev) = 0;
        virtual bool on_spinbutton_waffen_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_button_waffen_clicked() = 0;
        virtual void on_spinbutton_zaubern_activate() = 0;
        virtual bool on_spinbutton_zaubern_focus_out_event(GdkEventFocus *ev) = 0;
        virtual bool on_spinbutton_zaubern_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_combo_magier_spezialgebiet_activate() = 0;
        virtual bool on_combo_magier_spezialgebiet_focus_out_event(GdkEventFocus *ev) = 0;
        virtual void on_combo_magier_changed() = 0;
};
#endif
