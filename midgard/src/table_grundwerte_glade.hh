// generated 2005/4/27 9:24:01 CEST by christof@vesta.petig-baender.de
// using glademm V2.6.0
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- --image-provider=MagusImage --gtkmmversion 2.4.0 midgard.glade
// for gtk 2.6.4 and gtkmm 2.4.0
//
// Please modify the corresponding derived classes in ./src/table_grundwerte.hh and./src/table_grundwerte.cc

#ifndef _TABLE_GRUNDWERTE_GLADE_HH
#  define _TABLE_GRUNDWERTE_GLADE_HH


#if !defined(GLADEMM_DATA)
#define GLADEMM_DATA 
#include <gtkmm/accelgroup.h>

class GlademmData
{  
        
        Glib::RefPtr<Gtk::AccelGroup> accgrp;
public:
        
        GlademmData(Glib::RefPtr<Gtk::AccelGroup> ag) : accgrp(ag)
        {  
        }
        
        Glib::RefPtr<Gtk::AccelGroup>  getAccelGroup()
        {  return accgrp;
        }
};
#endif //GLADEMM_DATA

#include <gtkmm/table.h>
#include <gtkmm/tooltips.h>
#include <gtkmm/entry.h>
#include <gtkmm/spinbutton.h>
#include <gtkmm/combo.h>
#include <gtkmm/label.h>
#include <gtkmm/button.h>
#include <gtkmm/frame.h>
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //
#include "ChoiceButton.hh"
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#include <gtkmm/toolbutton.h>
#else //
#endif //
#include <gtkmm/box.h>
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //

class table_grundwerte_glade : public Gtk::Table
{  
protected:
        
        Gtk::Tooltips _tooltips;
        class Gtk::Table * table_grundwerte;
        class Gtk::Entry * entry_nameC;
        class Gtk::SpinButton * spinbutton_ap;
        class Gtk::SpinButton * spinbutton_lp;
        class Gtk::SpinButton * spinbutton_grad;
        class Gtk::SpinButton * spinbutton_alter;
        class Gtk::SpinButton * spinbutton_Cgewicht;
        class Gtk::SpinButton * spinbutton_groesse;
        class Gtk::Entry * entry_nameS;
        class Gtk::Entry * entry_version;
        class Gtk::Entry * entry_herkunft;
        class Gtk::Combo * combo_stand;
        class Gtk::Entry * entry_glaube;
        class Gtk::Entry * entry_spezialisierung;
        class Gtk::SpinButton * spinbutton_tage;
        class Gtk::SpinButton * spinbutton_gg;
        class Gtk::SpinButton * spinbutton_sg;
        class Gtk::SpinButton * spinbutton_gfp;
        class Gtk::Combo * combo_hand;
        class Gtk::Entry * entry_bezeichnung;
        class Gtk::Entry * entry_merkmale;
        class Gtk::Label * resistenz;
        class Gtk::Label * gift_wert;
        class Gtk::Label * abwehr_wert;
        class Gtk::Label * zaubern_wert;
        class Gtk::Button * button_grda1setzen;
        class Gtk::Label * bo_sc;
        class Gtk::Label * bo_an;
        class Gtk::Label * bo_ab;
        class Gtk::Label * bo_za;
        class Gtk::Label * bo_au;
        class Gtk::Label * bo_psy;
        class Gtk::Label * bo_phs;
        class Gtk::Label * bo_phk;
        class Gtk::Label * label_gestalt;
        class Gtk::Label * kaw;
        class Gtk::Label * wlw;
        class Gtk::SpinButton * spinbutton_b;
        class Gtk::SpinButton * spinbutton_au;
        class Gtk::SpinButton * spinbutton_pa;
        class Gtk::SpinButton * spinbutton_sb;
        class Gtk::SpinButton * spinbutton_wk;
        class Gtk::SpinButton * spinbutton_st;
        class Gtk::SpinButton * spinbutton_gs;
        class Gtk::SpinButton * spinbutton_gw;
        class Gtk::SpinButton * spinbutton_ko;
        class Gtk::SpinButton * spinbutton_in;
        class Gtk::SpinButton * spinbutton_zt;
        class Gtk::Label * label_hoeren;
        class Gtk::Label * label_schmecken;
        class Gtk::Label * label_tasten;
        class Gtk::Label * label_sehen;
        class Gtk::Label * label_riechen;
        class Gtk::Label * label_sechster_sinn;
        class Gtk::Frame * frame_wuerfelvariante;
        class Gtk::Combo * combo_spezies;
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //
        class ChoiceButton * button_grundwerte;
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //
        class ChoiceButton * button_geschlecht;
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //
        class Gtk::Combo * combo_typ;
        class Gtk::Combo * combo_typ2;
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //
        class ChoiceButton * button_stadt_land;
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
        class Gtk::ToolButton * button_abg_werte;
#else //
        class Gtk::Button * button_abg_werte;
#endif //
        class Gtk::HBox * eventbox_werte_edit;
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //
        class Gtk::Label * label_last_edited;
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //
        
        table_grundwerte_glade(GlademmData *gmm_data);
        
        ~table_grundwerte_glade();
private:
        virtual void on_entry_nameC_activate() = 0;
        virtual bool on_entry_nameC_focus_out_event(GdkEventFocus *ev) = 0;
        virtual bool on_entry_nameC_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_spinbutton_ap_activate() = 0;
        virtual bool on_spinbutton_ap_focus_out_event(GdkEventFocus *ev) = 0;
        virtual bool on_spinbutton_ap_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_spinbutton_lp_activate() = 0;
        virtual bool on_spinbutton_lp_focus_out_event(GdkEventFocus *ev) = 0;
        virtual bool on_spinbutton_lp_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_spinbutton_grad_activate() = 0;
        virtual bool on_spinbutton_grad_focus_out_event(GdkEventFocus *ev) = 0;
        virtual bool on_spinbutton_grad_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_spinbutton_alter_activate() = 0;
        virtual bool on_spinbutton_alter_focus_out_event(GdkEventFocus *ev) = 0;
        virtual bool on_spinbutton_alter_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_spinbutton_Cgewicht_activate() = 0;
        virtual bool on_spinbutton_Cgewicht_focus_out_event(GdkEventFocus *ev) = 0;
        virtual bool on_spinbutton_Cgewicht_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_spinbutton_groesse_activate() = 0;
        virtual bool on_spinbutton_groesse_focus_out_event(GdkEventFocus *ev) = 0;
        virtual bool on_spinbutton_groesse_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_entry_nameS_activate() = 0;
        virtual bool on_entry_nameS_focus_out_event(GdkEventFocus *ev) = 0;
        virtual bool on_entry_nameS_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_entry_version_activate() = 0;
        virtual bool on_entry_version_focus_out_event(GdkEventFocus *ev) = 0;
        virtual bool on_entry_version_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_entry_herkunft_activate() = 0;
        virtual bool on_entry_herkunft_focus_out_event(GdkEventFocus *ev) = 0;
        virtual bool on_entry_herkunft_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_combo_stand_activate() = 0;
        virtual bool on_combo_stand_focus_out_event(GdkEventFocus *ev) = 0;
        virtual void on_entry_glaube_activate() = 0;
        virtual bool on_entry_glaube_focus_out_event(GdkEventFocus *ev) = 0;
        virtual bool on_entry_glaube_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_entry_spezialisierung_activate() = 0;
        virtual bool on_entry_spezialisierung_focus_out_event(GdkEventFocus *ev) = 0;
        virtual bool on_entry_spezialisierung_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_spinbutton_tage_activate() = 0;
        virtual bool on_spinbutton_tage_focus_out_event(GdkEventFocus *ev) = 0;
        virtual bool on_spinbutton_tage_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_spinbutton_gg_activate() = 0;
        virtual bool on_spinbutton_gg_focus_out_event(GdkEventFocus *ev) = 0;
        virtual bool on_spinbutton_gg_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_spinbutton_sg_activate() = 0;
        virtual bool on_spinbutton_sg_focus_out_event(GdkEventFocus *ev) = 0;
        virtual bool on_spinbutton_sg_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_spinbutton_gfp_activate() = 0;
        virtual bool on_spinbutton_gfp_focus_out_event(GdkEventFocus *ev) = 0;
        virtual bool on_spinbutton_gfp_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_combo_hand_activate() = 0;
        virtual bool on_combo_hand_focus_out_event(GdkEventFocus *ev) = 0;
        virtual void on_entry_bezeichnung_activate() = 0;
        virtual bool on_entry_bezeichnung_focus_out_event(GdkEventFocus *ev) = 0;
        virtual bool on_entry_bezeichnung_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_entry_merkmale_activate() = 0;
        virtual bool on_entry_merkmale_focus_out_event(GdkEventFocus *ev) = 0;
        virtual bool on_entry_merkmale_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_button_grda1setzen_clicked() = 0;
        virtual void on_spinbutton_b_activate() = 0;
        virtual bool on_spinbutton_b_focus_out_event(GdkEventFocus *ev) = 0;
        virtual bool on_spinbutton_b_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_spinbutton_au_activate() = 0;
        virtual bool on_spinbutton_au_focus_out_event(GdkEventFocus *ev) = 0;
        virtual bool on_spinbutton_au_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_spinbutton_pa_activate() = 0;
        virtual bool on_spinbutton_pa_focus_out_event(GdkEventFocus *ev) = 0;
        virtual bool on_spinbutton_pa_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_spinbutton_sb_activate() = 0;
        virtual bool on_spinbutton_sb_focus_out_event(GdkEventFocus *ev) = 0;
        virtual bool on_spinbutton_sb_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_spinbutton_wk_activate() = 0;
        virtual bool on_spinbutton_wk_focus_out_event(GdkEventFocus *ev) = 0;
        virtual bool on_spinbutton_wk_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_spinbutton_st_activate() = 0;
        virtual bool on_spinbutton_st_focus_out_event(GdkEventFocus *ev) = 0;
        virtual bool on_spinbutton_st_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_spinbutton_gs_activate() = 0;
        virtual bool on_spinbutton_gs_focus_out_event(GdkEventFocus *ev) = 0;
        virtual bool on_spinbutton_gs_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_spinbutton_gw_activate() = 0;
        virtual bool on_spinbutton_gw_focus_out_event(GdkEventFocus *ev) = 0;
        virtual bool on_spinbutton_gw_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_spinbutton_ko_activate() = 0;
        virtual bool on_spinbutton_ko_focus_out_event(GdkEventFocus *ev) = 0;
        virtual bool on_spinbutton_ko_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_spinbutton_in_activate() = 0;
        virtual bool on_spinbutton_in_focus_out_event(GdkEventFocus *ev) = 0;
        virtual bool on_spinbutton_in_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_spinbutton_zt_activate() = 0;
        virtual bool on_spinbutton_zt_focus_out_event(GdkEventFocus *ev) = 0;
        virtual bool on_spinbutton_zt_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_combo_spezies_activate() = 0;
        virtual bool on_combo_spezies_focus_out_event(GdkEventFocus *ev) = 0;
        virtual void on_combo_spezies_changed() = 0;
        virtual void on_combo_typ_activate() = 0;
        virtual bool on_combo_typ__focus_out_event(GdkEventFocus *ev) = 0;
        virtual void on_combo_typ__changed() = 0;
        virtual void on_combo_typ2_activate() = 0;
        virtual bool on_combo_typ2_focus_out_event(GdkEventFocus *ev) = 0;
        virtual void on_combo_typ2__changed() = 0;
        virtual void on_abge_werte_setzen_clicked() = 0;
};
#endif
