/*  Midgard Character Generator
 *  Copyright (C) 2001 Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include <Aux/Transaction.h>
#include <Aux/SQLerror.h>
exec sql include sqlca;
#include <Ausnahmen.hh>
#include <midgard_CG.hh>


Ausnahmen(Gtk::ProgressBar *progressbar)
{
 exec sql begin declare section;
   char db_name[50], db_art[5], db_standard[5];
   char db_spezies[50], db_herkunft[50], db_typ[50], db_stand[50], db_beruf[50];
   char query[1024];
 exec sql end declare section;
 std::string squery = "select name,art,standard,
      coalesce(spezies,''),coalesce(herkunft,''),coalesce(typ,''),
      coalesce(beruf,''), coalesce(stand,'') from ausnahmen";
 strncpy (query,squery.c_str(),sizeof(query));
 Transaction tr;
 exec sql prepare ein_aus_ from :query;
 exec sql declare ein_aus cursor for ein_aus;
 exec sql open ein_aus;
 SQLerror::test(__FILELINE__);
 double count=0;
 while (true)
   {
     progressbar->set_percentage(count/db_size);
     while(Gtk::Main::events_pending()) Gtk::Main::iteration() ;
     exec sql fetch ein_aus into :db_name, :db_art, :db_standard,
       :db_spezies, :db_herkunft, :db_typ, :db_beruf, :db_stand;
     SQLerror::test(__FILELINE__,100);
     if (sqlca.sqlcode) break;
     st_index index(db_typ,db_herkunft,db_spezies,db_beruf,db_stand);
     Data_Ausnahmen DA(db_name,db_art,db_standard);
   }
 exec sql close ein_aus;
 tr.close();
 progressbar->set_percentage(1);
}

float Ausnahmen::Ausnahmen_float(const Grundwerte& Werte,const vector<H_Data_typen>& Typ,
      const std::vector<H_Data_beruf>& vec_Beruf,const std::string& name) const
{
  assert(Typ.size()==2);
  for(std::map<st_index1,Data_Ausnahmen>::const_iterator i=map_ausnahmen.begin();i!=map_ausnahmen.end();++i)
   {
     if (i->second.Name()!=name) continue;
     if (i->first.typ == Typ[0] || (Typ[1]!= "" && i->first.typ == Typ[1])
      {
        if ( (i->first.spezies  !="" && i->first.spezies  == Werte.Spezies() ) || 
             (i->first.herkunft !="" && i->first.herkunft == Werte.Herkunft() )) 
          return i->second.Fac();
      }
     if (i->first.stand != "" && i->first.stand==Werte.Stand() )
          return i->second.Fac();
     if (i->first.herkunft != "" && i->first.Herkunft==Werte.Herkunft() )
          return i->second.Fac();
     for(std::vector<H_Data_beruf>::const_iterator j=vec_Beruf.begin();j!=vec_Beruf.end();++j)
      if(i->first.beruf==j->Name())  return i->second.Fac() ;
   }
 return 0;
}

void Ausnahmen::Ausnahmen_string(const Grundwerte& Werte,const vector<H_Data_typen>& Typ,
      const std::vector<H_Data_beruf>& vec_Beruf,const std::string& name, 
                vector<std::string>& standard) const
{
  assert(Typ.size()==2);
  assert(standard.size()==2);
  for(std::map<st_index1,Data_Ausnahmen>::const_iterator i=map_ausnahmen.begin();i!=map_ausnahmen.end();++i)
   {
     if (i->second.Name()!=name) continue;
     if (i->first.typ == Typ[0] || (Typ[1]!= "" && i->first.typ == Typ[1])
      {
        if ( (i->first.spezies  !="" && i->first.spezies  == Werte.Spezies() ) || 
             (i->first.herkunft !="" && i->first.herkunft == Werte.Herkunft() )) 
          return i->second.Standard(standard);
      }
     if (i->first.stand != "" && i->first.stand==Werte.Stand() )
          return i->second.Standard(standard);
     if (i->first.herkunft != "" && i->first.Herkunft==Werte.Herkunft() )
          return i->second.Standard(standard);
     for(std::vector<H_Data_beruf>::const_iterator j=vec_Beruf.begin();j!=vec_Beruf.end();++j)
      if(i->first.beruf==j->Name())  return i->second.Standard(standard);
   }
}

double Data_Ausnahmen::Fac() const
{
  double fac;
  if (Standard() == "G" )                       fac = 0.5;
  else if (Standard() == "S" )                  fac = 1.0;
  else if (Standard() == "A" && Art()=="f" )    fac = 2.0;
  else if (Standard() == "A" && Art()=="z" )    fac = 5.0;
  else abort();
  return fac;
}

