/*  Midgard Character Generator
 *  Copyright (C) 2001 Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

// generated 2001/2/11 14:16:06 CET by thoma@ig23.
// using glademm V0.5_11c
//
// newer (non customized) versions of this file go to Zauber_auswahl.cc_new

// This file is for your program, I won't touch it again!

#include <Aux/Transaction.h>
#include <Aux/SQLerror.h>
exec sql include sqlca;
#include "Sprache.hh"
#include <cstring>
#include <Gtk_OStream.h>
#include "itos.h"
#include <gtk--/main.h>

cH_Sprache::cache_t cH_Sprache::cache;

cH_Sprache::cH_Sprache(const std::string& name)
{
 cH_Sprache *cached(cache.lookup(name));
 if (cached) *this=*cached;
 else
  {
   *this=cH_Sprache(new Sprache(name));
   cache.Register(name,*this);
  }
}

void Sprache::get_Sprache()
{
  exec sql begin declare section;
   char db_name[50],db_schrift[50],db_region[50];
   int db_fp,db_maxwert;
   bool db_alt,db_minderheit;
   int db_g1,db_g2;
  exec sql end declare section;

  strncpy(db_name,Name().c_str(),sizeof(db_name));
  exec sql select distinct fp,max_wert,schrift,alt,coalesce(minderheit,f),
       coalesce(region,''),coalesce(gruppe_1,0),coalesce(gruppe_2,0)
       into :db_fp,:db_maxwert,:db_schrift,:db_alt,:db_minderheit,
         :db_region,:db_g1,:db_g2
       from sprachen where name = :db_name;
  SQLerror::test(__FILELINE__);
  urschrift=db_schrift;
  region=db_region;
  alte_sprache=db_alt;
  minderheit=db_minderheit;
  maxwert=db_maxwert;
  kosten=db_fp;
  if(db_g1) V_sprachgruppe.push_back(db_g1);
  if(db_g2) V_sprachgruppe.push_back(db_g2);
}

int Sprache::Kosten(const vector<cH_Typen>& Typ,const Ausnahmen& ausnahmen) const
{ 
  cH_Fertigkeit F("Sprache");
  return  (int)(F->Standard_Faktor(Typ,ausnahmen) * kosten) ; 
}

std::string Sprache::Urschrift(const  std::list<cH_MidgardBasicElement>& list_Schrift) const 
{
 bool back=false;
 std::string s,t="(";
 for(std::list<cH_MidgardBasicElement>::const_iterator i=list_Schrift.begin();i!=list_Schrift.end();++i)
  {
    if((*i)->Name() == Urschrift())  return Urschrift();
    std::string::size_type i1=(*i)->Name().find_last_of("(");
    
    if (i1!=std::string::npos)
     {
       s=(*i)->Name().substr(0,i1);
       std::string nr = (*i)->Name().substr(i1+1,1);    
       t+=nr+",";
     }
    if(s==Urschrift()) back=true;
  }
 if (back) t=t.substr(0,t.size()-1); // letzes Komma entfernen
 if (back) return Urschrift()+" "+t+")";
 return "";
}

bool Sprache::Sprachgruppe(const list<cH_MidgardBasicElement>& listSprache) const
{
  for(list<cH_MidgardBasicElement>::const_iterator i=listSprache.begin();i!=listSprache.end();++i)
   {
     vector<int> V= cH_Sprache(*i)->getVSprachgruppe();
     for(vector<int>::const_iterator j=V.begin();j!=V.end();++j)
       for(vector<int>::const_iterator k=V_sprachgruppe.begin();k!=V_sprachgruppe.end();++k)
         if(*j==*k) return true;
   }
  return false;
}


Sprachen_All::Sprachen_All(Gtk::ProgressBar *progressbar)
{
 exec sql begin declare section;
   char db_name[100];
   int db_size;
 exec sql end declare section;
 exec sql select count(name) into :db_size from sprachen;
 exec sql declare SIein cursor for select distinct name from sprachen;
 Transaction tr;
 exec sql open SIein; 
 SQLerror::test(__FILELINE__);
 double count=0;  
 while(true)
  {
   progressbar->set_percentage(count/db_size);
   while(Gtk::Main::events_pending()) Gtk::Main::iteration() ;
   exec sql fetch SIein into :db_name;
   SQLerror::test(__FILELINE__,100);
   if (sqlca.sqlcode) break;
   list_All.push_back(&*(cH_Sprache(db_name)));
   ++count;
  }
 exec sql close SIein;
 tr.close();
 progressbar->set_percentage(1);
}  
