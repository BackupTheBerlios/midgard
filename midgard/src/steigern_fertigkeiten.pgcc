/*  Midgard Character Generator
 *  Copyright (C) 2001 Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include "midgard_CG.hh"
#include <Aux/Transaction.h>
#include <Aux/SQLerror.h>
exec sql include sqlca;
#include <cstring>
#include <Gtk_OStream.h>
#include <algorithm>



void midgard_CG::on_fertigkeiten_laden_clicked()
{
  midgard_CG::on_speichern_clicked();
  midgard_CG::show_alte_fertigkeiten();
  midgard_CG::show_neue_fertigkeiten();
   
}

void midgard_CG::show_alte_fertigkeiten()
{
   steigern_fert_clist_alt->clear();
   Gtk::OStream os(steigern_fert_clist_alt);
   for ( vector<st_ausgewaehlte_fertigkeiten>::iterator i=vec_fertigkeiten.begin();i!=vec_fertigkeiten.end();++i)
      {
        string skosten_steigern="", skosten_reduzieren="", sfp="";
        string serfolgswert=itos(i->erfolgswert);
        exec sql begin declare section;
          int db_kosten_steigern=0, db_kosten_reduzieren=0, db_fp;
          char query[1024];
          char db_standard[5];
        exec sql end declare section;
        string squery;
        if (i->erfolgswert != 0) // Fertigkeiten MIT Erfolgswert
           squery = "SELECT coalesce(p"+itos(abs(i->erfolgswert))
               +",0),coalesce(p"+itos(abs(i->erfolgswert+1))+",0),fp,f."+typ.s
               +" FROM steigern_fertigkeiten s, steigern_fertigkeiten_werte w,"
               +"fertigkeiten f WHERE s.name = '"+i->name+"' AND w.name = s.wie " 
               +"AND f.fertigkeit = '"+i->name+"'";
        else // Fertigkeiten OHNE Erfolgswert
           squery = "SELECT fp,f."+typ.s
               +" FROM steigern_fertigkeiten s, fertigkeiten f "
               +" WHERE s.name = '"+i->name+"' " 
               +"AND f.fertigkeit = '"+i->name+"'";
        strncpy(query,squery.c_str(),sizeof(query));

        Transaction tr;
        exec sql prepare kosten_ein_ from :query ;  
        exec sql declare kosten_ein cursor for kosten_ein_ ;  
        exec sql open kosten_ein;
        if (i->erfolgswert != 0) // Fertigkeiten MIT Erfolgswert
            exec sql fetch kosten_ein into :db_kosten_reduzieren, 
                 :db_kosten_steigern, :db_fp, :db_standard;
        else // Fertigkeiten OHNE Erfolgswert
            exec sql fetch kosten_ein into :db_fp, :db_standard;
        SQLerror::test(__FILELINE__);
        exec sql close kosten_ein;
        tr.close();

        double fac = midgard_CG::get_standard_fertigkeit_(db_standard);
        sfp = itos(db_fp * fac);
        skosten_steigern = itos(db_kosten_steigern*fac);
        skosten_reduzieren = itos(db_kosten_reduzieren*fac);
        if (i->erfolgswert == 0) serfolgswert = "" ;
        if ( skosten_steigern == "0" ) skosten_steigern="";
        if ( skosten_reduzieren == "0" ) skosten_reduzieren="";
        if (skosten_reduzieren!="" || 
            (skosten_steigern == "0" && skosten_reduzieren == "0")) sfp ="" ;
         os << i->name<<"\t"<<serfolgswert<<"\t"
            <<skosten_steigern<<"\t"<<skosten_reduzieren<<"\t"<<sfp<<"\n";
      }
 for (unsigned int i=0;i<steigern_fert_clist_alt->columns().size();++i)
   steigern_fert_clist_alt->set_column_auto_resize(i,true);
 steigern_fert_clist_alt->set_reorderable(true);
}

void midgard_CG::show_neue_fertigkeiten()
{
  steigern_fert_clist_neu->clear();
  exec sql begin declare section;
   char db_typ[5];
   char db_fertigkeiten[100];
   int db_erfolgswert; 
   char db_art[100];
   int idb_erfolgswert;
   int db_fp;
   char query[1024];
   char db_voraussetzung[100];
   char db_region[10];
   char db_standard[5];
  exec sql end declare section;
  strncpy(db_typ,typ.s.c_str(),sizeof(db_typ));
  snprintf(query,sizeof(query),"SELECT f.fertigkeit, f.fp, f.anfangswert, \
f.%s, coalesce(v.fertigkeit,''), coalesce(f.region,''), f.%s \
FROM fertigkeiten f, fertigkeiten_voraussetzung v WHERE \
v.name = f.fertigkeit \
AND (f.%s = 'G' OR f.%s = 'S' OR f.%s = 'A') \
AND f.fertigkeit NOT IN (SELECT fertigkeit FROM charaktere_fertigkeiten \
WHERE charakter_name = '%s' AND version = '%s') \
AND f.fertigkeit != 'Sprache' AND f.fertigkeit != 'Lesen/Schreiben' \
ORDER BY f.fertigkeit",  db_typ, db_typ, db_typ, db_typ, db_typ, 
   werte.name_charakter.c_str(), werte.version.c_str());

 Transaction tr;  
 exec sql prepare fert_ein_ from :query ;  
 exec sql declare fert_ein cursor for fert_ein_ ;  
 exec sql open fert_ein;
 SQLerror::test(__FILELINE__);
 Gtk::OStream os(steigern_fert_clist_neu);
 while (true)
   {
      exec sql fetch fert_ein into :db_fertigkeiten, :db_fp, 
         :db_erfolgswert:idb_erfolgswert, :db_art, :db_voraussetzung, 
         :db_region, :db_standard;
      SQLerror::test(__FILELINE__,100);  
      if (sqlca.sqlcode) break;
      string serfolgswert=itos(db_erfolgswert);
      if (serfolgswert=="0") serfolgswert="";
      double fac = midgard_CG::get_standard_fertigkeit_(db_standard);
      if (midgard_CG::Fertigkeiten_Voraussetzung(db_fertigkeiten) 
        &&midgard_CG::region_check(db_region))
       {
         os << db_fertigkeiten<<"\t"<<serfolgswert<<"\t"<<db_fp*fac
            <<"\t"<<db_art<<"\t"<<db_voraussetzung<<"\n";
       }
   }
 exec sql close fert_ein;
 for (unsigned int i=0;i<steigern_fert_clist_neu->columns().size();++i)
   steigern_fert_clist_neu->set_column_auto_resize(i,true);
 steigern_fert_clist_neu->set_reorderable(true);
 tr.commit();
}

bool midgard_CG::kido_steigern_check(int wert)
{
  if (werte.grad+10 > wert) return false;
  else
   { string strinfo ="KiDo darf nur auf maximal Grad+10 gesteigert werden.\n";
     manage (new WindowInfo(strinfo));
     return true;
   }
}


void midgard_CG::on_steigern_fert_clist_alt_select_row(gint row, gint column, GdkEvent *event)
{
 string fertigkeit=steigern_fert_clist_alt->get_text(row,0);
 int wert = atoi(steigern_fert_clist_alt->get_text(row,1).c_str());
 if (fertigkeit=="KiDo" && kido_steigern_check(wert)) return;
   if (radio_fert_steigern->get_active())
    {
      int kosten_steigern=atoi(steigern_fert_clist_alt->get_text(row,2).c_str());
      // Steigern mit lernen
      if (!togglebutton_praxispunkte_fertigkeiten->get_active()) 
         {
            werte.gfp += kosten_steigern;
            if (kosten_steigern != 0)
            for (vector<st_ausgewaehlte_fertigkeiten>::iterator i=vec_fertigkeiten.begin();
                     i!= vec_fertigkeiten.end();++i )
               if ( i->name == fertigkeit) i->erfolgswert++; 
         }
      else  // Lernen mit Praxispunkten 
         {
            bool wuerfeln;
            if (radiobutton_praxis_wuerfeln_fertigkeiten->get_active()) wuerfeln = true;
            if (radiobutton_praxis_auto_fertigkeiten->get_active()) wuerfeln = false;
            int alter_wert = atoi(steigern_fert_clist_alt->get_text(row,1).c_str());
            int gelungen = midgard_CG::praxispunkte_wuerfeln(fertigkeit,alter_wert,"Fertigkeit",wuerfeln);
            if (gelungen)
               {
                  werte.gfp += kosten_steigern/2;
                  for (vector<st_ausgewaehlte_fertigkeiten>::iterator i=vec_fertigkeiten.begin();
                        i!= vec_fertigkeiten.end();++i )
                     if ( i->name == fertigkeit) i->erfolgswert++; 
               }
         }     
    }
   if (radio_fert_reduzieren->get_active())
         {
            int kosten_reduzieren=atoi(steigern_fert_clist_alt->get_text(row,3).c_str());
            werte.gfp -= kosten_reduzieren;
            if (kosten_reduzieren != 0)
            for (vector<st_ausgewaehlte_fertigkeiten>::iterator i=vec_fertigkeiten.begin();
                     i!= vec_fertigkeiten.end();++i )
               if ( i->name == fertigkeit) i->erfolgswert--; 
         }
   if (radio_fert_verlernen->get_active())
         {
            int kosten_verlernen=atoi(steigern_fert_clist_alt->get_text(row,4).c_str());
            werte.gfp -= kosten_verlernen;
            if (kosten_verlernen != 0)
            for (vector<st_ausgewaehlte_fertigkeiten>::iterator i=vec_fertigkeiten.begin();
                     i!= vec_fertigkeiten.end();++i )
               if ( i->name == fertigkeit) {vec_fertigkeiten.erase(i);break;}; 
         }
   midgard_CG::zeige_werte(werte,"alle");
   midgard_CG::on_speichern_clicked();
   midgard_CG::show_alte_fertigkeiten();
   midgard_CG::show_neue_fertigkeiten();
   
   steigern_fert_clist_alt->unselect_row(row);
}




void midgard_CG::on_steigern_fert_clist_neu_select_row(gint row, gint column, GdkEvent *event)
{
  int new_kosten = atoi(steigern_fert_clist_neu->get_text(row,2).c_str());
  werte.gfp += new_kosten;
  midgard_CG::zeige_werte(werte,"alle");

  string new_fert = steigern_fert_clist_neu->get_text(row,0);
  int erf = atoi(steigern_fert_clist_neu->get_text(row,1).c_str());
  vec_fertigkeiten.push_back(st_ausgewaehlte_fertigkeiten(new_fert,erf,"0"));

  if (new_fert=="KiDo") {kido_bool=true;show_gtk(get_typ_nr());}
  if (new_fert=="Wissen von der Magie") {magie_bool=true;show_gtk(get_typ_nr());}

  midgard_CG::show_fertigkeiten();
  midgard_CG::on_speichern_clicked();
  midgard_CG::show_alte_fertigkeiten();
  midgard_CG::show_neue_fertigkeiten();

}

void midgard_CG::on_radio_fert_steigern_toggled()
{
}

void midgard_CG::on_radio_fert_reduzieren_toggled()
{
   if (radio_fert_reduzieren->get_active())
      togglebutton_praxispunkte_fertigkeiten->set_active(false);
}

void midgard_CG::on_radio_fert_verlernen_toggled()
{
   if (radio_fert_verlernen->get_active())
      togglebutton_praxispunkte_fertigkeiten->set_active(false);
}



void midgard_CG::on_togglebutton_praxispunkte_fertigkeiten_toggled()
{
    if (togglebutton_praxispunkte_fertigkeiten->get_active())
      radio_fert_steigern->set_active(true);

}

void midgard_CG::on_radiobutton_praxis_wuerfeln_fertigkeiten_toggled()
{
}

void midgard_CG::on_radiobutton_praxis_auto_fertigkeiten_toggled()
{
}

bool midgard_CG::Fertigkeiten_Voraussetzung(const string& fertigkeit)
{
  exec sql begin declare section;
   int db_st,db_ge,db_ko,db_in,db_zt,db_pa,db_au,db_sb,db_rw;
   char db_fertigkeit[30], db_fert[30];
  exec sql end declare section;
  strncpy(db_fertigkeit,fertigkeit.c_str(),sizeof(db_fertigkeit));

  exec sql select distinct coalesce(st,'0'), coalesce(ge,'0'),
   coalesce(ko,'0'),  coalesce("in",'0'), coalesce(zt,'0'),
   coalesce(au,'0'), coalesce(pa,'0'), 
   coalesce(sb,'0'), coalesce(rw,'0'), coalesce(fertigkeit,'')
   into :db_st,:db_ge,:db_ko,:db_in,:db_zt,:db_au,:db_pa,
         :db_sb,:db_rw,:db_fert
   from fertigkeiten_voraussetzung where name= :db_fertigkeit;
//  SQLerror::test(__FILELINE__,100);
  SQLerror::test(__FILELINE__);
    if ( db_st<=werte.st &&
         db_ge<=werte.ge &&
         db_ko<=werte.ko &&
         db_in<=werte.in &&
         db_zt<=werte.zt &&
         db_au<=werte.au &&
         db_pa<=werte.pa &&
         db_sb<=werte.au &&
         db_rw<=werte.pa   
       )   
     return true;
  else return false ;
}
