#include "Beruf.hh"
#include <Aux/Transaction.h>
#include <Aux/SQLerror.h>
exec sql include sqlca;
#include "Grundwerte.hh"
#include <gtk--/main.h>
#include "Typen.hh"

cH_Beruf::cache_t cH_Beruf::cache;

cH_Beruf::cH_Beruf(const std::string& name)
{
 cH_Beruf *cached(cache.lookup(name));
 if (cached) *this=*cached;
 else
  {
   *this=cH_Beruf(new Beruf(name));
   cache.Register(name,*this);
  }
}

void Beruf::get_Beruf()
{
  exec sql begin declare section;
   bool U,V,M,A,LAND,STADT,TYPK,TYPZ;
   char REGION[10],GESCHLECHT[10],db_vorteil[50];      
   char query[1024],query2[1024];
  exec sql end declare section;
  std::string squery="select distinct coalesce(land,false), 
      coalesce(stadt,false), coalesce(u,false), coalesce(v,false), 
      coalesce(m,false), coalesce(a,false), coalesce(typ_k,false), 
      coalesce(typ_z,false),coalesce(geschlecht,''),coalesce(region,'')
      from berufe_voraussetzung_4 where beruf ='"+Name()+"'";
  strncpy(query,squery.c_str(),sizeof(query));
  Transaction tr;
  exec sql prepare cl_beruf_ein_ from :query ;
  exec sql declare cl_beruf_ein cursor for cl_beruf_ein_ ;

  exec sql open cl_beruf_ein;
  SQLerror::test(__FILELINE__);
  while (true)   
   {
     exec sql fetch cl_beruf_ein into 
      :LAND,:STADT,:U,:V,:M,:A,:TYPK,:TYPZ,:GESCHLECHT,:REGION;
     SQLerror::test(__FILELINE__,100);
     if (sqlca.sqlcode) break;
     region=REGION;
     geschlecht=GESCHLECHT;
     u=U;v=V;m=M;a=A;typ_k=TYPK;typ_z=TYPZ;stadt=STADT;land=LAND;

     std::string squery2= "select vorteil from berufe_vorteile_4 where beruf='"
                           +Name()+"'";
     strncpy(query2,squery2.c_str(),sizeof(query2));
     exec sql prepare cl_beruf2_ein_ from :query2 ;
     exec sql declare cl_beruf2_ein cursor for cl_beruf2_ein_ ;
     exec sql open cl_beruf2_ein;
     SQLerror::test(__FILELINE__);
     while(true)
      {
       exec sql fetch cl_beruf2_ein into :db_vorteil;
       SQLerror::test(__FILELINE__,100);
       if (sqlca.sqlcode) break;
       vorteile.push_back(db_vorteil);
      }     
     exec sql close cl_beruf2_ein;
   }
 exec sql close cl_beruf_ein;
 tr.close();
// progressbar->set_percentage(1);
}


std::string Beruf::get_Vorteile() const
{
  std::string s;
  for(vector<std::string>::const_iterator i=vorteile.begin();i!=vorteile.end();++i)
   {  
     s+= (*i);
     if(i+1!=vorteile.end()) s+=", ";
   }
  return s;
}


bool Beruf::Stand(const std::string& stand) const
{
  if(stand=="Unfrei" && u) return true;
  if(stand=="Volk" && v) return true;
  if(stand=="Mittelschicht" && m) return true;
  if(stand=="Adel" && a) return true;
  return false;
}

bool Beruf::Typ(const vector<cH_Typen>& Typ) const
{
  if(Typ[0]->Zaubern()=="z" && typ_z ) return true; 
  if(Typ[1]->Zaubern()=="z" && typ_z ) return true; 
  if(Typ[0]->Zaubern()!="z" && typ_k ) return true; 
  if(Typ[1]->Zaubern()!="z" && typ_k ) return true; 
  return false;
}


/*
bool Beruf::Voraussetzungen(const Grundwerte& Werte,const vector<cH_Typen>& Typ) const
{
 if ( voraussetzung.st<=Werte.St() &&
      voraussetzung.gs<=Werte.Gs() &&
      voraussetzung.gw<=Werte.Gw() &&
      voraussetzung.ko<=Werte.Ko() &&
      voraussetzung.in<=Werte.In() &&
      voraussetzung.zt<=Werte.Zt() &&
      voraussetzung.au<=Werte.Au() &&
      voraussetzung.pa<=Werte.pA() &&
      voraussetzung.sb<=Werte.Sb() &&
      voraussetzung.geschlecht!=Werte.Geschlecht() &&
      voraussetzung.typ==Typ[0]->Zaubern() 
     )   
    return true;
 else return false ;
}
*/

Beruf_All::Beruf_All(Gtk::ProgressBar *progressbar)
{
 exec sql begin declare section;
   char db_name[100];
   int db_size;
 exec sql end declare section;
 exec sql select count(distinct beruf) into :db_size from berufe_voraussetzung_4;
 exec sql declare BAein cursor for select beruf from berufe_voraussetzung_4;
 Transaction tr;
 exec sql open BAein;
 SQLerror::test(__FILELINE__);
 double count=0;
 while(true)
  {
   progressbar->set_percentage(count/db_size);
   while(Gtk::Main::events_pending()) Gtk::Main::iteration() ;
   exec sql fetch BAein into :db_name;
   SQLerror::test(__FILELINE__,100);
   if (sqlca.sqlcode) break;
   list_All.push_back(new Beruf(db_name));
   ++count;
  }
 exec sql close BAein;
 tr.close();
 progressbar->set_percentage(1);
}
