/*  Midgard Character Generator
 *  Copyright (C) 2001 Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

// generated 2001/2/11 14:16:06 CET by thoma@ig23.
// using glademm V0.5_11c
//
// newer (non customized) versions of this file go to Zauber_auswahl.cc_new

// This file is for your program, I won't touch it again!

#include "Zauber_auswahl.hh"
#include <Aux/Transaction.h>
#include <Aux/SQLerror.h>
exec sql include sqlca;
#include "midgard_CG.hh"
#include <cstring>
#include <Gtk_OStream.h>

Zauber_auswahl::Zauber_auswahl(midgard_CG* h,const st_werte& werte, const string& typ, st_lernpunkte& l)
{
  hauptfenster=h;
  maxpunkte = l.zauber;
  zauber_auswahl_lernpunkte->set_text(itos(maxpunkte));
  exec sql begin declare section;
   int db_lernpunkte;
   char db_fertigkeiten[100];
   char db_ap[20];
   int db_kosten;
   char query[1024];
  exec sql end declare section;

   string squery;
   if (typ != "eBe")
    squery ="select l.fertigkeit, l.lernpunkte, a.ap, a.kosten \
      from lernschema l, arkanum_zauber a where l.typ = '"+typ+"'\
      and l.art = 'Zauber' and a.name = l.fertigkeit \
      order by lernpunkte ";
   if (typ == "eBe")
    squery ="select distinct l.fertigkeit, l.lernpunkte, a.ap, a.kosten \
      from lernschema l, arkanum_zauber a where l.typ = '"+typ+"'\
      and l.art = 'Zauber' and a.name = l.fertigkeit \
      and (l.p_element = '"+werte.spezial+"' or l.s_element = '"+werte.spezial2+"') \
      order by lernpunkte ";

   strncpy(query,squery.c_str(),sizeof(query));
//cout <<  query<<"\n";
   Transaction tr;
    exec sql prepare zauber_ from :query;
    exec sql declare zauber cursor for zauber_;
    exec sql open zauber;
    SQLerror::test(__FILELINE__);
    while (true)
      {
         exec sql fetch zauber into :db_fertigkeiten, :db_lernpunkte, :db_ap, :db_kosten;
         SQLerror::test(__FILELINE__,100);  
         if (sqlca.sqlcode) break;
         zauber.push_back(db_struct_zauber(db_lernpunkte,db_fertigkeiten,db_ap,db_kosten));
      }

    exec sql close zauber;
    Gtk::OStream os(zauber_clist_auswahl);
    for(vector<db_struct_zauber>::iterator i=zauber.begin();i!=zauber.end();++i)
      {
//double fac =1;
         double fac=hauptfenster->get_standard_zauber(typ,i->zauber);
         os << i->lernpunkte <<"\t"<< i->zauber <<"\t"
            <<i->ap<<"\t"<<i->kosten*fac<<"\n";
         os.flush(&*i);
      }
    for (unsigned int i=0;i<zauber_clist_auswahl->columns().size();++i)
      zauber_clist_auswahl->set_column_auto_resize(i,true);

    zauber_clist_auswahl->set_selection_mode(GTK_SELECTION_MULTIPLE);
    zauber_clist_auswahl->set_reorderable(true);
}


void Zauber_auswahl::on_zauber_clist_auswahl_select_row(gint row, gint column, GdkEvent *event)
{   
   if (maxpunkte < atoi(zauber_clist_auswahl->get_text(row,0).c_str() ))
      {
         zauber_clist_auswahl->row(row).unselect();
      }
   maxpunkte -= atoi(zauber_clist_auswahl->get_text(row,0).c_str());
   zauber_auswahl_lernpunkte->set_text(itos(maxpunkte));
}

void Zauber_auswahl::on_zauber_clist_auswahl_unselect_row(gint row, gint column, GdkEvent *event)
{   
   maxpunkte += atoi(zauber_clist_auswahl->get_text(row,0).c_str());
   zauber_auswahl_lernpunkte->set_text(itos(maxpunkte));
}

void Zauber_auswahl::on_close_zauber_clicked()
{   
    vector<st_ausgewaehlte_zauber> saz;
   for (Gtk::CList::SelectionList::iterator i=zauber_clist_auswahl->selection().begin();
         i!=zauber_clist_auswahl->selection().end();++i)
     {  
      db_struct_zauber *ptr
         =static_cast<db_struct_zauber*>(i->get_data());
         // ptr=&fert[i->get_row_num()];
//       cout << ptr ->zauber << ' ' << '\n';
       saz.push_back(st_ausgewaehlte_zauber(ptr->zauber,ptr->ap));
     }
  hauptfenster->zauber_uebernehmen(saz);
  destroy();
}
