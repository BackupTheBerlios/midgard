/*  Midgard Character Generator
 *  Copyright (C) 2001 Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include "midgard_CG.hh"
#include <Aux/Transaction.h>
#include <Aux/SQLerror.h>
#include "Window_doppelcharaktere.hh"
#include <Gtk_OStream.h>
exec sql include sqlca;

void midgard_CG::fill_typauswahl()
{
  vec_Typen.clear();
  fill_typauswahl_fill(1);
}

void midgard_CG::fill_typauswahl_2()
{
  vec_Typen_2.clear();
  fill_typauswahl_fill(2);
}

void midgard_CG::fill_typauswahl_fill(int typ_1_2)
{
  exec sql begin declare section;
   char db_typ[50];
   char db_region[10];
   int db_typnr;
   char query[1024];
     char db_typs[50], db_typz[5], db_ausdauer[5];
     int  db_stand, db_sb, db_ruestung;
  exec sql end declare section;
  std::string squery = "select t.typl";
  if (werte.geschlecht=="w") squery +="w";
  squery +=",t.typnr,coalesce(t.region,''), t.typs,t.typz,t.stand,t.sb,t.ausdauer,t.ruestung from typen t";
  if (werte.spezies!="Mensch") 
     squery += ", spezies_typen st where t.typs = st.typen and st.spezies = '"
            + werte.spezies +"'";
  if (werte.spezies!="Mensch" && typ_1_2==2) squery += " and  typz = 'z' ";
  if (werte.spezies=="Mensch" && typ_1_2==2) squery += " where  typz = 'z' ";
  squery +="  order by typnr";

  Transaction tr;
  strncpy(query,squery.c_str(),sizeof(query));
  exec sql prepare ein_ from :query;
  exec sql declare ein cursor for ein_;
  exec sql open ein;
  SQLerror::test(__FILELINE__);
/*
  Gtk::Menu *_m(manage(new Gtk::Menu()));
  Gtk::MenuItem *_mi;
*/
{
Gtk::OStream t_((typ_1_2==1) ? typauswahl : typauswahl_2 ); 
  unsigned int count=0;
  while (true)
   {
      exec sql fetch ein into :db_typ, :db_typnr, :db_region, 
         :db_typs,:db_typz,:db_stand,:db_sb,:db_ausdauer,:db_ruestung;
      SQLerror::test(__FILELINE__,100);
      if (sqlca.sqlcode) break;   
      if (region_check(db_region))
       {
         if (typ_1_2==1)  vec_Typen.push_back(new Data_typen(db_typnr,count,db_typ,
            db_typs,db_typz,db_stand,db_sb,db_ausdauer,db_ruestung));
         if (typ_1_2==2)  vec_Typen_2.push_back(new Data_typen(db_typnr,count,db_typ,
            db_typs,db_typz,db_stand,db_sb,db_ausdauer,db_ruestung));
//std::cout << db_typnr<<"\t"<<db_typ<<"\t"<<typen_vector.size()<<"\n";

/*
         _mi = manage(new Gtk::MenuItem(db_typ));
         _m->append(*_mi);
         _mi->show();
         _mi->set_user_data((gpointer)count);
*/
t_ << db_typ;
t_.flush((gpointer)count);
         ++count;
       }
   }
}
  if (typ_1_2==1) 
   { //typauswahl->set_menu(*_m);
     typauswahl->get_menu()->deactivate.connect(SigC::bind(slot(static_cast<class midgard_CG*>(this), &midgard_CG::typauswahl_button),get_typ_nr()));
   }
  if (typ_1_2==2) 
   { //typauswahl_2->set_menu(*_m);
     typauswahl_2->get_menu()->deactivate.connect(SigC::bind(slot(static_cast<class midgard_CG*>(this), &midgard_CG::typauswahl_2_button),get_typ_nr(2)));
   }
}


void midgard_CG::typauswahl_button(int ttyp)
{
 int ityp,count=0;
 int ityp_ = int(typauswahl->get_menu()->get_active()->get_user_data());
 Typ = *vec_Typen[ityp_];

 if (ttyp==-1) ityp_=0;
 for (std::vector<cH_Data_typen>::const_iterator i=vec_Typen.begin();
    i!=vec_Typen.end();++i)
    { if (count==ityp_){ityp=(*i)->Nr();break;}
      ++count;
    }
// get_typ(ityp);     
 get_Ausnahmen();
 show_gtk();
 if (ttyp!=-1&&(Typ.Short()=="dBe" || Typ.Short()=="eBe")) angeborene_zauber();
}

void midgard_CG::typauswahl_2_button(int ttyp)
{
 int ityp,count=0;
 int ityp_ = int(typauswahl_2->get_menu()->get_active()->get_user_data());
 Typ2 = *vec_Typen_2[ityp_];

//std::cout << "Typ 2 = " << vec_Typen_2[ityp_]->Name()<<"\n";
 if (ttyp==-1) ityp_=0;
 for (std::vector<cH_Data_typen>::const_iterator i=vec_Typen_2.begin();
   i!=vec_Typen_2.end();++i)
   { if (count==ityp_){ityp=(*i)->Nr();break;}
     ++count;
   }
//std::cout << "Nummern \t"<<ityp<<"="<<vec_Typen[ityp_]->Nr()<<"\t"<<ityp_<<"="<<vec_Typen[ityp_]->Nr_Optionmenu()<<"\n";
// get_typ(ityp,2);     
 get_Ausnahmen();
 show_gtk();
 if (ttyp!=-1 && (Typ2.Short()=="dBe" || Typ2.Short()=="eBe")) angeborene_zauber();
}


/*
int  fill_typauswahl_int(int i)
{
  exec sql begin declare section;
    int 
  exec sql end declare section;
}
*/

void midgard_CG::fill_spezies()
{
  spezies_vector.clear();
  exec sql begin declare section;
   char db_spezies[50];
   int db_nr;
  exec sql end declare section;
  Transaction tr;
  exec sql declare ein_r cursor for 
      select nr,spezies from spezies order by nr ;
  exec sql open ein_r;
  SQLerror::test(__FILELINE__);
  Gtk::Menu *_m(manage(new Gtk::Menu()));
  Gtk::MenuItem *_mi;
  while (true)
   {
      exec sql fetch ein_r into :db_nr, :db_spezies;
      SQLerror::test(__FILELINE__,100);
      if (sqlca.sqlcode) break;   
      spezies_vector.push_back(db_spezies);
      _mi = manage(new Gtk::MenuItem(db_spezies));
      _m->append(*_mi);
      _mi->show();
      _mi->set_user_data((gpointer)db_nr);
    }
  optionmenu_spezies->set_menu(*_m);
  optionmenu_spezies->get_menu()->deactivate.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::spezieswahl_button));
}

void midgard_CG::spezieswahl_button()
{
 int ityp = int(optionmenu_spezies->get_menu()->get_active()->get_user_data());
 werte.spezies = spezies_vector[ityp];
 midgard_CG::fill_typauswahl();
 midgard_CG::get_spezies_constraint();
 midgard_CG::typauswahl_button(-1);

 if (werte.spezies=="Elf")
   { manage (new Window_doppelcharaktere(this));
     angeborene_zauber();
   }
}

void midgard_CG::doppelcharaktere()
{
   fill_typauswahl_2();
   typauswahl_2->show();
   typauswahl_2_button(-1);
   magie_bool=true;
}

