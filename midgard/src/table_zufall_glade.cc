// generated 2002/9/21 20:44:36 CEST by thoma@Tiger.(none)
// using glademm V1.1.1c_cvs
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- /home/thoma/rollenspiel/midgard/programme/gcc_3.0/midgard/midgard.glade
// for gtk 1.2.10 and gtkmm 1.2.10
//
// Please modify the corresponding derived classes in ./src/table_zufall.cc

#include "config.h"
#include "table_zufall.hh"
#include <gtk--/adjustment.h>
#include <gtk--/table.h>
#include <gtk--/entry.h>
#include <gtk--/button.h>
#include <gtk--/frame.h>
#include <gtk--/label.h>

table_zufall_glade::table_zufall_glade(GlademmData *_data
) : Gtk::Table(3, 3, false)
{  table_zufall = this;
   checkbutton_spezies = manage(new class Gtk::CheckButton("Spezies", 0, 0.5));
   checkbutton_herkunft = manage(new class Gtk::CheckButton("Herkunft", 0, 0.5));
   checkbutton_typ = manage(new class Gtk::CheckButton("Typ", 0, 0.5));
   checkbutton_werte = manage(new class Gtk::CheckButton("Werte", 0, 0.5));
   checkbutton_ange_fert = manage(new class Gtk::CheckButton("angeb. Fert.", 0, 0.5));
   checkbutton_st = manage(new class Gtk::CheckButton("St", 0, 0.5));
   checkbutton_gs = manage(new class Gtk::CheckButton("Gs", 0, 0.5));
   checkbutton_gw = manage(new class Gtk::CheckButton("Gw", 0, 0.5));
   checkbutton_ko = manage(new class Gtk::CheckButton("Ko", 0, 0.5));
   checkbutton_in = manage(new class Gtk::CheckButton("In", 0, 0.5));
   checkbutton_zt = manage(new class Gtk::CheckButton("Zt", 0, 0.5));
   checkbutton_au = manage(new class Gtk::CheckButton("Au", 0, 0.5));
   checkbutton_pa = manage(new class Gtk::CheckButton("pA", 0, 0.5));
   checkbutton_wk = manage(new class Gtk::CheckButton("Wk", 0, 0.5));
   checkbutton_sb = manage(new class Gtk::CheckButton("Sb", 0, 0.5));
   checkbutton_b = manage(new class Gtk::CheckButton("B", 0, 0.5));
   
   Gtk::Adjustment *spinbutton_st_adj = manage(new class Gtk::Adjustment(1, 1, 100, 1, 10, 10));
   spinbutton_st = manage(new class Gtk::SpinButton(*spinbutton_st_adj, 1, 0));
   
   Gtk::Adjustment *spinbutton_au_adj = manage(new class Gtk::Adjustment(1, 1, 100, 1, 10, 10));
   spinbutton_au = manage(new class Gtk::SpinButton(*spinbutton_au_adj, 1, 0));
   
   Gtk::Adjustment *spinbutton_pa_adj = manage(new class Gtk::Adjustment(1, 1, 100, 1, 10, 10));
   spinbutton_pa = manage(new class Gtk::SpinButton(*spinbutton_pa_adj, 1, 0));
   
   Gtk::Adjustment *spinbutton_wk_adj = manage(new class Gtk::Adjustment(1, 1, 100, 1, 10, 10));
   spinbutton_wk = manage(new class Gtk::SpinButton(*spinbutton_wk_adj, 1, 0));
   
   Gtk::Adjustment *spinbutton_sb_adj = manage(new class Gtk::Adjustment(1, 1, 100, 1, 10, 10));
   spinbutton_sb = manage(new class Gtk::SpinButton(*spinbutton_sb_adj, 1, 0));
   
   Gtk::Adjustment *spinbutton_b_adj = manage(new class Gtk::Adjustment(1, 1, 100, 1, 10, 10));
   spinbutton_b = manage(new class Gtk::SpinButton(*spinbutton_b_adj, 1, 0));
   
   Gtk::Adjustment *spinbutton_gs_adj = manage(new class Gtk::Adjustment(1, 1, 100, 1, 10, 10));
   spinbutton_gs = manage(new class Gtk::SpinButton(*spinbutton_gs_adj, 1, 0));
   
   Gtk::Adjustment *spinbutton_gw_adj = manage(new class Gtk::Adjustment(1, 1, 100, 1, 10, 10));
   spinbutton_gw = manage(new class Gtk::SpinButton(*spinbutton_gw_adj, 1, 0));
   
   Gtk::Adjustment *spinbutton_ko_adj = manage(new class Gtk::Adjustment(1, 1, 100, 1, 10, 10));
   spinbutton_ko = manage(new class Gtk::SpinButton(*spinbutton_ko_adj, 1, 0));
   
   Gtk::Adjustment *spinbutton_in_adj = manage(new class Gtk::Adjustment(1, 1, 100, 1, 10, 10));
   spinbutton_in = manage(new class Gtk::SpinButton(*spinbutton_in_adj, 1, 0));
   
   Gtk::Adjustment *spinbutton_zt_adj = manage(new class Gtk::Adjustment(1, 1, 100, 1, 10, 10));
   spinbutton_zt = manage(new class Gtk::SpinButton(*spinbutton_zt_adj, 1, 0));
   
   Gtk::Table *table168 = manage(new class Gtk::Table(6, 4, false));
   frame_werte_vorgaben = manage(new class Gtk::Frame("Werte"));
   combo_spezies = manage(new class Gtk::Combo());
   combo_typ = manage(new class Gtk::Combo());
   combo_herkunft = manage(new class Gtk::Combo());
   
   Gtk::Table *table166 = manage(new class Gtk::Table(9, 3, false));
   frame_vorgaben = manage(new class Gtk::Frame("Vorgaben"));
   
   Gtk::Button *button_zufall_voll = manage(new class Gtk::Button("Zufallsabenteurer \n"
		"Grad 1 erzeugen"));
   togglebutton_vorgaben = manage(new class Gtk::ToggleButton("Vorgaben\n"
		"machen"));
   
   Gtk::Table *table170 = manage(new class Gtk::Table(2, 2, false));
   Gtk::Frame *frame110 = manage(new class Gtk::Frame("Abenteurer erzeugen"));
   Gtk::Label *label606 = manage(new class Gtk::Label("Steigern"));
   Gtk::RadioButton::Group _RadioBGroup_zufall_steigern;
   radiobutton_steigern_grad = manage(new class Gtk::RadioButton(_RadioBGroup_zufall_steigern, "Grad", 0, 0.5));
   radiobutton_steigern_gfp = manage(new class Gtk::RadioButton(_RadioBGroup_zufall_steigern, "GFP", 0, 0.5));
   
   Gtk::Adjustment *spinbutton_gfp_adj = manage(new class Gtk::Adjustment(1, 0, 1e+07, 1, 10, 10));
   spinbutton_gfp = manage(new class Gtk::SpinButton(*spinbutton_gfp_adj, 1, 0));
   
   Gtk::Adjustment *spinbutton_grad_adj = manage(new class Gtk::Adjustment(1, 0, 15, 1, 10, 10));
   spinbutton_grad = manage(new class Gtk::SpinButton(*spinbutton_grad_adj, 1, 0));
   
   Gtk::Table *table169 = manage(new class Gtk::Table(3, 2, false));
   Gtk::Button *button_steigern = manage(new class Gtk::Button("Steigern"));
   Gtk::Table *table165 = manage(new class Gtk::Table(3, 3, false));
   Gtk::Frame *frame111 = manage(new class Gtk::Frame("Abenteurer steigern"));
   checkbutton_spezies->set_flags(GTK_CAN_FOCUS);
   checkbutton_spezies->set_mode(true);
   checkbutton_spezies->set_active(false);
   checkbutton_herkunft->set_flags(GTK_CAN_FOCUS);
   checkbutton_herkunft->set_mode(true);
   checkbutton_herkunft->set_active(false);
   checkbutton_typ->set_flags(GTK_CAN_FOCUS);
   checkbutton_typ->set_mode(true);
   checkbutton_typ->set_active(false);
   checkbutton_werte->set_flags(GTK_CAN_FOCUS);
   checkbutton_werte->set_mode(true);
   checkbutton_werte->set_active(false);
   checkbutton_ange_fert->set_flags(GTK_CAN_FOCUS);
   checkbutton_ange_fert->set_mode(true);
   checkbutton_ange_fert->set_active(false);
   checkbutton_st->set_flags(GTK_CAN_FOCUS);
   checkbutton_st->set_mode(true);
   checkbutton_st->set_active(false);
   checkbutton_gs->set_flags(GTK_CAN_FOCUS);
   checkbutton_gs->set_mode(true);
   checkbutton_gs->set_active(false);
   checkbutton_gw->set_flags(GTK_CAN_FOCUS);
   checkbutton_gw->set_mode(true);
   checkbutton_gw->set_active(false);
   checkbutton_ko->set_flags(GTK_CAN_FOCUS);
   checkbutton_ko->set_mode(true);
   checkbutton_ko->set_active(false);
   checkbutton_in->set_flags(GTK_CAN_FOCUS);
   checkbutton_in->set_mode(true);
   checkbutton_in->set_active(false);
   checkbutton_zt->set_flags(GTK_CAN_FOCUS);
   checkbutton_zt->set_mode(true);
   checkbutton_zt->set_active(false);
   checkbutton_au->set_flags(GTK_CAN_FOCUS);
   checkbutton_au->set_mode(true);
   checkbutton_au->set_active(false);
   checkbutton_pa->set_flags(GTK_CAN_FOCUS);
   checkbutton_pa->set_mode(true);
   checkbutton_pa->set_active(false);
   checkbutton_wk->set_flags(GTK_CAN_FOCUS);
   checkbutton_wk->set_mode(true);
   checkbutton_wk->set_active(false);
   checkbutton_sb->set_flags(GTK_CAN_FOCUS);
   checkbutton_sb->set_mode(true);
   checkbutton_sb->set_active(false);
   checkbutton_b->set_flags(GTK_CAN_FOCUS);
   checkbutton_b->set_mode(true);
   checkbutton_b->set_active(false);
   spinbutton_st->set_sensitive(false);
   spinbutton_st->set_flags(GTK_CAN_FOCUS);
   spinbutton_st->set_update_policy(GTK_UPDATE_ALWAYS);
   spinbutton_st->set_numeric(false);
   spinbutton_st->set_digits(0);
   spinbutton_st->set_wrap(false);
   spinbutton_st->set_snap_to_ticks(false);
   spinbutton_au->set_sensitive(false);
   spinbutton_au->set_flags(GTK_CAN_FOCUS);
   spinbutton_au->set_update_policy(GTK_UPDATE_ALWAYS);
   spinbutton_au->set_numeric(false);
   spinbutton_au->set_digits(0);
   spinbutton_au->set_wrap(false);
   spinbutton_au->set_snap_to_ticks(false);
   spinbutton_pa->set_sensitive(false);
   spinbutton_pa->set_flags(GTK_CAN_FOCUS);
   spinbutton_pa->set_update_policy(GTK_UPDATE_ALWAYS);
   spinbutton_pa->set_numeric(false);
   spinbutton_pa->set_digits(0);
   spinbutton_pa->set_wrap(false);
   spinbutton_pa->set_snap_to_ticks(false);
   spinbutton_wk->set_sensitive(false);
   spinbutton_wk->set_flags(GTK_CAN_FOCUS);
   spinbutton_wk->set_update_policy(GTK_UPDATE_ALWAYS);
   spinbutton_wk->set_numeric(false);
   spinbutton_wk->set_digits(0);
   spinbutton_wk->set_wrap(false);
   spinbutton_wk->set_snap_to_ticks(false);
   spinbutton_sb->set_sensitive(false);
   spinbutton_sb->set_flags(GTK_CAN_FOCUS);
   spinbutton_sb->set_update_policy(GTK_UPDATE_ALWAYS);
   spinbutton_sb->set_numeric(false);
   spinbutton_sb->set_digits(0);
   spinbutton_sb->set_wrap(false);
   spinbutton_sb->set_snap_to_ticks(false);
   spinbutton_b->set_sensitive(false);
   spinbutton_b->set_flags(GTK_CAN_FOCUS);
   spinbutton_b->set_update_policy(GTK_UPDATE_ALWAYS);
   spinbutton_b->set_numeric(false);
   spinbutton_b->set_digits(0);
   spinbutton_b->set_wrap(false);
   spinbutton_b->set_snap_to_ticks(false);
   spinbutton_gs->set_sensitive(false);
   spinbutton_gs->set_flags(GTK_CAN_FOCUS);
   spinbutton_gs->set_update_policy(GTK_UPDATE_ALWAYS);
   spinbutton_gs->set_numeric(false);
   spinbutton_gs->set_digits(0);
   spinbutton_gs->set_wrap(false);
   spinbutton_gs->set_snap_to_ticks(false);
   spinbutton_gw->set_sensitive(false);
   spinbutton_gw->set_flags(GTK_CAN_FOCUS);
   spinbutton_gw->set_update_policy(GTK_UPDATE_ALWAYS);
   spinbutton_gw->set_numeric(false);
   spinbutton_gw->set_digits(0);
   spinbutton_gw->set_wrap(false);
   spinbutton_gw->set_snap_to_ticks(false);
   spinbutton_ko->set_sensitive(false);
   spinbutton_ko->set_flags(GTK_CAN_FOCUS);
   spinbutton_ko->set_update_policy(GTK_UPDATE_ALWAYS);
   spinbutton_ko->set_numeric(false);
   spinbutton_ko->set_digits(0);
   spinbutton_ko->set_wrap(false);
   spinbutton_ko->set_snap_to_ticks(false);
   spinbutton_in->set_sensitive(false);
   spinbutton_in->set_flags(GTK_CAN_FOCUS);
   spinbutton_in->set_update_policy(GTK_UPDATE_ALWAYS);
   spinbutton_in->set_numeric(false);
   spinbutton_in->set_digits(0);
   spinbutton_in->set_wrap(false);
   spinbutton_in->set_snap_to_ticks(false);
   spinbutton_zt->set_sensitive(false);
   spinbutton_zt->set_flags(GTK_CAN_FOCUS);
   spinbutton_zt->set_update_policy(GTK_UPDATE_ALWAYS);
   spinbutton_zt->set_numeric(false);
   spinbutton_zt->set_digits(0);
   spinbutton_zt->set_wrap(false);
   spinbutton_zt->set_snap_to_ticks(false);
   table168->set_row_spacings(0);
   table168->set_col_spacings(0);
   table168->attach(*checkbutton_st, 0, 1, 0, 1, GTK_FILL, 0, 0, 0);
   table168->attach(*checkbutton_gs, 0, 1, 1, 2, GTK_FILL, 0, 0, 0);
   table168->attach(*checkbutton_gw, 0, 1, 2, 3, GTK_FILL, 0, 0, 0);
   table168->attach(*checkbutton_ko, 0, 1, 3, 4, GTK_FILL, 0, 0, 0);
   table168->attach(*checkbutton_in, 0, 1, 4, 5, GTK_FILL, 0, 0, 0);
   table168->attach(*checkbutton_zt, 0, 1, 5, 6, GTK_FILL, 0, 0, 0);
   table168->attach(*checkbutton_au, 2, 3, 0, 1, GTK_FILL, 0, 0, 0);
   table168->attach(*checkbutton_pa, 2, 3, 1, 2, GTK_FILL, 0, 0, 0);
   table168->attach(*checkbutton_wk, 2, 3, 2, 3, GTK_FILL, 0, 0, 0);
   table168->attach(*checkbutton_sb, 2, 3, 3, 4, GTK_FILL, 0, 0, 0);
   table168->attach(*checkbutton_b, 2, 3, 4, 5, GTK_FILL, 0, 0, 0);
   table168->attach(*spinbutton_st, 1, 2, 0, 1, 0, 0, 0, 0);
   table168->attach(*spinbutton_au, 3, 4, 0, 1, 0, 0, 0, 0);
   table168->attach(*spinbutton_pa, 3, 4, 1, 2, 0, 0, 0, 0);
   table168->attach(*spinbutton_wk, 3, 4, 2, 3, 0, 0, 0, 0);
   table168->attach(*spinbutton_sb, 3, 4, 3, 4, 0, 0, 0, 0);
   table168->attach(*spinbutton_b, 3, 4, 4, 5, 0, 0, 0, 0);
   table168->attach(*spinbutton_gs, 1, 2, 1, 2, 0, 0, 0, 0);
   table168->attach(*spinbutton_gw, 1, 2, 2, 3, 0, 0, 0, 0);
   table168->attach(*spinbutton_ko, 1, 2, 3, 4, 0, 0, 0, 0);
   table168->attach(*spinbutton_in, 1, 2, 4, 5, 0, 0, 0, 0);
   table168->attach(*spinbutton_zt, 1, 2, 5, 6, 0, 0, 0, 0);
   frame_werte_vorgaben->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame_werte_vorgaben->set_label_align(0,0);
   frame_werte_vorgaben->add(*table168);
   combo_spezies->get_entry()->set_flags(GTK_CAN_FOCUS);
   combo_spezies->get_entry()->set_visibility(true);
   combo_spezies->get_entry()->set_editable(true);
   combo_spezies->get_entry()->set_text("");
   combo_spezies->set_sensitive(false);
   combo_spezies->set_case_sensitive(false);
   combo_spezies->set_use_arrows(true);
   combo_spezies->set_use_arrows_always(false);
   {  
      
      const char * const items[] = { "", 0 };
      combo_spezies->set_popdown_strings(items);
   }
   combo_spezies->get_entry()->set_text("");
   combo_typ->get_entry()->set_flags(GTK_CAN_FOCUS);
   combo_typ->get_entry()->set_visibility(true);
   combo_typ->get_entry()->set_editable(true);
   combo_typ->get_entry()->set_text("");
   combo_typ->set_sensitive(false);
   combo_typ->set_case_sensitive(false);
   combo_typ->set_use_arrows(true);
   combo_typ->set_use_arrows_always(false);
   {  
      
      const char * const items[] = { "", 0 };
      combo_typ->set_popdown_strings(items);
   }
   combo_typ->get_entry()->set_text("");
   combo_herkunft->get_entry()->set_flags(GTK_CAN_FOCUS);
   combo_herkunft->get_entry()->set_visibility(true);
   combo_herkunft->get_entry()->set_editable(true);
   combo_herkunft->get_entry()->set_text("");
   combo_herkunft->set_sensitive(false);
   combo_herkunft->set_case_sensitive(false);
   combo_herkunft->set_use_arrows(true);
   combo_herkunft->set_use_arrows_always(false);
   {  
      
      const char * const items[] = { "", 0 };
      combo_herkunft->set_popdown_strings(items);
   }
   combo_herkunft->get_entry()->set_text("");
   table166->set_row_spacings(0);
   table166->set_col_spacings(0);
   table166->attach(*checkbutton_spezies, 0, 1, 0, 1, GTK_FILL, 0, 0, 0);
   table166->attach(*checkbutton_herkunft, 0, 1, 3, 4, GTK_FILL, 0, 0, 0);
   table166->attach(*checkbutton_typ, 0, 1, 2, 3, GTK_FILL, 0, 0, 0);
   table166->attach(*checkbutton_werte, 0, 1, 1, 2, GTK_FILL, 0, 0, 0);
   table166->attach(*checkbutton_ange_fert, 0, 1, 4, 5, GTK_FILL, 0, 0, 0);
   table166->attach(*frame_werte_vorgaben, 2, 3, 0, 5, GTK_FILL, GTK_FILL, 0, 0);
   table166->attach(*combo_spezies, 1, 2, 0, 1, 0, 0, 0, 0);
   table166->attach(*combo_typ, 1, 2, 2, 3, 0, 0, 0, 0);
   table166->attach(*combo_herkunft, 1, 2, 3, 4, 0, 0, 0, 0);
   frame_vorgaben->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame_vorgaben->set_label_align(0,0);
   frame_vorgaben->add(*table166);
   button_zufall_voll->set_flags(GTK_CAN_FOCUS);
   button_zufall_voll->set_relief(GTK_RELIEF_NORMAL);
   togglebutton_vorgaben->set_flags(GTK_CAN_FOCUS);
   togglebutton_vorgaben->set_relief(GTK_RELIEF_NORMAL);
   togglebutton_vorgaben->set_active(false);
   table170->set_row_spacings(0);
   table170->set_col_spacings(0);
   table170->attach(*frame_vorgaben, 1, 2, 1, 2, GTK_EXPAND|GTK_FILL, GTK_EXPAND|GTK_FILL, 0, 0);
   table170->attach(*button_zufall_voll, 0, 1, 0, 1, GTK_FILL, 0, 0, 0);
   table170->attach(*togglebutton_vorgaben, 1, 2, 0, 1, GTK_FILL, 0, 0, 0);
   frame110->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame110->set_label_align(0,0);
   frame110->add(*table170);
   label606->set_alignment(0.5,0.5);
   label606->set_padding(0,0);
   label606->set_justify(GTK_JUSTIFY_CENTER);
   label606->set_line_wrap(false);
   radiobutton_steigern_grad->set_flags(GTK_CAN_FOCUS);
   radiobutton_steigern_grad->set_mode(true);
   radiobutton_steigern_grad->set_active(true);
   radiobutton_steigern_gfp->set_flags(GTK_CAN_FOCUS);
   radiobutton_steigern_gfp->set_mode(true);
   radiobutton_steigern_gfp->set_active(false);
   spinbutton_gfp->set_sensitive(false);
   spinbutton_gfp->set_flags(GTK_CAN_FOCUS);
   spinbutton_gfp->set_update_policy(GTK_UPDATE_ALWAYS);
   spinbutton_gfp->set_numeric(false);
   spinbutton_gfp->set_digits(0);
   spinbutton_gfp->set_wrap(false);
   spinbutton_gfp->set_snap_to_ticks(false);
   spinbutton_grad->set_flags(GTK_CAN_FOCUS);
   spinbutton_grad->set_update_policy(GTK_UPDATE_ALWAYS);
   spinbutton_grad->set_numeric(false);
   spinbutton_grad->set_digits(0);
   spinbutton_grad->set_wrap(false);
   spinbutton_grad->set_snap_to_ticks(false);
   table169->set_row_spacings(0);
   table169->set_col_spacings(0);
   table169->attach(*label606, 0, 2, 0, 1, GTK_SHRINK|GTK_FILL, GTK_SHRINK, 0, 0);
   table169->attach(*radiobutton_steigern_grad, 0, 1, 1, 2, 0, 0, 0, 0);
   table169->attach(*radiobutton_steigern_gfp, 1, 2, 1, 2, 0, 0, 0, 0);
   table169->attach(*spinbutton_gfp, 1, 2, 2, 3, 0, 0, 0, 0);
   table169->attach(*spinbutton_grad, 0, 1, 2, 3, 0, 0, 0, 0);
   button_steigern->set_flags(GTK_CAN_FOCUS);
   button_steigern->set_relief(GTK_RELIEF_NORMAL);
   table165->set_row_spacings(0);
   table165->set_col_spacings(0);
   table165->attach(*table169, 2, 3, 1, 2, GTK_EXPAND|GTK_FILL, GTK_FILL, 0, 0);
   table165->attach(*button_steigern, 0, 1, 0, 1, GTK_FILL, 0, 0, 0);
   frame111->set_shadow_type(GTK_SHADOW_ETCHED_IN);
   frame111->set_label_align(0,0);
   frame111->add(*table165);
   table_zufall->set_row_spacings(0);
   table_zufall->set_col_spacings(0);
   table_zufall->attach(*frame110, 0, 1, 0, 1, 0, 0, 0, 0);
   table_zufall->attach(*frame111, 1, 2, 0, 1, 0, GTK_FILL, 0, 0);
   checkbutton_spezies->show();
   checkbutton_herkunft->show();
   checkbutton_typ->show();
   checkbutton_werte->show();
   checkbutton_ange_fert->show();
   checkbutton_st->show();
   checkbutton_gs->show();
   checkbutton_gw->show();
   checkbutton_ko->show();
   checkbutton_in->show();
   checkbutton_zt->show();
   checkbutton_au->show();
   checkbutton_pa->show();
   checkbutton_wk->show();
   checkbutton_sb->show();
   checkbutton_b->show();
   spinbutton_st->show();
   spinbutton_au->show();
   spinbutton_pa->show();
   spinbutton_wk->show();
   spinbutton_sb->show();
   spinbutton_b->show();
   spinbutton_gs->show();
   spinbutton_gw->show();
   spinbutton_ko->show();
   spinbutton_in->show();
   spinbutton_zt->show();
   table168->show();
   combo_spezies->show();
   combo_typ->show();
   combo_herkunft->show();
   table166->show();
   button_zufall_voll->show();
   togglebutton_vorgaben->show();
   table170->show();
   frame110->show();
   label606->show();
   radiobutton_steigern_grad->show();
   radiobutton_steigern_gfp->show();
   spinbutton_gfp->show();
   spinbutton_grad->show();
   table169->show();
   button_steigern->show();
   table165->show();
   frame111->show();
   table_zufall->show();
   checkbutton_spezies->toggled.connect(SigC::slot(static_cast<class table_zufall*>(this), &table_zufall::on_checkbutton_spezies_toggled));
   checkbutton_herkunft->toggled.connect(SigC::slot(static_cast<class table_zufall*>(this), &table_zufall::on_checkbutton_herkunft_toggled));
   checkbutton_typ->toggled.connect(SigC::slot(static_cast<class table_zufall*>(this), &table_zufall::on_checkbutton_typ_toggled));
   checkbutton_werte->toggled.connect(SigC::slot(static_cast<class table_zufall*>(this), &table_zufall::on_checkbutton_werte_toggled));
   checkbutton_st->toggled.connect(SigC::slot(static_cast<class table_zufall*>(this), &table_zufall::on_checkbutton_st_toggled));
   checkbutton_gs->toggled.connect(SigC::slot(static_cast<class table_zufall*>(this), &table_zufall::on_checkbutton_gs_toggled));
   checkbutton_gw->toggled.connect(SigC::slot(static_cast<class table_zufall*>(this), &table_zufall::on_checkbutton_gw_toggled));
   checkbutton_ko->toggled.connect(SigC::slot(static_cast<class table_zufall*>(this), &table_zufall::on_checkbutton_ko_toggled));
   checkbutton_in->toggled.connect(SigC::slot(static_cast<class table_zufall*>(this), &table_zufall::on_checkbutton_in_toggled));
   checkbutton_zt->toggled.connect(SigC::slot(static_cast<class table_zufall*>(this), &table_zufall::on_checkbutton_zt_toggled));
   checkbutton_au->toggled.connect(SigC::slot(static_cast<class table_zufall*>(this), &table_zufall::on_checkbutton_au_toggled));
   checkbutton_pa->toggled.connect(SigC::slot(static_cast<class table_zufall*>(this), &table_zufall::on_checkbutton_pa_toggled));
   checkbutton_wk->toggled.connect(SigC::slot(static_cast<class table_zufall*>(this), &table_zufall::on_checkbutton_wk_toggled));
   checkbutton_sb->toggled.connect(SigC::slot(static_cast<class table_zufall*>(this), &table_zufall::on_checkbutton_sb_toggled));
   checkbutton_b->toggled.connect(SigC::slot(static_cast<class table_zufall*>(this), &table_zufall::on_checkbutton_b_toggled));
   combo_spezies->get_entry()->activate.connect(SigC::slot(static_cast<class table_zufall*>(this), &table_zufall::on_combo_spezies_activate));
   combo_spezies->get_entry()->focus_out_event.connect(SigC::slot(static_cast<class table_zufall*>(this), &table_zufall::on_combo_spezies_focus_out_event));
   combo_spezies->get_entry()->changed.connect(SigC::slot(static_cast<class table_zufall*>(this), &table_zufall::on_combo_spezies_changed));
   combo_typ->get_entry()->activate.connect(SigC::slot(static_cast<class table_zufall*>(this), &table_zufall::on_combo_typ_activate));
   combo_typ->get_entry()->focus_out_event.connect(SigC::slot(static_cast<class table_zufall*>(this), &table_zufall::on_combo_typ__focus_out_event));
   combo_typ->get_entry()->changed.connect(SigC::slot(static_cast<class table_zufall*>(this), &table_zufall::on_combo_typ__changed));
   combo_herkunft->get_entry()->activate.connect(SigC::slot(static_cast<class table_zufall*>(this), &table_zufall::on_combo_typ_activate));
   combo_herkunft->get_entry()->focus_out_event.connect(SigC::slot(static_cast<class table_zufall*>(this), &table_zufall::on_combo_typ__focus_out_event));
   combo_herkunft->get_entry()->changed.connect(SigC::slot(static_cast<class table_zufall*>(this), &table_zufall::on_combo_typ__changed));
   button_zufall_voll->clicked.connect(SigC::slot(static_cast<class table_zufall*>(this), &table_zufall::on_button_zufall_voll_clicked));
   togglebutton_vorgaben->toggled.connect(SigC::slot(static_cast<class table_zufall*>(this), &table_zufall::on_togglebutton_vorgaben_toggled));
   radiobutton_steigern_grad->toggled.connect(SigC::slot(static_cast<class table_zufall*>(this), &table_zufall::on_radiobutton_steigern_grad_toggled));
   radiobutton_steigern_gfp->toggled.connect(SigC::slot(static_cast<class table_zufall*>(this), &table_zufall::on_radiobutton_steigern_gfp_toggled));
   button_steigern->clicked.connect(SigC::slot(static_cast<class table_zufall*>(this), &table_zufall::on_button_steigern_clicked));
}

table_zufall_glade::~table_zufall_glade()
{  
}
