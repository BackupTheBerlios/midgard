/*  Midgard Character Generator
 *  Copyright (C) 2001 Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include <Aux/Transaction.h>
#include <Aux/SQLerror.h>
exec sql include sqlca;
#include "midgard_CG.hh"
#include <cstring>
#include <Gtk_OStream.h>

#ifdef __MINGW32__
extern "C" { int snprintf(char *str, size_t size, const  char  *format, ...); }
#endif

float midgard_CG::get_standard_zaubermittel(const Data_typen& Typ, const Data_typen& Typ2, const std::string& name)
{
  exec sql begin declare section;
   char db_ergebnis[20],db_ergebnis2[20];
   char query[200];
  exec sql end declare section;
  strncpy(db_ergebnis2,"",sizeof(db_ergebnis2));
  std::string squery = "select ";
  if (get_typ_s("Magie",Typ)) squery += " coalesce("+Typ.Short()+",'A') ";
  if (get_typ_s("Magie",Typ) && get_typ_s("Magie",Typ2)) squery +", ";
  if (get_typ_s("Magie",Typ2)) squery += " coalesce("+Typ2.Short()+",'A')";
  squery += " from zauberwerk where  name = '"+name+"'";
  strncpy(query,squery.c_str(),sizeof(query));

/*
  snprintf(query,sizeof(query),"select coalesce(%s,'A') from zauberwerk where name = '%s'",
               typs.c_str(), name.c_str());
*/

   Transaction tr;
   exec sql prepare zaub from :query ;
   exec sql declare zauber cursor for zaub ;
   exec sql open zauber;
   SQLerror::test(__FILELINE__);
   if(get_typ_s("Magie",Typ) && get_typ_s("Magie",Typ2) )   
      exec sql fetch zauber into  :db_ergebnis, :db_ergebnis2;
   else
      exec sql fetch zauber into  :db_ergebnis;
   SQLerror::test(__FILELINE__);  


   std::string e1=db_ergebnis;
   std::string e2=db_ergebnis2;
   float fac;
   if (Typ2.Short()!="")
    { if      (e1=="G" || e2=="G") fac = 0.5;
      else if (e1=="S" && e2=="S") fac = 1.0;
      else fac = 5.0;
     }   
   else
    { if (e1=="G") fac = 0.5;
      else if (e1=="S") fac = 1.0;
      else fac = 5.0;
     }   
   return(fac);
}
