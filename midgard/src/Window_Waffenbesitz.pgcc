/*  Midgard Character Generator
 *  Copyright (C) 2001 Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

// generated 2001/3/14 8:34:43 CET by thoma@ig23.
// using glademm V0.5_11f_cvs
//
// newer (non customized) versions of this file go to Window_Waffenbesitz.cc_new

// This file is for your program, I won't touch it again!

#include "config.h"
#include "Window_Waffenbesitz.hh"
#include "Window_mag_bonus.hh"
#include "midgard_CG.hh"
#include <Aux/Transaction.h>
#include <Aux/SQLerror.h>
#include <Gtk_OStream.h>
exec sql include sqlca;

void Window_Waffenbesitz::on_clist_waffe_alt_select_row(gint row, gint column, GdkEvent *event)
{   
  std::string waffe = clist_waffe_alt->get_text(row,0);
  memwaffe=row;
  int count=0;
  for (std::vector<H_Data_waffen>::iterator i=Waffe_Besitz.begin();
         i!=Waffe_Besitz.end();++i)
   { 
     if (((*i)->Region()) !="") waffe = hauptfenster->get_region_waffen(waffe,(*i)->Region(),2);
     if (count==memwaffe &&  mag_bonus_bool) {manage (new Window_mag_bonus(this,*i)); break;}
     if (count==memwaffe && !mag_bonus_bool) {Waffe_Besitz.erase(i);break;} 
     ++count;
   }
  hauptfenster->on_speichern_clicked();
  show_alte_waffen();   
  show_neue_waffen();   
}

void Window_Waffenbesitz::on_clist_waffe_neu_select_row(gint row, gint column, GdkEvent *event)
{   
 std::string waffe = clist_waffe_neu->get_text(row,0);
 std::string region = clist_waffe_neu->get_text(row,2);
 if (region!="") 
   { std::string wwaffe = hauptfenster->get_region_waffen(waffe,region,2);
     Waffe_Besitz.push_back(new Data_waffen(wwaffe,waffe,region,0,0,""));
   }
 if (region=="") 
     Waffe_Besitz.push_back(new Data_waffen(waffe,waffe,region,0,0,""));
  hauptfenster->on_speichern_clicked();
  show_alte_waffen();   
  show_neue_waffen();   
}

Window_Waffenbesitz::Window_Waffenbesitz(midgard_CG* h,
      std::vector<H_Data_waffen>& vw,std::vector<H_Data_waffen>& wb,Grundwerte& We )
: vec_Waffen(vw), Waffe_Besitz(wb), Werte(We)
{
  mag_bonus_bool=false;
  hauptfenster=h;
  hauptfenster->on_speichern_clicked();
  show_alte_waffen();   
  show_neue_waffen();   
}

void Window_Waffenbesitz::on_button_close_clicked()
{
   destroy();
}


void  Window_Waffenbesitz::show_alte_waffen()
{
  clist_waffe_alt->clear();
  Gtk::OStream os(clist_waffe_alt);  
  for (std::vector<H_Data_waffen>::const_iterator i=Waffe_Besitz.begin();
            i!=Waffe_Besitz.end();++i)
   {
     std::string schaden=hauptfenster->waffe_werte((*i),Werte,"Schaden");
     std::string bonus= "("+itos((*i)->av_Bonus())+"/"+itos((*i)->sl_Bonus())+")";
     if ((*i)->Magisch()=="")   bonus = "";
     if ((*i)->Region()=="")
        os << (*i)->Name() <<"\t"<<schaden<<"\t"<<bonus<<"\n";
     else
      {
        os << (*i)->Alias() <<"\t"<<schaden<<"\t"<<bonus<<"\n";
      }
   }
  for (unsigned int i=0;i<clist_waffe_alt->columns().size();++i)
   clist_waffe_neu->set_column_auto_resize(i,true);
}

void  Window_Waffenbesitz::show_neue_waffen()
{
  clist_waffe_neu->clear();
  exec sql begin declare section;
   char db_waffe[50];
   char db_name[50] ;
   char db_version[50] ;
   char db_region[10];
   char db_alias[50];
  exec sql end declare section;
  strncpy(db_name,(Werte.Name_Charakter()).c_str(),sizeof(db_name));
  strncpy(db_version,(Werte.Version()).c_str(),sizeof(db_version));

  exec sql declare ein cursor for 
     SELECT distinct w.name from waffen w, charaktere_fertigkeiten c 
     where w.name = c.fertigkeit and c.charakter_name = :db_name
     and c.version = :db_version
     and w.name not in 
     (select fertigkeit from charaktere_fertigkeiten 
      where charakter_name = :db_name and version = :db_version
      and art = 'Besitz_W' and magisch = '');
  Transaction tr;
  exec sql open ein;
  SQLerror::test(__FILELINE__);
  Gtk::OStream os(clist_waffe_neu);
  while(true)
   {
     exec sql fetch ein into :db_waffe;
     SQLerror::test(__FILELINE__,100);
     if (sqlca.sqlcode) break;
     std::string schaden=hauptfenster->waffe_werte(new Data_waffen(db_waffe,db_waffe,"",0,0,""),Werte,"Schaden");
     std::string waffe=db_waffe;
     if (waffe!="waffenloser Kampf" )
        os << db_waffe<<"\t"<<schaden<<"\n";

     // Aliasnamen für Waffen aus anderen Regionen
     exec sql declare alias_ein cursor for 
      select alias,region from waffen_region_name
      where name = :db_waffe; 
      exec sql open alias_ein;     
     SQLerror::test(__FILELINE__);
     std::vector<string> aliaswaffen;
     std::vector<string> aliasregion;
     while(true)
      {
        exec sql fetch alias_ein into :db_alias, :db_region ;
        SQLerror::test(__FILELINE__,100);
        if (sqlca.sqlcode) break;
        aliaswaffen.push_back(db_alias);     
        aliasregion.push_back(db_region);     
      }
     exec sql close alias_ein;
     for (unsigned int i=0;i<aliaswaffen.size();++i)
      {
        if (hauptfenster->region_check(aliasregion[i]))
           os << aliaswaffen[i]<<"\t"<<schaden<<"\t"<<db_region<<"\n";
      }
   }
  exec sql close ein;
  tr.close();
  for (unsigned int i=0;i<clist_waffe_neu->columns().size();++i)
   clist_waffe_neu->set_column_auto_resize(i,true);
}

void Window_Waffenbesitz::on_checkbutton_mag_waffenbonus_toggled()
{
  if (checkbutton_mag_waffenbonus->get_active()) mag_bonus_bool=true;
  else mag_bonus_bool= false;
}

void Window_Waffenbesitz::mag_boni_uebernehmen(H_Data_waffen& wa)
{
  int count=0; 
  for (std::vector<H_Data_waffen>::iterator i=Waffe_Besitz.begin();
         i!=Waffe_Besitz.end();++i)
     if (count++ == memwaffe) (*i)=wa;
  Window_Waffenbesitz::show_alte_waffen();
  Window_Waffenbesitz::show_neue_waffen();
}
