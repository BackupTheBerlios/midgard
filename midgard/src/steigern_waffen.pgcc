/*  Midgard Character Generator
 *  Copyright (C) 2001 Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include "midgard_CG.hh"
#include <Aux/Transaction.h>
#include <Aux/SQLerror.h>
exec sql include sqlca;
#include <cstring>
//#include <algorithm>
#include <Aux/EntryValueIntString.h>
#include <Aux/EntryValueEmptyInt.h>
#include "zufall.h"


void midgard_CG::on_waffen_laden_clicked()
{
   midgard_CG::on_speichern_clicked();
   midgard_CG::show_alte_grund();
   midgard_CG::show_neue_grund();
   midgard_CG::show_alte_waffen();
   midgard_CG::show_neue_waffen();
}


void midgard_CG::on_leaf_selected_alte_grund(cH_RowDataBase d)
{  const Data_grund *dt=dynamic_cast<const Data_grund*>(&*d);
   on_steigern_grund_tree_alt_select(dt->Name());
}


void midgard_CG::show_alte_grund()
{
   std::vector<cH_RowDataBase> datavec;
 for (map<std::string,string>::const_iterator i=waffen_grundkenntnisse.begin();
      i!=waffen_grundkenntnisse.end();++i)
   {
      datavec.push_back(new Data_grund(i->first));
   }
 alte_grund_tree->setDataVec(datavec);
}


void midgard_CG::on_leaf_selected_alte_waffen(cH_RowDataBase d)
{  const Data_waffen *dt=dynamic_cast<const Data_waffen*>(&*d);
   on_steigern_waffen_tree_alt_select(dt->Name(),dt->Erfolgswert(),dt->Steigern(),
      dt->Reduzieren());
}


void midgard_CG::show_alte_waffen()
{
   std::vector<cH_RowDataBase> datavec;
   for (std::vector<H_Data_waffen>::const_iterator i=vec_Waffen.begin();
            i!=vec_Waffen.end();++i)
      {
         exec sql begin declare section;
            char db_alter_erfolgswert[10];
            char db_neuer_erfolgswert[10];
            int db_schwierigkeit;
            int db_erfolgsfaktor_s;
            int db_erfolgsfaktor_r;
            char db_waffe[50];
            char query[256];
         exec sql end declare section;
         strncpy(db_waffe,((*i)->Name()).c_str(),sizeof(db_waffe));
         std::string ae = "p";  ae += itos((*i)->Erfolgswert());
         std::string ne = "p";  ne += itos((*i)->Erfolgswert()+1);
         strncpy(db_neuer_erfolgswert, ne.c_str(), sizeof(db_neuer_erfolgswert));
         strncpy(db_alter_erfolgswert, ae.c_str(), sizeof(db_alter_erfolgswert));
         snprintf(query,sizeof(query),"SELECT w.schwierigkeit, \
coalesce(s.%s,0), coalesce(s.%s,0) FROM waffen w, waffen_steigern s WHERE w.art = s.name AND \
w.name = '%s'",
db_alter_erfolgswert,db_neuer_erfolgswert,db_waffe);

         Transaction tr;
         exec sql prepare w_ein_ from :query;
         exec sql declare w_ein cursor for w_ein_;
         exec sql open w_ein;
         exec sql fetch w_ein into :db_schwierigkeit, 
            :db_erfolgsfaktor_r, :db_erfolgsfaktor_s;
         SQLerror::test(__FILELINE__);
         exec sql close w_ein;
         tr.close();
         
         double fac = midgard_CG::get_standard_waffen(Typ.Short(),Typ2.Short(),(*i)->Name());
         int kosten_steigern = db_schwierigkeit*db_erfolgsfaktor_s*fac;
         int kosten_reduzieren = db_schwierigkeit*db_erfolgsfaktor_r*fac;
         datavec.push_back(new Data_waffen((*i)->Name(),(*i)->Erfolgswert(),
            kosten_steigern,kosten_reduzieren));
      }
   alte_waffen_tree->setDataVec(datavec);
}



void midgard_CG::on_leaf_selected_neue_grund(cH_RowDataBase d)
{  const Data_grund *dt=dynamic_cast<const Data_grund*>(&*d);
   on_steigern_grund_tree_neu_select(dt->Name(),dt->Kosten());
}


void midgard_CG::show_neue_grund()
{
  std::vector<cH_RowDataBase> datavec;
  exec sql begin declare section;
   char db_name[50], db_region[10];
   int db_fp;
   char db_cname[50],db_version[50];
   char db_spezies[50];
  exec sql end declare section;
  strncpy(db_cname,(Werte.Name_Charakter()).c_str(),sizeof(db_cname));
  strncpy(db_version,(Werte.Version()).c_str(),sizeof(db_version));
  strncpy(db_spezies,(Werte.Spezies()).c_str(),sizeof(db_spezies));
  Transaction tr;  
  exec sql declare grund_ein cursor for 
   SELECT name, fp, coalesce(region,'') from waffen_grund 
   WHERE  name NOT IN (SELECT fertigkeit FROM charaktere_fertigkeiten 
   WHERE art = 'Grundkenntnis' 
   AND charakter_name = :db_cname AND version = :db_version) 
   AND name  not in (select verboten from pflicht_lernen where typ=:db_spezies
    and verboten is not null) order by name;
  SQLerror::test(__FILELINE__);
 exec sql open grund_ein;
  while (true)
   {
      exec sql fetch grund_ein into :db_name, :db_fp, :db_region ;
      SQLerror::test(__FILELINE__,100);  
      if (sqlca.sqlcode) break;

      double fac = midgard_CG::get_standard_waffen(Typ.Short(),Typ2.Short(),db_name);
      if (midgard_CG::region_check(db_region))
         datavec.push_back(new Data_grund(db_name,db_fp*fac));
   }
 exec sql close grund_ein;
 tr.close();
 neue_grund_tree->setDataVec(datavec);
}

void midgard_CG::on_leaf_selected_neue_waffen(cH_RowDataBase d)
{  const Data_waffen *dt=dynamic_cast<const Data_waffen*>(&*d);
   on_steigern_waffen_tree_neu_select(dt->Name(),dt->Erfolgswert());
}
 

void midgard_CG::show_neue_waffen()
{
   std::vector<cH_RowDataBase> datavec;
   exec sql begin declare section;
      char db_waffe[50];
      char db_art[50];
      char db_zusatz[50];
      char query[1024];
      char db_region[10];
   exec sql end declare section;
   snprintf(query,sizeof(query),"SELECT w.name, w.art, coalesce(w.zusatz,''), \
   coalesce(w.region,'') FROM  waffen w, \
   charaktere_fertigkeiten c WHERE  w.grundkenntnisse = c.fertigkeit \
   AND c.charakter_name = '%s' AND w.name NOT IN \
   (SELECT fertigkeit FROM charaktere_fertigkeiten WHERE art = 'Waffe' \
   AND charakter_name = '%s' AND version = '%s') \
   AND w.name  not in (select verboten from pflicht_lernen where typ='%s' \
    and verboten is not null) AND  grundkenntnisse not in \
    (select verboten from pflicht_lernen where typ='%s' and verboten is not null)",
   (Werte.Name_Charakter()).c_str(),(Werte.Name_Charakter()).c_str(),
      (Werte.Version()).c_str(),(Werte.Spezies()).c_str(),(Werte.Spezies()).c_str());
   Transaction tr;
   exec sql prepare wa_ein_ from :query;
   exec sql declare wa_ein cursor for wa_ein_;
   exec sql open wa_ein;
   SQLerror::test(__FILELINE__);
   while(true)
      {
         exec sql fetch wa_ein into :db_waffe, :db_art, :db_zusatz, :db_region;
         SQLerror::test(__FILELINE__,100);
         if (sqlca.sqlcode) break;
         int wert=4;
         if (!strcmp(db_art,"Verteidigung")) wert = 1;
         if  (midgard_CG::Waffen_Voraussetzung(db_waffe)
            &&midgard_CG::region_check(db_region))
         datavec.push_back(new Data_waffen(db_waffe,wert,db_zusatz));
      }
   exec sql close wa_ein;
   tr.close();
   neue_waffen_tree->setDataVec(datavec);
}


void midgard_CG::on_steigern_grund_tree_neu_select(const std::string& name, int kosten)
{
  Werte.add_GFP(kosten);
  midgard_CG::zeige_werte(Werte);

  waffen_grundkenntnisse[name] = "X";

  midgard_CG::on_speichern_clicked();
  midgard_CG::show_alte_grund();
  midgard_CG::show_neue_grund();
  midgard_CG::show_alte_waffen();
  midgard_CG::show_neue_waffen();
}

void midgard_CG::on_steigern_grund_tree_alt_select(const std::string& name)
{
 if (radiobutton_grundkenntnisse_verlernen->get_active())
   {
      radiobutton_grundkenntnisse_verlernen->set_active(false);
      for (map<std::string,string>::iterator i=waffen_grundkenntnisse.begin();
            i!= waffen_grundkenntnisse.end();++i) 
         if (i->first==name) {waffen_grundkenntnisse.erase(i);break;}
   }
  std::string strinfo="WARNUNG: Beim verlernen von Grundkenntnissen werden weder die\n";
  strinfo +="GFP angepaßt, noch die bereits gelernten Waffen, die zu dieser\n";
  strinfo +="Grundkenntnis gehöhren, verlernt\n";
  WindowInfo(strinfo,true);
  midgard_CG::on_speichern_clicked();
  midgard_CG::show_alte_grund();
  midgard_CG::show_neue_grund();
}



void midgard_CG::on_steigern_waffen_tree_alt_select(const std::string& waffe, int erfolgswert, int steigern, int reduzieren)
{
   if (radio_waffen_steigern->get_active())
      {
       if (!togglebutton_praxispunkte_waffen->get_active()) // normal Lernen
        {
          int maxwert;
          // Angriff oder Verteidigungswaffe?
          exec sql begin declare section ;
            char db_name[30], db_art[30];
          exec sql end declare section;
          strncpy(db_name,waffe.c_str(),sizeof(db_name));
          exec sql select art into :db_art from waffen where name = :db_name ;
          SQLerror::test(__FILELINE__);
          std::string art = db_art;
          if (art == "Angriff" || art == "Fern" )
            {
             maxwert = 17;
             if ((Typ.Short() == "Kr" || Typ.Short() == "Sö") && Typ2.Short()=="") maxwert = 19;
             if (Typ.Zaubern() == "z" && Typ2.Zaubern() == "z") maxwert = 14;
            }
          if (art == "Verteidigung")
            {
             maxwert = 7;
             if ((Typ.Short() == "Kr" || Typ.Short() == "Sö") && Typ2.Short()=="") maxwert = 8;
             if (Typ.Zaubern() == "z" && Typ2.Zaubern() == "z") maxwert = 6;
            }
          if (erfolgswert >=maxwert) 
            {  
               std::string strinfo = "Maximal möglicher Erfolgswert erreicht\n";
               manage (new WindowInfo(strinfo));
               return ;
            }          
          Werte.add_GFP(steigern);
          if (steigern != 0)
          for (std::vector<H_Data_waffen>::const_iterator i=vec_Waffen.begin();
             i!=vec_Waffen.end();++i)
               if ((*i)->Name()==waffe) (*i)->set_Erfolgswert((*i)->Erfolgswert()+1);
        }
       else // steigern mit Praxispunkten
        {
          bool wuerfeln;
          if (radiobutton_praxis_auto_waffen->get_active())     wuerfeln = false;
          if (radiobutton_praxis_wuerfeln_waffen->get_active()) wuerfeln = true;

          std::string art="Waffe";
          int gelungen = midgard_CG::praxispunkte_wuerfeln(waffe,erfolgswert,art,wuerfeln);
          if (gelungen)
            {
              Werte.add_GFP(steigern);
//              if (steigern != 0)
              for (std::vector<H_Data_waffen>::const_iterator i=vec_Waffen.begin();
                i!=vec_Waffen.end();++i)
                  if ((*i)->Name()==waffe) (*i)->set_Erfolgswert((*i)->Erfolgswert()+1);
            }
        }
      }
   if (radio_waffen_reduzieren->get_active())
      {
        Werte.add_GFP(-reduzieren);
        if (reduzieren != 0)
        for (std::vector<H_Data_waffen>::iterator i=vec_Waffen.begin();
           i!=vec_Waffen.end();++i)
              if ((*i)->Name()==waffe) (*i)->set_Erfolgswert((*i)->Erfolgswert()-1);  
      }
   midgard_CG::zeige_werte(Werte);
   midgard_CG::on_speichern_clicked();
   midgard_CG::show_alte_waffen();
   midgard_CG::show_neue_waffen();
}


void midgard_CG::on_steigern_waffen_tree_neu_select(const std::string&  name, int erfolgswert)
{
//   int new_kosten = atoi(steigern_waffen_clist_neu->get_text(row,2).c_str());
//   werte.gfp += kosten;
//   midgard_CG::zeige_werte(werte);
//   std::string new_fert = steigern_waffen_clist_neu->get_text(row,0);
//   int erf = atoi(steigern_waffen_clist_neu->get_text(row,1).c_str());
   vec_Waffen.push_back(new Data_waffen(name,erfolgswert,""));   
   midgard_CG::on_speichern_clicked();
   midgard_CG::show_alte_waffen();
   midgard_CG::show_neue_waffen();
}



void midgard_CG::on_radio_waffen_steigern_toggled()
{   
}

void midgard_CG::on_radio_waffen_reduzieren_toggled()
{   
   if (radio_waffen_reduzieren->get_active())
      togglebutton_praxispunkte_waffen->set_active(false);
}

void midgard_CG::on_togglebutton_praxispunkte_waffen_toggled()
{   
   if (togglebutton_praxispunkte_waffen->get_active()) 
      radio_waffen_steigern->set_active(true);
}

void midgard_CG::on_radiobutton_praxis_wuerfeln_waffen_toggled()
{   
}

void midgard_CG::on_radiobutton_praxis_auto_waffen_toggled()
{   
}


bool midgard_CG::Waffen_Voraussetzung(const std::string& waffe)
{
  exec sql begin declare section;
   int db_st,db_ge;
   char db_waffe[30], db_zusatz[30];
  exec sql end declare section;
  strncpy(db_waffe,waffe.c_str(),sizeof(db_waffe));

  exec sql select distinct coalesce(st,'0'), coalesce(ge,'0'),
   coalesce(zusatz,'')
   into :db_st,:db_ge,:db_zusatz
   from waffen where name= :db_waffe;
  SQLerror::test(__FILELINE__);
  if ( db_st<=Werte.St() && db_ge<=Werte.Ge() ) return true;
  else return false ;
}


void midgard_CG::on_button_waffen_sort_clicked()
{
  std::deque<guint> seq = alte_waffen_tree->get_seq();
  std::vector<H_Data_waffen>::iterator IB=vec_Waffen.begin();
  std::vector<H_Data_waffen>::iterator IE=vec_Waffen.end();  
  switch((Data_waffen::Spalten_A)seq[0]) {
      case Data_waffen::WERTa : sort(IB,IE,Data_waffen_sort_wert()); ;break;
      case Data_waffen::NAMEa        : sort(IB,IE,Data_waffen_sort_name()); ;break;
      default : manage(new WindowInfo("Sortieren nach diesem Parameter\n ist nicht möglich"));
   }
}
