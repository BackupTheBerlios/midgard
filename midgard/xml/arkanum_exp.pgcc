// $Id: arkanum_exp.pgcc,v 1.1 2001/11/02 12:52:20 christof Exp $
/*  Midgard Roleplaying Character Generator
 *  Copyright (C) 2001 Christof Petig
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include <fstream>
#include <Aux/Transaction.h>
#include <Aux/dbconnect.h>
exec sql include sqlca;
#include "export_common.h"

void arkanum_speichern(std::ostream &o)
{  
   Transaction t;
   exec sql allocate descriptor spalten;
   exec sql declare c cursor for
   	select name, region, stufe, kosten, ap, art, 
   	ursprung, agens, prozess, reagens,
   	zauberdauer, reichweite, wirkungsziel, wirkungsbereich,
   	wirkungsdauer, material, /* spruchrolle, thaumagram, */
   	/* effekt[2] ??? */
   	zauberart, p_element, s_element
   	from arkanum_zauber
   	order by region,name;
   exec sql open c;
   SQLerror::test(__FILELINE__);
  while (true)
  {exec sql fetch c into sql descriptor spalten;
   SQLerror::test(__FILELINE__);
   FetchIStream is("spalten");
   o << "  <Spruch";
   fetch_and_write_string_attrib(is, o, "Name");
   fetch_and_write_string_attrib(is, o, "Region");
   fetch_and_write_string_attrib(is, o, "Grad");
   fetch_and_write_int_attrib(is, o, "Lernkosten");
   fetch_and_write_string_attrib(is, o, "AP");
   fetch_and_write_string_attrib(is, o, "Typ");
   fetch_and_write_string_attrib(is, o, "Ursprung");
   fetch_and_write_string_attrib(is, o, "Agens");
   fetch_and_write_string_attrib(is, o, "Prozess");
   fetch_and_write_string_attrib(is, o, "Reagens");
   fetch_and_write_string_attrib(is, o, "Zauberdauer");
   fetch_and_write_string_attrib(is, o, "Reichweite");
   fetch_and_write_string_attrib(is, o, "Wirkungsziel");
   fetch_and_write_string_attrib(is, o, "Wirkungsbereich");
   fetch_and_write_string_attrib(is, o, "Wirkungsdauer");
   fetch_and_write_string_attrib(is, o, "Material");
   fetch_and_write_string_attrib(is, o, "Zauberart");
   fetch_and_write_string_attrib(is, o, "Primärelement");
   fetch_and_write_string_attrib(is, o, "Sekundärelement");

   o << "/" ">\n";
//   o << "  </Spruch>\n";
  }
   exec sql close c;
   SQLerror::test(__FILELINE__);
   
   exec sql deallocate descriptor spalten;
}

// wegen eines bugs in epcg <=V6.1
#define GARNIX 

int main(int argc, char *argv[])
{  
   try{
      Petig::Connection conn;
      conn.setDbase("midgard");
      Petig::dbconnect(conn);

   std::cout << "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n\n";
   arkanum_speichern(std::cout);
   Petig::dbdisconnect();
   } catch (SQLerror &e)
   {  std::cerr << e << '\n';
   }
   return 0;
}
