/*  Midgard Character Generator
 *  Copyright (C) 2001 Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include "midgard_CG.hh"
#include <Aux/Transaction.h>
#include <Aux/SQLerror.h>
#include <Gtk_OStream.h>
exec sql include sqlca;
int swk(vector<st_ausgewaehlte_waffen>& vec_waffen);


string midgard_CG::waffe_werte(const st_waffen_besitz& waffe,const st_werte& werte, const string& mod)
{
  exec sql begin declare section;
   char db_waffe[50];
   char db_art[50];
   char db_s1[50] ;
   int  db_sb ;
   char db_angriffsrangmod[10], db_wm_abwehr_leicht[10], db_wm_abwehr_schwer[10];
  exec sql end declare section;
  strncpy(db_waffe,waffe.name.c_str(),sizeof(db_waffe));
  exec sql select coalesce(schaden,''), coalesce(schaden_b,0),
      art, coalesce(angriffsrangmod,''), coalesce(wm_abwehr_leicht,''),
      coalesce(wm_abwehr_schwer,'')
      into :db_s1, :db_sb, :db_art, :db_angriffsrangmod,
            :db_wm_abwehr_leicht, :db_wm_abwehr_schwer
      from waffen where name = :db_waffe;
  SQLerror::test(__FILELINE__);
  string art=db_art;
  if (mod=="Verteidigung")
   {
      if (art=="Verteidigung") return "true";
      else return "false";
   }
  if (mod=="Angriffsrangmodifikation")
   {
      string anm = db_angriffsrangmod;
      return anm;
   }
  if (mod=="WM_Abwehr")
   {
      string abl = db_wm_abwehr_leicht;
      string abs = db_wm_abwehr_schwer;
      if (abl==""&&abs=="") return "";
      else return abl+"$|$"+abs;
   }
  if (mod=="Angriffsrangmodifikation")
   {
      string ret = db_angriffsrangmod;
      return ret;
   }
  if (mod=="Schaden" || mod=="Schaden+mag_Bonus")
   {
     if (art=="Verteidigung") return "-"+itos(db_sb)+"AP"; /* doppeltes Minus wg. LaTeX Ausdruck */
     string schaden = db_s1;
     if (schaden=="0") return "";
     if (waffe.name=="waffenloser Kampf") {schaden="W6"; db_sb=swk(vec_waffen);}

     int ibonus = db_sb;
     if (art!="Fern") ibonus+=werte.bo_sc;
     if (mod=="Schaden+mag_Bonus")
      {  ibonus += waffe.sl_bonus;
         if (waffe.sl_bonus ==-5 && waffe.av_bonus ==-5) ibonus -= waffe.sl_bonus; 
      }
     if (ibonus < 0 ) schaden += "-"+itos(ibonus); /* doppeltes Minus für LaTeX Ausdruck */
     if (ibonus == 0 ) schaden += "";
     if (ibonus > 0 ) schaden += "+"+itos(ibonus);
     return schaden;
   }
}

int swk(vector<st_ausgewaehlte_waffen>& vec_waffen) 
/*Schaden für waffenlosen Kampf*/
{
   int wert = 4;
   for (vector<st_ausgewaehlte_waffen>::const_iterator i=vec_waffen.begin();
         i!=vec_waffen.end();++i)
     if (i->name == "waffenloser Kampf") 
      { wert=i->erfolgswert; break;}

   int bo ;
   if ( 4<=wert && wert <= 7) bo=-4;
   if ( 8<=wert && wert <=11) bo=-3;
   if (12<=wert && wert <=15) bo=-2;
   if (16<=wert) bo=-1;
   return bo;
}
