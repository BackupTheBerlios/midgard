/*  Midgard Character Generator
 *  Copyright (C) 2001 Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include "midgard_CG.hh"
#include <Aux/Transaction.h>
#include <Aux/SQLerror.h>
exec sql include sqlca;

void midgard_CG::fill_typauswahl()
{
  typen_vector.clear();
  exec sql begin declare section;
   char db_typ[50];
   char db_region[10];
   int db_typnr;
   char query[1024];
  exec sql end declare section;
  string squery = "select t.typl";
  if (werte.geschlecht=="w") squery +="w";
  squery +=",t.typnr,coalesce(t.region,'') from typen t";
  if (werte.spezies!="Mensch") 
     squery += ", spezies_typen st where t.typs = st.typen and st.spezies = '"
            + werte.spezies +"'";
  squery +="  order by typnr";

  Transaction tr;
  strncpy(query,squery.c_str(),sizeof(query));
  exec sql prepare ein_ from :query;
  exec sql declare ein cursor for ein_;
  exec sql open ein;
  SQLerror::test(__FILELINE__);
  Gtk::Menu *_m(manage(new Gtk::Menu()));
  Gtk::MenuItem *_mi;
  unsigned int count=0;
  while (true)
   {
      exec sql fetch ein into :db_typ, :db_typnr, :db_region;
      SQLerror::test(__FILELINE__,100);
      if (sqlca.sqlcode) break;   
      if (region_check(db_region))
       {
         typen_vector.push_back(st_typen(db_typnr,db_typ));
//cout << db_typnr<<"\t"<<db_typ<<"\t"<<typen_vector.size()<<"\n";
         _mi = manage(new Gtk::MenuItem(db_typ));
         _m->append(*_mi);
         _mi->show();
         _mi->set_user_data((gpointer)count);
         ++count;
       }
   }  
  typauswahl->set_menu(*_m);
  typauswahl->get_menu()->deactivate.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::typauswahl_button));
}

/*
int  fill_typauswahl_int(int i)
{
  exec sql begin declare section;
    int 
  exec sql end declare section;
}
*/

void midgard_CG::fill_spezies()
{
  spezies_vector.clear();
  exec sql begin declare section;
   char db_spezies[50];
   int db_nr;
  exec sql end declare section;
  Transaction tr;
  exec sql declare ein_r cursor for 
      select nr,spezies from spezies order by nr ;
  exec sql open ein_r;
  SQLerror::test(__FILELINE__);
  Gtk::Menu *_m(manage(new Gtk::Menu()));
  Gtk::MenuItem *_mi;
  while (true)
   {
      exec sql fetch ein_r into :db_nr, :db_spezies;
      SQLerror::test(__FILELINE__,100);
      if (sqlca.sqlcode) break;   
      spezies_vector.push_back(db_spezies);
      _mi = manage(new Gtk::MenuItem(db_spezies));
      _m->append(*_mi);
      _mi->show();
      _mi->set_user_data((gpointer)db_nr);
    }
  optionmenu_spezies->set_menu(*_m);
  optionmenu_spezies->get_menu()->deactivate.connect(SigC::slot(static_cast<class midgard_CG*>(this), &midgard_CG::spezieswahl_button));
}

