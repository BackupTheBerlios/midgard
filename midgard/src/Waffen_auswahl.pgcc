// generated 2001/2/10 15:15:14 CET by thoma@ig23.
// using glademm V0.5_11c
//
// newer (non customized) versions of this file go to Waffen_auswahl.cc_new

// This file is for your program, I won't touch it again!

#include "Waffen_auswahl.hh"
#include <Aux/Transaction.h>
#include <Aux/SQLerror.h>
exec sql include sqlca;
#include "midgard_CG.hh"
#include <cstring>
#include <Gtk_OStream.h>


Waffen_auswahl::Waffen_auswahl(midgard_CG* h,const string& typ, st_lernpunkte& l)
{
  hauptfenster=h;
  maxpunkte = l.waffen;
  waffen_auswahl_lernpunkte->set_text(itos(maxpunkte));
  exec sql begin declare section;
   char db_typ[5];
   char db_art[100];
   int db_lernpunkte;
   char db_fertigkeiten[100];
   int db_erfolgswert;
   char db_grund[100];
  exec sql end declare section;
   strncpy(db_typ,typ.c_str(),sizeof(db_typ));
   
   Transaction tr;
    exec sql declare waffen cursor for
      select fertigkeit, l.art, wert, lernpunkte, grundkenntnisse
      from lernschema l, waffen w where typ = :db_typ
      and l.art = 'Waffe' and w.name = l.fertigkeit
      order by lernpunkte ;

    exec sql open waffen;
    SQLerror::test(__FILELINE__);
    while (true)
      {
         exec sql fetch waffen into :db_fertigkeiten, :db_art,
            :db_erfolgswert, :db_lernpunkte, :db_grund ;
         SQLerror::test(__FILELINE__,100);
         if (sqlca.sqlcode) break;
         waffe.push_back(db_struct_waffe(db_lernpunkte,db_fertigkeiten,db_erfolgswert,db_grund));
      }
    exec sql close waffen;
    Gtk::OStream os(waffen_clist_auswahl);
    for(vector<db_struct_waffe>::iterator i=waffe.begin();i!=waffe.end();++i)
      {
         os << i->lernpunkte <<"\t"<< i->waffe <<"\t"<< i->erfolgswert 
               <<"\t"<<i->grundkenntnisse<<"\n";
         os.flush(&*i);
      }
    for (unsigned int i=0;i<waffen_clist_auswahl->columns().size();++i)
      waffen_clist_auswahl->set_column_auto_resize(i,true);

    waffen_clist_auswahl->set_selection_mode(GTK_SELECTION_MULTIPLE);
    waffen_clist_auswahl->set_reorderable(true);

}

void Waffen_auswahl::on_waffen_clist_auswahl_select_row(gint row, gint column, GdkEvent *event)
{   
   if (maxpunkte < atoi(waffen_clist_auswahl->get_text(row,0).c_str() ))
      {
         waffen_clist_auswahl->row(row).unselect();
      }
   maxpunkte -= atoi(waffen_clist_auswahl->get_text(row,0).c_str());
   waffen_auswahl_lernpunkte->set_text(itos(maxpunkte));
   string grund = waffen_clist_auswahl->get_text(row,3);
   waffen_grundkenntnisse[grund] = "X";
}

void Waffen_auswahl::on_waffen_clist_auswahl_unselect_row(gint row, gint column, GdkEvent *event)
{   
   maxpunkte += atoi(waffen_clist_auswahl->get_text(row,0).c_str());
   waffen_auswahl_lernpunkte->set_text(itos(maxpunkte));
}

void Waffen_auswahl::on_close_waffen_clicked()
{   
   vector<st_ausgewaelte_waffen> saw;
   for (Gtk::CList::SelectionList::iterator i=waffen_clist_auswahl->selection().begin();
         i!=waffen_clist_auswahl->selection().end();++i)
     {  
      db_struct_waffe *ptr
         =static_cast<db_struct_waffe*>(i->get_data());
         // ptr=&fert[i->get_row_num()];
//       cout << ptr ->waffe << ' ' << ptr -> erfolgswert << '\n';
       saw.push_back(st_ausgewaelte_waffen(ptr->waffe,
                        ptr->erfolgswert ));
     }
  hauptfenster->waffen_uebernehmen(saw,waffen_grundkenntnisse);
  destroy();

}
