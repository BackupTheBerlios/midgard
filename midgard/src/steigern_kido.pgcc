/*  Midgard Character Generator
 *  Copyright (C) 2001 Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include "midgard_CG.hh"
#include <Aux/Transaction.h>
#include <Aux/SQLerror.h>
exec sql include sqlca;
#include <cstring>
//#include <strstream>
#include "WindowInfo.hh"
#include <Aux/EntryValueIntString.h>
#include <Aux/EntryValueEmptyInt.h> 

#ifdef __MINGW32__
extern "C" { int snprintf(char *str, size_t size, const  char  *format, ...); }
#endif


void midgard_CG::on_kido_laden_clicked()
{   
  vec_Kido_neu.clear();
  exec sql begin declare section;
   char db_hoho[50];
   char query[1024];
  exec sql end declare section;
  std::string stufe_constraint ="";

  // Stufe
  if (Werte.Grad()<=4 || get_erfolgswert_kido()+Werte.bo_Za() <=15)
      stufe_constraint += " and stufe != 'Eingeweihter' ";
  if (Werte.Grad()<=6 || get_erfolgswert_kido()+Werte.bo_Za() <=18)
      stufe_constraint += " and stufe != 'Meister' ";
  // Stil
  if (Werte.Spezialisierung()=="Harte Techniken")
      stufe_constraint += " and stil != 'Sanfte Techniken' ";
  if (Werte.Spezialisierung()=="Sanfte Techniken")
      stufe_constraint += " and stil != 'Harte Techniken' ";
  // Maximale mögliche Techniken einer Stufe erreicht
  if (Werte.Spezialisierung()=="Harte Techniken" || Werte.Spezialisierung()=="Sanfte Techniken")
   {
     if (maxkidostil("Schüler") >= 12 )
         stufe_constraint += " and stufe != 'Schüler' ";
     if (maxkidostil("Eingeweihter") >= 7 )
         stufe_constraint += " and stufe != 'Eingeweihter' ";
     if (maxkidostil("Meister") >= 3 )
         stufe_constraint += " and stufe != 'Meister' ";
   }
  else
   {
     if (maxkidostil("Schüler") >= 11 )
         stufe_constraint += " and stufe != 'Schüler' ";
     if (maxkidostil("Eingeweihter") >= 6 )
         stufe_constraint += " and stufe != 'Eingeweihter' ";
     if (maxkidostil("Meister") >= 2 )
         stufe_constraint += " and stufe != 'Meister' ";
   }

  std::string squery = "SELECT name_orig from kido \
   where name_orig not in (SELECT fertigkeit FROM charaktere_fertigkeiten \
   WHERE charakter_name = '"+Werte.Name_Charakter()+"' AND version = '"+
   Werte.Version()+"') "+stufe_constraint+"order by 1";

  snprintf(query,sizeof(query),squery.c_str());
  Transaction tr;
  exec sql prepare kido_ein_ from :query ;
  exec sql declare kido_ein cursor for kido_ein_ ;
  exec sql open kido_ein;
  SQLerror::test(__FILELINE__);
  while (true)
    {
       exec sql fetch kido_ein into :db_hoho;
         SQLerror::test(__FILELINE__,100);  
         if (sqlca.sqlcode) break;
         vec_Kido_neu.push_back(new Data_kido(db_hoho));
      }
   exec sql close kido_ein;
   tr.commit();
  midgard_CG::get_kido(vec_Kido_neu);
}

void midgard_CG::kido_zeigen()
{
 midgard_CG::zeige_werte(Werte);
 midgard_CG::on_speichern_clicked();
 midgard_CG::show_alte_kido();
 midgard_CG::show_neue_kido();
}

void midgard_CG::on_leaf_selected_alte_kido(cH_RowDataBase d)
{  const Data_kido *dt=dynamic_cast<const Data_kido*>(&*d);
   on_steigern_kido_tree_alt_select(dt->Hoho(),dt->Kosten());
}
void midgard_CG::on_leaf_selected_neue_kido(cH_RowDataBase d)
{  const Data_kido *dt=dynamic_cast<const Data_kido*>(&*d);
   on_steigern_kido_tree_neu_select(dt->Hoho(),dt->Kosten());
}


void midgard_CG::on_button_kido_sort_clicked()
{
  std::deque<guint> seq = alte_kido_tree->get_seq();
  switch((Data_kido::Spalten_A)seq[0]) {
      case Data_kido::HOHOa  : vec_Kido.sort(Data_kido_sort_hoho()); ;break;
      case Data_kido::NAMEa  : vec_Kido.sort(Data_kido_sort_name()); ;break;
      case Data_kido::STUFEa : vec_Kido.sort(Data_kido_sort_stufe()); ;break;
      case Data_kido::APa    : vec_Kido.sort(Data_kido_sort_ap()); ;break;
      case Data_kido::STILa  : vec_Kido.sort(Data_kido_sort_stil()); ;break;
      default : manage(new WindowInfo("Sortieren nach diesem Parameter\n ist nicht möglich"));
   }
}

void midgard_CG::show_alte_kido()
{
   std::vector<cH_RowDataBase> datavec;
   for (std::list<H_Data_kido>::iterator i=vec_Kido.begin(); i!=vec_Kido.end();++i)
      datavec.push_back(new Data_kido((*i)->Hoho(),(*i)->Name(),(*i)->Stufe(),(*i)->Ap(),(*i)->Kosten(),(*i)->Stil()));
   alte_kido_tree->setDataVec(datavec);
}

int midgard_CG::get_erfolgswert_kido()
{
 for (std::list<cH_Fertigkeit>::const_iterator
      i= list_Fertigkeiten.begin();i!=list_Fertigkeiten.end();++i)
   {
      if ((*i)->Name() == "KiDo") return (*i)->Erfolgswert(); 
   }
 // should never get here 
 std::string strinfo="WARNUNG: Dieser Charakter beherrscht die Fertigkeit KiDo nicht.";
 manage (new WindowInfo(strinfo));
 return 0; 
}

void midgard_CG::show_neue_kido()
{
  std::vector<cH_RowDataBase> datavec;
  for (std::list<H_Data_kido>::iterator i=vec_Kido_neu.begin();i!=vec_Kido_neu.end();++i)
      datavec.push_back(new Data_kido((*i)->Hoho(),(*i)->Name(),(*i)->Stufe(),(*i)->Ap(),(*i)->Kosten(),(*i)->Stil()));
  neue_kido_tree->setDataVec(datavec);
}


void midgard_CG::on_steigern_kido_tree_alt_select(const std::string& name,int kosten)
{   
   if (steigern_bool) desteigern(kosten);
   Werte.add_GFP(-kosten);
   move_kido(vec_Kido,vec_Kido_neu,name);
   kido_zeigen();
}

void midgard_CG::on_steigern_kido_tree_neu_select(const std::string& name, int kosten)
{   
  if (!steigern(kosten,"KiDo")) return;
  Werte.add_GFP(kosten);
  move_kido(vec_Kido_neu,vec_Kido,name);
  kido_zeigen();
}

void midgard_CG::move_kido(std::list<H_Data_kido>& von,std::list<H_Data_kido>& nach,std::string name)
{
 for (std::list<H_Data_kido>::iterator i=von.begin();i!= von.end();++i)
     if ((*i)->Name()==name) 
       {nach.splice(nach.begin(),von,i);break;}
}

int midgard_CG::maxkidostil(const std::string& stufe)
{
  int count=0;
  for (std::list<H_Data_kido>::const_iterator i=vec_Kido.begin();i!=vec_Kido.end();++i)
     if ((*i)->Stufe()==stufe) ++count;
  return count;
}
