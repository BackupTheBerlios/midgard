// generated 2003/2/24 21:15:27 CET by christof@puck.petig-baender.de
// using glademm V1.1.3e_cvs
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- midgard.glade
// for gtk 2.2.1 and gtkmm 2.2.0
//
// Please modify the corresponding derived classes in ./src/midgard_CG.cc

#include "config.h"
#include "midgard_CG_glade.hh"
#include <gdk/gdkkeysyms.h>
#include <gtkmm/accelgroup.h>
#include <gtkmm/button.h>
#include <gtkmm/image.h>
#include "../pixmaps/NewChar-trans-50.xpm"
#include "../pixmaps/LoadChar-trans-50.xpm"
#include "../pixmaps/SaveChar-trans-50.xpm"
#include "../pixmaps/PrintChar-trans-50.xpm"
#include "../pixmaps/Undo.xpm"
#include "../pixmaps/redo.xpm"
#include "../pixmaps/wizzard-trans-50_2.xpm"
#include "../pixmaps/Info-trans-50.xpm"
#include "../pixmaps/Help-trans-50.xpm"
#include "../pixmaps/Exit-trans-50.xpm"
#include <gtkmm/menuitem.h>
#include <gtkmm/menu.h>
#include "../pixmaps/MAGUS_Logo_Small.xpm"
#include <gtkmm/box.h>
#include <gtkmm/frame.h>
#include "../pixmaps/Grundwert_small.xpm"
#include "../pixmaps/L_Schema_small.xpm"
#include "../pixmaps/Steigern_small.xpm"
#include "../pixmaps/Descr.Char-40.xpm"
#include "../pixmaps/Ausruest_small.xpm"
#include "../pixmaps/Regio_Hausregel-50.xpm"
#include <gtkmm/viewport.h>
#include <gtkmm/adjustment.h>
#include <gtkmm/scrolledwindow.h>
#include "../pixmaps/KillChar-32.xpm"
#include <gtkmm/label.h>
#include <gtkmm/table.h>
#include "../pixmaps/NewsGeschichte.xpm"
#include "../pixmaps/Z-NewChar.xpm"
#include "../pixmaps/midgard_logo_status.xpm"
#include "../pixmaps/NSC-Mode-26.xpm"
#include "../pixmaps/MAGUS_Logo_Tiny.xpm"

midgard_CG_glade::midgard_CG_glade(
) : Gtk::Window(Gtk::WINDOW_TOPLEVEL)
{  midgard_CG = this;
   _data = new GlademmData(get_accel_group());
   toolbar_top = Gtk::manage(new class Gtk::Toolbar());
   griff_toolbar_top = Gtk::manage(new class Gtk::HandleBox());
   
   Gtk::MenuItem *neuen_abenteurer1 = NULL;
   Gtk::MenuItem *neuer_abenteurer_mit_wizard1 = NULL;
   Gtk::MenuItem *wizard_beenden = NULL;
   Gtk::MenuItem *trennlinie3 = NULL;
   Gtk::MenuItem *laden1 = NULL;
   Gtk::MenuItem *speichern1 = NULL;
   Gtk::MenuItem *speichern_unter_ = NULL;
   Gtk::MenuItem *exportieren = NULL;
   Gtk::MenuItem *exportieren_ranas_pdf_dokumente = NULL;
   Gtk::Menu *exportieren_main_menu = Gtk::manage(new class Gtk::Menu());
   Gtk::MenuItem *exportieren_main = NULL;
   Gtk::MenuItem *trennlinie1 = NULL;
   Gtk::MenuItem *abenteurerdokument = NULL;
   Gtk::MenuItem *nur_sichtbares = NULL;
   Gtk::MenuItem *unsichtbares_drucken = NULL;
   Gtk::Menu *ausr__stungsdokument_menu = Gtk::manage(new class Gtk::Menu());
   Gtk::MenuItem *ausr__stungsdokument = NULL;
   Gtk::MenuItem *beschreibung = NULL;
   Gtk::MenuItem *alles_drucken = NULL;
   Gtk::MenuItem *trennlinie4 = NULL;
   Gtk::MenuItem *leeres_abenteurerblatt = NULL;
   Gtk::MenuItem *trennlinie6 = NULL;
   Gtk::MenuItem *spielleiterbogen_drucken = NULL;
   Gtk::Menu *drucken1_menu = Gtk::manage(new class Gtk::Menu());
   Gtk::MenuItem *drucken1 = NULL;
   Gtk::MenuItem *trennlinie2 = NULL;
   Gtk::MenuItem *beenden1 = NULL;
   Gtk::MenuItem *trennlinie5 = NULL;
   Gtk::Menu *magus1_menu = Gtk::manage(new class Gtk::Menu());
   Gtk::MenuItem *magus1 = NULL;
   Gtk::MenuItem *r__ckg__ngig1 = NULL;
   Gtk::MenuItem *erneut_vorw__rts1 = NULL;
   Gtk::MenuItem *geschichte = NULL;
   Gtk::Menu *bearbeiten1_menu = Gtk::manage(new class Gtk::Menu());
   Gtk::MenuItem *bearbeiten1 = NULL;
   Gtk::MenuItem *anleitung_menu = NULL;
   Gtk::MenuItem *info_credits_menu = NULL;
   Gtk::MenuItem *news_menu = NULL;
   Gtk::Menu *hilfe1_menu = Gtk::manage(new class Gtk::Menu());
   Gtk::MenuItem *hilfe1 = NULL;
   main_menubar = Gtk::manage(new class Gtk::MenuBar());
   handlebox_menu = Gtk::manage(new class Gtk::HandleBox());
   Midgard_Info = Gtk::manage(new class Midgard_Info(_data));
   
   Glib::RefPtr<Gdk::Bitmap> _pixmap_original_tux_mask;
   Glib::RefPtr<Gdk::Pixmap> _pixmap_original_tux_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _pixmap_original_tux_mask, MAGUS_Logo_Small_xpm);
   pixmap_original_tux = Gtk::manage(new class Gtk::Image(_pixmap_original_tux_pixmap, _pixmap_original_tux_mask));
   label_notebook_info = Gtk::manage(new class Gtk::Label("Info & Credits"));
   
   Gtk::VBox *vbox66 = Gtk::manage(new class Gtk::VBox(false, 0));
   eventbox_credits = Gtk::manage(new class Gtk::EventBox());
   table_grundwerte = Gtk::manage(new class table_grundwerte(_data));
   
   Gtk::Frame *frame4 = Gtk::manage(new class Gtk::Frame());
   Glib::RefPtr<Gdk::Bitmap> _pixmap_notebook_grundwerte_mask;
   Glib::RefPtr<Gdk::Pixmap> _pixmap_notebook_grundwerte_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _pixmap_notebook_grundwerte_mask, Grundwert_small_xpm);
   pixmap_notebook_grundwerte = Gtk::manage(new class Gtk::Image(_pixmap_notebook_grundwerte_pixmap, _pixmap_notebook_grundwerte_mask));
   label_notebook_grundwerte = Gtk::manage(new class Gtk::Label("Grundwerte"));
   
   Gtk::VBox *vbox51 = Gtk::manage(new class Gtk::VBox(false, 0));
   eventbox_grundwerte = Gtk::manage(new class Gtk::EventBox());
   table_lernschema = Gtk::manage(new class table_lernschema(_data));
   frame_lernschema = Gtk::manage(new class Gtk::Frame());
   
   Glib::RefPtr<Gdk::Bitmap> _pixmap_notebook_lernen_mask;
   Glib::RefPtr<Gdk::Pixmap> _pixmap_notebook_lernen_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _pixmap_notebook_lernen_mask, L_Schema_small_xpm);
   pixmap_notebook_lernen = Gtk::manage(new class Gtk::Image(_pixmap_notebook_lernen_pixmap, _pixmap_notebook_lernen_mask));
   label_notebook_lernen = Gtk::manage(new class Gtk::Label("Lernschema"));
   
   Gtk::VBox *vbox52 = Gtk::manage(new class Gtk::VBox(false, 0));
   eventbox_lernen = Gtk::manage(new class Gtk::EventBox());
   table_steigern = Gtk::manage(new class table_steigern(_data));
   frame_steigern = Gtk::manage(new class Gtk::Frame());
   
   Glib::RefPtr<Gdk::Bitmap> _pixmap_notebook_steigern_mask;
   Glib::RefPtr<Gdk::Pixmap> _pixmap_notebook_steigern_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _pixmap_notebook_steigern_mask, Steigern_small_xpm);
   pixmap_notebook_steigern = Gtk::manage(new class Gtk::Image(_pixmap_notebook_steigern_pixmap, _pixmap_notebook_steigern_mask));
   label_notebook_steigern = Gtk::manage(new class Gtk::Label("Steigern"));
   
   Gtk::VBox *vbox53 = Gtk::manage(new class Gtk::VBox(false, 0));
   eventbox_steigern = Gtk::manage(new class Gtk::EventBox());
   table_beschreibung = Gtk::manage(new class table_beschreibung(_data));
   
   Glib::RefPtr<Gdk::Bitmap> _pixmap_notebook_beschreibung_mask;
   Glib::RefPtr<Gdk::Pixmap> _pixmap_notebook_beschreibung_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _pixmap_notebook_beschreibung_mask, Descr_Char_40_xpm);
   pixmap_notebook_beschreibung = Gtk::manage(new class Gtk::Image(_pixmap_notebook_beschreibung_pixmap, _pixmap_notebook_beschreibung_mask));
   label_notebook_beschreibung = Gtk::manage(new class Gtk::Label("Beschreibung"));
   
   Gtk::VBox *vbox54 = Gtk::manage(new class Gtk::VBox(false, 0));
   eventbox_beschreibung = Gtk::manage(new class Gtk::EventBox());
   table_ausruestung = Gtk::manage(new class table_ausruestung(_data));
   
   Glib::RefPtr<Gdk::Bitmap> _pixmap_notebook_ausruestung_mask;
   Glib::RefPtr<Gdk::Pixmap> _pixmap_notebook_ausruestung_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _pixmap_notebook_ausruestung_mask, Ausruest_small_xpm);
   pixmap_notebook_ausruestung = Gtk::manage(new class Gtk::Image(_pixmap_notebook_ausruestung_pixmap, _pixmap_notebook_ausruestung_mask));
   label_notebook_ausruestung = Gtk::manage(new class Gtk::Label("Ausrüstung"));
   
   Gtk::VBox *vbox55 = Gtk::manage(new class Gtk::VBox(false, 0));
   eventbox_ausruestung = Gtk::manage(new class Gtk::EventBox());
   table_optionen = Gtk::manage(new class table_optionen(_data));
   
   Glib::RefPtr<Gdk::Bitmap> _pixmap_notebook_optionen_mask;
   Glib::RefPtr<Gdk::Pixmap> _pixmap_notebook_optionen_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _pixmap_notebook_optionen_mask, Regio_Hausregel_50_xpm);
   pixmap_notebook_optionen = Gtk::manage(new class Gtk::Image(_pixmap_notebook_optionen_pixmap, _pixmap_notebook_optionen_mask));
   label_notebook_optionen = Gtk::manage(new class Gtk::Label("Optionen"));
   
   Gtk::VBox *vbox56 = Gtk::manage(new class Gtk::VBox(false, 0));
   eventbox_optionen = Gtk::manage(new class Gtk::EventBox());
   list_news = Gtk::manage(new class Gtk::TreeView());
   
   Gtk::Viewport *viewport38 = Gtk::manage(new class Gtk::Viewport(*manage(new Gtk::Adjustment(0,0,1)), *manage(new Gtk::Adjustment(0,0,1))));
   Gtk::ScrolledWindow *scrolledwindow76 = Gtk::manage(new class Gtk::ScrolledWindow());
   Glib::RefPtr<Gdk::Bitmap> _pixmap162_mask;
   Glib::RefPtr<Gdk::Pixmap> _pixmap162_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _pixmap162_mask, KillChar_32_xpm);
   Gtk::Image *pixmap162 = Gtk::manage(new class Gtk::Image(_pixmap162_pixmap, _pixmap162_mask));
   Gtk::Label *label598 = Gtk::manage(new class Gtk::Label("Abenteurer aus\n"
		"Liste löschen"));
   Gtk::HBox *hbox84 = Gtk::manage(new class Gtk::HBox(false, 0));
   togglebutton_delete_abenteurer_aus_liste = Gtk::manage(new class Gtk::ToggleButton());
   
   Gtk::Label *label597 = Gtk::manage(new class Gtk::Label("Zum Editieren eines Abenteurers diesen anklicken."));
   AbenteurerListe = new class SimpleTree(7);
   
   Gtk::Viewport *viewport47 = Gtk::manage(new class Gtk::Viewport(*manage(new Gtk::Adjustment(0,0,1)), *manage(new Gtk::Adjustment(0,0,1))));
   Gtk::ScrolledWindow *scrolledwindow86 = Gtk::manage(new class Gtk::ScrolledWindow());
   Gtk::Label *label579 = Gtk::manage(new class Gtk::Label("Durch anklicken einer Zeile aus der Liste wird der entsprechende Abenteurer geladen."));
   undo_tree = new class SimpleTree(2);
   
   Gtk::Viewport *viewport44 = Gtk::manage(new class Gtk::Viewport(*manage(new Gtk::Adjustment(0,0,1)), *manage(new Gtk::Adjustment(0,0,1))));
   Gtk::ScrolledWindow *scrolledwindow81 = Gtk::manage(new class Gtk::ScrolledWindow());
   Gtk::Table *table161 = Gtk::manage(new class Gtk::Table(2, 2, false));
   Gtk::Table *table139 = Gtk::manage(new class Gtk::Table(2, 2, false));
   Glib::RefPtr<Gdk::Bitmap> _pixmap175_mask;
   Glib::RefPtr<Gdk::Pixmap> _pixmap175_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _pixmap175_mask, NewsGeschichte_xpm);
   Gtk::Image *pixmap175 = Gtk::manage(new class Gtk::Image(_pixmap175_pixmap, _pixmap175_mask));
   label_notebook_news = Gtk::manage(new class Gtk::Label("News & Geschichte"));
   
   Gtk::VBox *vbox57 = Gtk::manage(new class Gtk::VBox(false, 0));
   eventbox_geschichte = Gtk::manage(new class Gtk::EventBox());
   table_zufall = Gtk::manage(new class table_zufall(_data));
   
   Glib::RefPtr<Gdk::Bitmap> _pixmap167_mask;
   Glib::RefPtr<Gdk::Pixmap> _pixmap167_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _pixmap167_mask, Z_NewChar_xpm);
   pixmap167 = Gtk::manage(new class Gtk::Image(_pixmap167_pixmap, _pixmap167_mask));
   label603 = Gtk::manage(new class Gtk::Label("Zufallsgenerator"));
   
   Gtk::VBox *vbox65 = Gtk::manage(new class Gtk::VBox(false, 0));
   eventbox_zufall = Gtk::manage(new class Gtk::EventBox());
   notebook_main = Gtk::manage(new class Gtk::Notebook());
   label_status = Gtk::manage(new class Gtk::Label(""));
   label_wizard = Gtk::manage(new class Gtk::Label(""));
   
   Gtk::VBox *vbox64 = Gtk::manage(new class Gtk::VBox(false, 0));
   frame_regionen_status = Gtk::manage(new class Gtk::Frame());
   
   Glib::RefPtr<Gdk::Bitmap> _pixmap176_mask;
   Glib::RefPtr<Gdk::Pixmap> _pixmap176_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _pixmap176_mask, midgard_logo_status_xpm);
   Gtk::Image *pixmap176 = Gtk::manage(new class Gtk::Image(_pixmap176_pixmap, _pixmap176_mask));
   eventbox_Original_Midgard = Gtk::manage(new class Gtk::EventBox());
   
   Glib::RefPtr<Gdk::Bitmap> _pixmap164_mask;
   Glib::RefPtr<Gdk::Pixmap> _pixmap164_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _pixmap164_mask, NSC_Mode_26_xpm);
   Gtk::Image *pixmap164 = Gtk::manage(new class Gtk::Image(_pixmap164_pixmap, _pixmap164_mask));
   eventbox_NSC_aktiv = Gtk::manage(new class Gtk::EventBox());
   
   Glib::RefPtr<Gdk::Bitmap> _pixmap165_mask;
   Glib::RefPtr<Gdk::Pixmap> _pixmap165_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _pixmap165_mask, MAGUS_Logo_Tiny_xpm);
   Gtk::Image *pixmap165 = Gtk::manage(new class Gtk::Image(_pixmap165_pixmap, _pixmap165_mask));
   eventbox_wizard_aktiv = Gtk::manage(new class Gtk::EventBox());
   frame_haus_status = Gtk::manage(new class Gtk::Frame());
   
   Gtk::HBox *hbox88 = Gtk::manage(new class Gtk::HBox(false, 0));
   handlebox_status = Gtk::manage(new class Gtk::HandleBox());
   
   Gtk::Table *main_table = Gtk::manage(new class Gtk::Table(2, 2, false));
   Glib::RefPtr<Gdk::Bitmap> _button_neuer_charakter_img_mask;
   Glib::RefPtr<Gdk::Pixmap> _button_neuer_charakter_img_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _button_neuer_charakter_img_mask, NewChar_trans_50_xpm);
   Gtk::Image *button_neuer_charakter_img = Gtk::manage(new class Gtk::Image(_button_neuer_charakter_img_pixmap, _button_neuer_charakter_img_mask));
   
   toolbar_top->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("Neu", *button_neuer_charakter_img, Gtk::Toolbar_Helpers::Callback0()));
   Gtk::Button *button_neuer_charakter = static_cast<Gtk::Button *>(toolbar_top->tools().back().get_widget());
   Glib::RefPtr<Gdk::Bitmap> _button9_img_mask;
   Glib::RefPtr<Gdk::Pixmap> _button9_img_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _button9_img_mask, LoadChar_trans_50_xpm);
   Gtk::Image *button9_img = Gtk::manage(new class Gtk::Image(_button9_img_pixmap, _button9_img_mask));
   
   toolbar_top->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("Öffnen", *button9_img, Gtk::Toolbar_Helpers::Callback0()));
   Gtk::Button *button9 = static_cast<Gtk::Button *>(toolbar_top->tools().back().get_widget());
   Glib::RefPtr<Gdk::Bitmap> _button8_img_mask;
   Glib::RefPtr<Gdk::Pixmap> _button8_img_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _button8_img_mask, SaveChar_trans_50_xpm);
   Gtk::Image *button8_img = Gtk::manage(new class Gtk::Image(_button8_img_pixmap, _button8_img_mask));
   
   toolbar_top->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("Speichern", *button8_img, Gtk::Toolbar_Helpers::Callback0()));
   Gtk::Button *button8 = static_cast<Gtk::Button *>(toolbar_top->tools().back().get_widget());
   Glib::RefPtr<Gdk::Bitmap> _button_main_drucken_img_mask;
   Glib::RefPtr<Gdk::Pixmap> _button_main_drucken_img_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _button_main_drucken_img_mask, PrintChar_trans_50_xpm);
   Gtk::Image *button_main_drucken_img = Gtk::manage(new class Gtk::Image(_button_main_drucken_img_pixmap, _button_main_drucken_img_mask));
   
   toolbar_top->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("Drucken", *button_main_drucken_img, Gtk::Toolbar_Helpers::Callback0()));
   button_main_drucken = static_cast<Gtk::Button *>(toolbar_top->tools().back().get_widget());
   toolbar_top->tools().push_back(Gtk::Toolbar_Helpers::Space());
   
   Glib::RefPtr<Gdk::Bitmap> _button_undo_img_mask;
   Glib::RefPtr<Gdk::Pixmap> _button_undo_img_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _button_undo_img_mask, Undo_xpm);
   Gtk::Image *button_undo_img = Gtk::manage(new class Gtk::Image(_button_undo_img_pixmap, _button_undo_img_mask));
   
   toolbar_top->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("Zurück", *button_undo_img, Gtk::Toolbar_Helpers::Callback0()));
   button_undo = static_cast<Gtk::Button *>(toolbar_top->tools().back().get_widget());
   Glib::RefPtr<Gdk::Bitmap> _button_redo_img_mask;
   Glib::RefPtr<Gdk::Pixmap> _button_redo_img_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _button_redo_img_mask, redo_xpm);
   Gtk::Image *button_redo_img = Gtk::manage(new class Gtk::Image(_button_redo_img_pixmap, _button_redo_img_mask));
   
   toolbar_top->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("Vorwärts", *button_redo_img, Gtk::Toolbar_Helpers::Callback0()));
   button_redo = static_cast<Gtk::Button *>(toolbar_top->tools().back().get_widget());
   toolbar_top->tools().push_back(Gtk::Toolbar_Helpers::Space());
   
   Glib::RefPtr<Gdk::Bitmap> _button_menu_img_mask;
   Glib::RefPtr<Gdk::Pixmap> _button_menu_img_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _button_menu_img_mask, wizzard_trans_50_2_xpm);
   Gtk::Image *button_menu_img = Gtk::manage(new class Gtk::Image(_button_menu_img_pixmap, _button_menu_img_mask));
   
   toolbar_top->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("Menü", *button_menu_img, Gtk::Toolbar_Helpers::Callback0()));
   Gtk::Button *button_menu = static_cast<Gtk::Button *>(toolbar_top->tools().back().get_widget());
   Glib::RefPtr<Gdk::Bitmap> _button_info_img_mask;
   Glib::RefPtr<Gdk::Pixmap> _button_info_img_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _button_info_img_mask, Info_trans_50_xpm);
   Gtk::Image *button_info_img = Gtk::manage(new class Gtk::Image(_button_info_img_pixmap, _button_info_img_mask));
   
   toolbar_top->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("Info", *button_info_img, Gtk::Toolbar_Helpers::Callback0()));
   Gtk::Button *button_info = static_cast<Gtk::Button *>(toolbar_top->tools().back().get_widget());
   Glib::RefPtr<Gdk::Bitmap> _button_html_hilfe_img_mask;
   Glib::RefPtr<Gdk::Pixmap> _button_html_hilfe_img_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _button_html_hilfe_img_mask, Help_trans_new1_xpm);
   Gtk::Image *button_html_hilfe_img = Gtk::manage(new class Gtk::Image(_button_html_hilfe_img_pixmap, _button_html_hilfe_img_mask));
   
   toolbar_top->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("Anleitung", *button_html_hilfe_img, Gtk::Toolbar_Helpers::Callback0()));
   Gtk::Button *button_html_hilfe = static_cast<Gtk::Button *>(toolbar_top->tools().back().get_widget());
   toolbar_top->tools().push_back(Gtk::Toolbar_Helpers::Space());
   
   Glib::RefPtr<Gdk::Bitmap> _button_schliessen_img_mask;
   Glib::RefPtr<Gdk::Pixmap> _button_schliessen_img_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _button_schliessen_img_mask, Exit_trans_50_xpm);
   Gtk::Image *button_schliessen_img = Gtk::manage(new class Gtk::Image(_button_schliessen_img_pixmap, _button_schliessen_img_mask));
   
   toolbar_top->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("Schließen", *button_schliessen_img, Gtk::Toolbar_Helpers::Callback0()));
   button_schliessen = static_cast<Gtk::Button *>(toolbar_top->tools().back().get_widget());
   
   exportieren_main_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("Exportieren für gedruckte Abenteuer"));
   exportieren = (Gtk::MenuItem *)&exportieren_main_menu->items().back();
   
   exportieren_main_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("Exportieren für Ranas pdf-Dokumente"));
   exportieren_ranas_pdf_dokumente = (Gtk::MenuItem *)&exportieren_main_menu->items().back();
   
   ausr__stungsdokument_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("Nur sichtbares", Gtk::Menu_Helpers::AccelKey(GDK_A, Gdk::CONTROL_MASK)));
   nur_sichtbares = (Gtk::MenuItem *)&ausr__stungsdokument_menu->items().back();
   
   ausr__stungsdokument_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("Alles drucken", Gtk::Menu_Helpers::AccelKey(GDK_A, Gdk::MOD1_MASK)));
   unsichtbares_drucken = (Gtk::MenuItem *)&ausr__stungsdokument_menu->items().back();
   
   drucken1_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("Abenteurerdokument", Gtk::Menu_Helpers::AccelKey(GDK_P, Gdk::CONTROL_MASK)));
   abenteurerdokument = (Gtk::MenuItem *)&drucken1_menu->items().back();
   
   drucken1_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("Ausrüstungsdokument", *ausr__stungsdokument_menu));
   ausr__stungsdokument = (Gtk::MenuItem *)&drucken1_menu->items().back();
   
   drucken1_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("Beschreibung", Gtk::Menu_Helpers::AccelKey(GDK_B, Gdk::CONTROL_MASK)));
   beschreibung = (Gtk::MenuItem *)&drucken1_menu->items().back();
   
   drucken1_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("Alles drucken", Gtk::Menu_Helpers::AccelKey(GDK_P, Gdk::MOD1_MASK)));
   alles_drucken = (Gtk::MenuItem *)&drucken1_menu->items().back();
   
   drucken1_menu->items().push_back(Gtk::Menu_Helpers::SeparatorElem());
   trennlinie4 = (Gtk::MenuItem *)&drucken1_menu->items().back();
   
   drucken1_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("Leeres Abenteurerblatt", Gtk::Menu_Helpers::AccelKey(GDK_E, Gdk::CONTROL_MASK)));
   leeres_abenteurerblatt = (Gtk::MenuItem *)&drucken1_menu->items().back();
   
   drucken1_menu->items().push_back(Gtk::Menu_Helpers::SeparatorElem());
   trennlinie6 = (Gtk::MenuItem *)&drucken1_menu->items().back();
   
   drucken1_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("Spielleiterbogen", Gtk::Menu_Helpers::AccelKey(GDK_S, Gdk::MOD1_MASK)));
   spielleiterbogen_drucken = (Gtk::MenuItem *)&drucken1_menu->items().back();
   
   magus1_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("Neuer Abenteurer", Gtk::Menu_Helpers::AccelKey(GDK_N, Gdk::MOD1_MASK)));
   neuen_abenteurer1 = (Gtk::MenuItem *)&magus1_menu->items().back();
   
   magus1_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("Neuer Abenteurer mit Wizard", Gtk::Menu_Helpers::AccelKey(GDK_N, Gdk::CONTROL_MASK)));
   neuer_abenteurer_mit_wizard1 = (Gtk::MenuItem *)&magus1_menu->items().back();
   
   magus1_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("Wizard beenden", Gtk::Menu_Helpers::AccelKey(GDK_W, Gdk::MOD1_MASK)));
   wizard_beenden = (Gtk::MenuItem *)&magus1_menu->items().back();
   
   magus1_menu->items().push_back(Gtk::Menu_Helpers::SeparatorElem());
   trennlinie3 = (Gtk::MenuItem *)&magus1_menu->items().back();
   
   magus1_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("Öffnen", Gtk::Menu_Helpers::AccelKey(GDK_O, Gdk::CONTROL_MASK)));
   laden1 = (Gtk::MenuItem *)&magus1_menu->items().back();
   
   magus1_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("Speichern", Gtk::Menu_Helpers::AccelKey(GDK_S, Gdk::CONTROL_MASK)));
   speichern1 = (Gtk::MenuItem *)&magus1_menu->items().back();
   
   magus1_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("Speichern unter ..."));
   speichern_unter_ = (Gtk::MenuItem *)&magus1_menu->items().back();
   
   magus1_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("Exportieren", *exportieren_main_menu));
   exportieren_main = (Gtk::MenuItem *)&magus1_menu->items().back();
   
   magus1_menu->items().push_back(Gtk::Menu_Helpers::SeparatorElem());
   trennlinie1 = (Gtk::MenuItem *)&magus1_menu->items().back();
   
   magus1_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("Drucken", *drucken1_menu));
   drucken1 = (Gtk::MenuItem *)&magus1_menu->items().back();
   
   magus1_menu->items().push_back(Gtk::Menu_Helpers::SeparatorElem());
   trennlinie2 = (Gtk::MenuItem *)&magus1_menu->items().back();
   
   magus1_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("Beenden", Gtk::Menu_Helpers::AccelKey(GDK_Q, Gdk::CONTROL_MASK)));
   beenden1 = (Gtk::MenuItem *)&magus1_menu->items().back();
   
   magus1_menu->items().push_back(Gtk::Menu_Helpers::SeparatorElem());
   trennlinie5 = (Gtk::MenuItem *)&magus1_menu->items().back();
   
   bearbeiten1_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("Rückgängig", Gtk::Menu_Helpers::AccelKey(GDK_Z, Gdk::CONTROL_MASK)));
   r__ckg__ngig1 = (Gtk::MenuItem *)&bearbeiten1_menu->items().back();
   
   bearbeiten1_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("Erneut/Vorwärts", Gtk::Menu_Helpers::AccelKey(GDK_R, Gdk::CONTROL_MASK)));
   erneut_vorw__rts1 = (Gtk::MenuItem *)&bearbeiten1_menu->items().back();
   
   bearbeiten1_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("Geschichte"));
   geschichte = (Gtk::MenuItem *)&bearbeiten1_menu->items().back();
   
   hilfe1_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("Anleitung"));
   anleitung_menu = (Gtk::MenuItem *)&hilfe1_menu->items().back();
   
   hilfe1_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("Info & Credits"));
   info_credits_menu = (Gtk::MenuItem *)&hilfe1_menu->items().back();
   
   hilfe1_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("News"));
   news_menu = (Gtk::MenuItem *)&hilfe1_menu->items().back();
   
   main_menubar->items().push_back(Gtk::Menu_Helpers::MenuElem("_Datei", Gtk::Menu_Helpers::AccelKey(GDK_D, Gdk::CONTROL_MASK), *magus1_menu));
   magus1 = (Gtk::MenuItem *)&main_menubar->items().back();
   
   main_menubar->items().push_back(Gtk::Menu_Helpers::MenuElem("_Bearbeiten", Gtk::Menu_Helpers::AccelKey(GDK_B, Gdk::CONTROL_MASK), *bearbeiten1_menu));
   bearbeiten1 = (Gtk::MenuItem *)&main_menubar->items().back();
   
   main_menubar->items().push_back(Gtk::Menu_Helpers::MenuElem("_Hilfe", Gtk::Menu_Helpers::AccelKey(GDK_H, Gdk::CONTROL_MASK), *hilfe1_menu));
   hilfe1 = (Gtk::MenuItem *)&main_menubar->items().back();
   button_neuer_charakter->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*button_neuer_charakter, "Linke Maustaste: Neuer Abenteurer mit Wizard generieren    Rechte Maustaste: Neuen Abenteurer ohne Wizard gegerieren.", "");
   button9->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*button9, "Abenteurer laden", "");
   button8->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*button8, "Linke Maustaste: Speichern           Rechte Maustaste: Speichern unter ...", "");
   button_main_drucken->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*button_main_drucken, "Linke Maustaste: LaTeX Abenteurerblatt drucken (pdf Datei). Mittlere Maustaste: Charakterbeschreibung drucken. Rechte Maustaste: Ausrüstung drucken.", "");
   button_undo->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*button_undo, "Letzte Änderung rückgängig machen.", "");
   button_redo->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*button_redo, "Rückgängmachen rückgängig machen", "");
   button_menu->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*button_menu, "Dieses Menü ist auch über die rechte Maustaste (an fast jeder beliebiegen Stelle im Programm) verfügbar.", "");
   button_info->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*button_info, "Info", "");
   button_html_hilfe->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*button_html_hilfe, "HTML Hilfe", "");
   button_schliessen->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*button_schliessen, "Schließen", "");
   toolbar_top->set_tooltips(true);
   griff_toolbar_top->set_shadow_type(Gtk::SHADOW_OUT);
   griff_toolbar_top->set_handle_position(Gtk::POS_LEFT);
   griff_toolbar_top->set_snap_edge(Gtk::POS_TOP);
   griff_toolbar_top->add(*toolbar_top);
   handlebox_menu->set_shadow_type(Gtk::SHADOW_OUT);
   handlebox_menu->set_handle_position(Gtk::POS_LEFT);
   handlebox_menu->set_snap_edge(Gtk::POS_TOP);
   handlebox_menu->add(*main_menubar);
   pixmap_original_tux->set_alignment(0.5,0.5);
   pixmap_original_tux->set_padding(0,0);
   label_notebook_info->set_alignment(0.5,0.5);
   label_notebook_info->set_padding(0,0);
   label_notebook_info->set_justify(Gtk::JUSTIFY_CENTER);
   label_notebook_info->set_line_wrap(false);
   label_notebook_info->set_use_markup(false);
   vbox66->pack_start(*pixmap_original_tux);
   vbox66->pack_start(*label_notebook_info, Gtk::PACK_SHRINK, 0);
   _tooltips.set_tip(*eventbox_credits, "Info & Credits", "");
   eventbox_credits->add(*vbox66);
   frame4->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame4->set_label_align(0,0.5);
   frame4->add(*table_grundwerte);
   pixmap_notebook_grundwerte->set_alignment(0.5,0.5);
   pixmap_notebook_grundwerte->set_padding(0,0);
   label_notebook_grundwerte->set_alignment(0.5,0.5);
   label_notebook_grundwerte->set_padding(0,0);
   label_notebook_grundwerte->set_justify(Gtk::JUSTIFY_CENTER);
   label_notebook_grundwerte->set_line_wrap(false);
   label_notebook_grundwerte->set_use_markup(false);
   vbox51->pack_start(*pixmap_notebook_grundwerte);
   vbox51->pack_start(*label_notebook_grundwerte, Gtk::PACK_SHRINK, 0);
   _tooltips.set_tip(*eventbox_grundwerte, "Grundwerte", "");
   eventbox_grundwerte->add(*vbox51);
   frame_lernschema->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame_lernschema->set_label_align(0,0.5);
   frame_lernschema->add(*table_lernschema);
   pixmap_notebook_lernen->set_alignment(0.5,0.5);
   pixmap_notebook_lernen->set_padding(0,0);
   label_notebook_lernen->set_alignment(0.5,0.5);
   label_notebook_lernen->set_padding(0,0);
   label_notebook_lernen->set_justify(Gtk::JUSTIFY_CENTER);
   label_notebook_lernen->set_line_wrap(false);
   label_notebook_lernen->set_use_markup(false);
   vbox52->pack_start(*pixmap_notebook_lernen);
   vbox52->pack_start(*label_notebook_lernen, Gtk::PACK_SHRINK, 0);
   _tooltips.set_tip(*eventbox_lernen, "Lernschema", "");
   eventbox_lernen->add(*vbox52);
   frame_steigern->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame_steigern->set_label_align(0,0.5);
   frame_steigern->add(*table_steigern);
   pixmap_notebook_steigern->set_alignment(0.5,0.5);
   pixmap_notebook_steigern->set_padding(0,0);
   label_notebook_steigern->set_alignment(0.5,0.5);
   label_notebook_steigern->set_padding(0,0);
   label_notebook_steigern->set_justify(Gtk::JUSTIFY_CENTER);
   label_notebook_steigern->set_line_wrap(false);
   label_notebook_steigern->set_use_markup(false);
   vbox53->pack_start(*pixmap_notebook_steigern);
   vbox53->pack_start(*label_notebook_steigern, Gtk::PACK_SHRINK, 0);
   _tooltips.set_tip(*eventbox_steigern, "Steigern", "");
   eventbox_steigern->add(*vbox53);
   pixmap_notebook_beschreibung->set_alignment(0.5,0.5);
   pixmap_notebook_beschreibung->set_padding(0,0);
   label_notebook_beschreibung->set_alignment(0.5,0.5);
   label_notebook_beschreibung->set_padding(0,0);
   label_notebook_beschreibung->set_justify(Gtk::JUSTIFY_CENTER);
   label_notebook_beschreibung->set_line_wrap(false);
   label_notebook_beschreibung->set_use_markup(false);
   vbox54->pack_start(*pixmap_notebook_beschreibung);
   vbox54->pack_start(*label_notebook_beschreibung, Gtk::PACK_SHRINK, 0);
   _tooltips.set_tip(*eventbox_beschreibung, "Beschreibung des Abenteurers und/oder des Hintergrundes", "");
   eventbox_beschreibung->add(*vbox54);
   pixmap_notebook_ausruestung->set_alignment(0.5,0.5);
   pixmap_notebook_ausruestung->set_padding(0,0);
   label_notebook_ausruestung->set_alignment(0.5,0.5);
   label_notebook_ausruestung->set_padding(0,0);
   label_notebook_ausruestung->set_justify(Gtk::JUSTIFY_CENTER);
   label_notebook_ausruestung->set_line_wrap(false);
   label_notebook_ausruestung->set_use_markup(false);
   vbox55->pack_start(*pixmap_notebook_ausruestung);
   vbox55->pack_start(*label_notebook_ausruestung, Gtk::PACK_SHRINK, 0);
   _tooltips.set_tip(*eventbox_ausruestung, "Ausrüstung", "");
   eventbox_ausruestung->add(*vbox55);
   pixmap_notebook_optionen->set_alignment(0.5,0.5);
   pixmap_notebook_optionen->set_padding(0,0);
   label_notebook_optionen->set_alignment(0.5,0.5);
   label_notebook_optionen->set_padding(0,0);
   label_notebook_optionen->set_justify(Gtk::JUSTIFY_CENTER);
   label_notebook_optionen->set_line_wrap(false);
   label_notebook_optionen->set_use_markup(false);
   vbox56->pack_start(*pixmap_notebook_optionen);
   vbox56->pack_start(*label_notebook_optionen, Gtk::PACK_SHRINK, 0);
   _tooltips.set_tip(*eventbox_optionen, "Optionen", "");
   eventbox_optionen->add(*vbox56);
   list_news->set_headers_visible(true);
   list_news->set_rules_hint(false);
   list_news->set_reorderable(false);
   list_news->set_enable_search(true);
   viewport38->set_shadow_type(Gtk::SHADOW_IN);
   viewport38->add(*list_news);
   scrolledwindow76->set_shadow_type(Gtk::SHADOW_NONE);
   scrolledwindow76->set_policy(Gtk::POLICY_AUTOMATIC, Gtk::POLICY_AUTOMATIC);
   scrolledwindow76->property_window_placement().set_value(Gtk::CORNER_TOP_LEFT);
   scrolledwindow76->add(*viewport38);
   pixmap162->set_alignment(0.5,0.5);
   pixmap162->set_padding(0,0);
   label598->set_alignment(0.5,0.5);
   label598->set_padding(0,0);
   label598->set_justify(Gtk::JUSTIFY_CENTER);
   label598->set_line_wrap(false);
   label598->set_use_markup(false);
   hbox84->pack_start(*pixmap162);
   hbox84->pack_start(*label598, Gtk::PACK_SHRINK, 0);
   togglebutton_delete_abenteurer_aus_liste->set_flags(Gtk::CAN_FOCUS);
   togglebutton_delete_abenteurer_aus_liste->set_relief(Gtk::RELIEF_NORMAL);
   togglebutton_delete_abenteurer_aus_liste->set_active(false);
   togglebutton_delete_abenteurer_aus_liste->add(*hbox84);
   label597->set_alignment(0,0.5);
   label597->set_padding(0,0);
   label597->set_justify(Gtk::JUSTIFY_CENTER);
   label597->set_line_wrap(false);
   label597->set_use_markup(false);
   viewport47->set_shadow_type(Gtk::SHADOW_NONE);
   viewport47->add(*AbenteurerListe);
   scrolledwindow86->set_shadow_type(Gtk::SHADOW_NONE);
   scrolledwindow86->set_policy(Gtk::POLICY_AUTOMATIC, Gtk::POLICY_AUTOMATIC);
   scrolledwindow86->property_window_placement().set_value(Gtk::CORNER_TOP_LEFT);
   scrolledwindow86->add(*viewport47);
   label579->set_alignment(0,0.02);
   label579->set_padding(2,0);
   label579->set_justify(Gtk::JUSTIFY_LEFT);
   label579->set_line_wrap(false);
   label579->set_use_markup(false);
   viewport44->set_shadow_type(Gtk::SHADOW_NONE);
   viewport44->add(*undo_tree);
   scrolledwindow81->set_shadow_type(Gtk::SHADOW_NONE);
   scrolledwindow81->set_policy(Gtk::POLICY_AUTOMATIC, Gtk::POLICY_AUTOMATIC);
   scrolledwindow81->property_window_placement().set_value(Gtk::CORNER_TOP_LEFT);
   scrolledwindow81->add(*viewport44);
   table161->set_row_spacings(0);
   table161->set_col_spacings(0);
   table161->attach(*togglebutton_delete_abenteurer_aus_liste, 1, 2, 2, 3, Gtk::AttachOptions(), Gtk::AttachOptions(), 0, 0);
   table161->attach(*label597, 1, 2, 0, 1, Gtk::SHRINK|Gtk::FILL, Gtk::SHRINK, 0, 0);
   table161->attach(*scrolledwindow86, 1, 2, 1, 2, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, 0, 0);
   table161->attach(*label579, 0, 1, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table161->attach(*scrolledwindow81, 0, 1, 1, 3, Gtk::FILL, Gtk::FILL, 0, 0);
   table139->set_row_spacings(0);
   table139->set_col_spacings(0);
   table139->attach(*scrolledwindow76, 0, 1, 1, 2, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, 0, 0);
   table139->attach(*table161, 0, 1, 0, 1, Gtk::SHRINK|Gtk::FILL, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, 0, 0);
   pixmap175->set_alignment(0.5,0.5);
   pixmap175->set_padding(0,0);
   label_notebook_news->set_alignment(0.5,0.5);
   label_notebook_news->set_padding(0,0);
   label_notebook_news->set_justify(Gtk::JUSTIFY_CENTER);
   label_notebook_news->set_line_wrap(false);
   label_notebook_news->set_use_markup(false);
   vbox57->pack_start(*pixmap175);
   vbox57->pack_start(*label_notebook_news, Gtk::PACK_SHRINK, 0);
   _tooltips.set_tip(*eventbox_geschichte, "News & Geschichte", "");
   eventbox_geschichte->add(*vbox57);
   pixmap167->set_alignment(0.5,0.5);
   pixmap167->set_padding(0,0);
   label603->set_alignment(0.5,0.5);
   label603->set_padding(0,0);
   label603->set_justify(Gtk::JUSTIFY_CENTER);
   label603->set_line_wrap(false);
   label603->set_use_markup(false);
   vbox65->pack_start(*pixmap167);
   vbox65->pack_start(*label603, Gtk::PACK_SHRINK, 0);
   _tooltips.set_tip(*eventbox_zufall, "Zufallsabenteurer (NSC) erstellen", "");
   eventbox_zufall->add(*vbox65);
   notebook_main->set_flags(Gtk::CAN_FOCUS);
   notebook_main->set_show_tabs(true);
   notebook_main->set_show_border(true);
   notebook_main->set_tab_pos(Gtk::POS_TOP);
   notebook_main->set_scrollable(false);
   notebook_main->append_page(*Midgard_Info, *eventbox_credits);
   notebook_main->pages().back().set_tab_label_packing(false, true, Gtk::PACK_START);
   notebook_main->append_page(*frame4, *eventbox_grundwerte);
   notebook_main->pages().back().set_tab_label_packing(false, true, Gtk::PACK_START);
   notebook_main->append_page(*frame_lernschema, *eventbox_lernen);
   notebook_main->pages().back().set_tab_label_packing(false, true, Gtk::PACK_START);
   notebook_main->append_page(*frame_steigern, *eventbox_steigern);
   notebook_main->pages().back().set_tab_label_packing(false, true, Gtk::PACK_START);
   notebook_main->append_page(*table_beschreibung, *eventbox_beschreibung);
   notebook_main->pages().back().set_tab_label_packing(false, true, Gtk::PACK_START);
   notebook_main->append_page(*table_ausruestung, *eventbox_ausruestung);
   notebook_main->pages().back().set_tab_label_packing(false, true, Gtk::PACK_START);
   notebook_main->append_page(*table_optionen, *eventbox_optionen);
   notebook_main->pages().back().set_tab_label_packing(false, true, Gtk::PACK_START);
   notebook_main->append_page(*table139, *eventbox_geschichte);
   notebook_main->pages().back().set_tab_label_packing(false, true, Gtk::PACK_START);
   notebook_main->append_page(*table_zufall, *eventbox_zufall);
   notebook_main->pages().back().set_tab_label_packing(false, true, Gtk::PACK_START);
   label_status->set_alignment(0,0.5);
   label_status->set_padding(0,2);
   label_status->set_justify(Gtk::JUSTIFY_LEFT);
   label_status->set_line_wrap(true);
   label_status->set_use_markup(false);
   label_wizard->set_alignment(0.01,0.5);
   label_wizard->set_padding(0,2);
   label_wizard->set_justify(Gtk::JUSTIFY_LEFT);
   label_wizard->set_line_wrap(true);
   label_wizard->set_use_markup(false);
   vbox64->pack_start(*label_status);
   vbox64->pack_start(*label_wizard, Gtk::PACK_SHRINK, 0);
   frame_regionen_status->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame_regionen_status->set_label_align(0,0.5);
   pixmap176->set_alignment(0.5,0.5);
   pixmap176->set_padding(0,0);
   _tooltips.set_tip(*eventbox_Original_Midgard, "Dieses Icon zeigt an, daß die Originalregeln verwendet werden.", "");
   eventbox_Original_Midgard->add(*pixmap176);
   pixmap164->set_alignment(0.5,0.5);
   pixmap164->set_padding(0,0);
   _tooltips.set_tip(*eventbox_NSC_aktiv, "Dieses Icon zeigt an, daß der NSC Modus eingeschaltet ist.", "");
   eventbox_NSC_aktiv->add(*pixmap164);
   pixmap165->set_alignment(0.5,0.5);
   pixmap165->set_padding(0,0);
   _tooltips.set_tip(*eventbox_wizard_aktiv, "Dieses Icon zeigt an, daß der Wizard aktiv ist.", "");
   eventbox_wizard_aktiv->add(*pixmap165);
   frame_haus_status->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame_haus_status->set_label_align(0,0.5);
   hbox88->pack_start(*vbox64);
   hbox88->pack_start(*frame_regionen_status, Gtk::PACK_SHRINK, 0);
   hbox88->pack_start(*eventbox_Original_Midgard, Gtk::PACK_SHRINK, 0);
   hbox88->pack_start(*eventbox_NSC_aktiv, Gtk::PACK_SHRINK, 0);
   hbox88->pack_start(*eventbox_wizard_aktiv, Gtk::PACK_SHRINK, 0);
   hbox88->pack_start(*frame_haus_status, Gtk::PACK_SHRINK, 0);
   handlebox_status->set_shadow_type(Gtk::SHADOW_OUT);
   handlebox_status->set_handle_position(Gtk::POS_LEFT);
   handlebox_status->set_snap_edge(Gtk::POS_LEFT);
   handlebox_status->add(*hbox88);
   main_table->set_row_spacings(0);
   main_table->set_col_spacings(0);
   main_table->attach(*griff_toolbar_top, 0, 1, 1, 2, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   main_table->attach(*handlebox_menu, 0, 1, 0, 1, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   main_table->attach(*notebook_main, 0, 1, 2, 3, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, 0, 0);
   main_table->attach(*handlebox_status, 0, 1, 3, 4, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, Gtk::SHRINK, 0, 0);
   midgard_CG->set_events(Gdk::BUTTON_PRESS_MASK);
   midgard_CG->set_sensitive(false);
   midgard_CG->set_title("Magus");
   midgard_CG->set_modal(false);
   midgard_CG->property_window_position().set_value(Gtk::WIN_POS_NONE);
   midgard_CG->set_resizable(true);
   midgard_CG->add(*main_table);
   toolbar_top->show();
   griff_toolbar_top->show();
   neuen_abenteurer1->show();
   neuer_abenteurer_mit_wizard1->show();
   wizard_beenden->show();
   trennlinie3->show();
   laden1->show();
   speichern1->show();
   speichern_unter_->show();
   exportieren->show();
   exportieren_ranas_pdf_dokumente->show();
   exportieren_main_menu->show();
   exportieren_main->show();
   trennlinie1->show();
   abenteurerdokument->show();
   nur_sichtbares->show();
   unsichtbares_drucken->show();
   ausr__stungsdokument_menu->show();
   ausr__stungsdokument->show();
   beschreibung->show();
   alles_drucken->show();
   trennlinie4->show();
   leeres_abenteurerblatt->show();
   trennlinie6->show();
   spielleiterbogen_drucken->show();
   drucken1_menu->show();
   drucken1->show();
   trennlinie2->show();
   beenden1->show();
   trennlinie5->show();
   magus1_menu->show();
   magus1->show();
   r__ckg__ngig1->show();
   erneut_vorw__rts1->show();
   geschichte->show();
   bearbeiten1_menu->show();
   bearbeiten1->show();
   anleitung_menu->show();
   info_credits_menu->show();
   news_menu->show();
   hilfe1_menu->show();
   hilfe1->show();
   main_menubar->show();
   handlebox_menu->show();
   pixmap_original_tux->show();
   label_notebook_info->show();
   vbox66->show();
   eventbox_credits->show();
   frame4->show();
   pixmap_notebook_grundwerte->show();
   label_notebook_grundwerte->show();
   vbox51->show();
   eventbox_grundwerte->show();
   frame_lernschema->show();
   pixmap_notebook_lernen->show();
   label_notebook_lernen->show();
   vbox52->show();
   eventbox_lernen->show();
   frame_steigern->show();
   pixmap_notebook_steigern->show();
   label_notebook_steigern->show();
   vbox53->show();
   eventbox_steigern->show();
   pixmap_notebook_beschreibung->show();
   label_notebook_beschreibung->show();
   vbox54->show();
   eventbox_beschreibung->show();
   pixmap_notebook_ausruestung->show();
   label_notebook_ausruestung->show();
   vbox55->show();
   eventbox_ausruestung->show();
   pixmap_notebook_optionen->show();
   label_notebook_optionen->show();
   vbox56->show();
   eventbox_optionen->show();
   list_news->show();
   viewport38->show();
   scrolledwindow76->show();
   pixmap162->show();
   label598->show();
   hbox84->show();
   togglebutton_delete_abenteurer_aus_liste->show();
   label597->show();
   AbenteurerListe->show();
   viewport47->show();
   scrolledwindow86->show();
   label579->show();
   undo_tree->show();
   viewport44->show();
   scrolledwindow81->show();
   table161->show();
   table139->show();
   pixmap175->show();
   label_notebook_news->show();
   vbox57->show();
   eventbox_geschichte->show();
   pixmap167->show();
   label603->show();
   vbox65->show();
   eventbox_zufall->show();
   notebook_main->show();
   label_status->show();
   label_wizard->show();
   vbox64->show();
   frame_regionen_status->show();
   pixmap176->show();
   eventbox_Original_Midgard->show();
   pixmap164->show();
   eventbox_NSC_aktiv->show();
   pixmap165->show();
   eventbox_wizard_aktiv->show();
   frame_haus_status->show();
   hbox88->show();
   handlebox_status->show();
   main_table->show();
   midgard_CG->show();
   button_neuer_charakter->signal_clicked().connect(SigC::slot(*this, &midgard_CG_glade::on_neuer_charakter_release_event));
   button9->signal_clicked().connect(SigC::slot(*this, &midgard_CG_glade::on_laden_release_event));
   button8->signal_clicked().connect(SigC::slot(*this, &midgard_CG_glade::on_speichern_release_event));
   button_main_drucken->signal_clicked().connect(SigC::slot(*this, &midgard_CG_glade::on_latex_release_event));
   button_undo->signal_clicked().connect(SigC::slot(*this, &midgard_CG_glade::on_button_undo_clicked));
   button_redo->signal_clicked().connect(SigC::slot(*this, &midgard_CG_glade::on_button_redo_clicked));
   button_menu->signal_clicked().connect(SigC::slot(*this, &midgard_CG_glade::on_button_menu_button_release_event));
   button_info->signal_clicked().connect(SigC::slot(*this, &midgard_CG_glade::on_button_info_clicked));
   button_html_hilfe->signal_clicked().connect(SigC::slot(*this, &midgard_CG_glade::on_button_html_hilfe_clicked));
   button_schliessen->signal_clicked().connect(SigC::slot(*this, &midgard_CG_glade::on_schliessen_CG_clicked));
   neuen_abenteurer1->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::on_neuer_charakter_clicked));
   neuer_abenteurer_mit_wizard1->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::on_neuer_abenteurer_mit_wizard_activate));
   wizard_beenden->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::on_wizard_beenden_activate));
   laden1->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::xml_import_auswahl));
   speichern1->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::save_existing_filename));
   speichern_unter_->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::xml_export_auswahl));
   exportieren->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::on_exportieren_activate));
   exportieren_ranas_pdf_dokumente->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::on_exportieren_ranas_pdf_dokumente_activate));
   abenteurerdokument->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::on_abenteurerdokument_drucken));
   nur_sichtbares->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::on_nur_sichtbares_drucken));
   unsichtbares_drucken->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::on_auch_unsichtbares_drucken));
   beschreibung->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::on_beschreibung_drucken));
   alles_drucken->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::on_alles_drucken));
   leeres_abenteurerblatt->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::on_leeres_abenteurerdokument_drucken));
   spielleiterbogen_drucken->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::on_spielleiterbogen_drucken_activate));
   beenden1->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::on_schliessen_CG_clicked));
   r__ckg__ngig1->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::on_button_undo_clicked));
   erneut_vorw__rts1->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::on_button_redo_clicked));
   geschichte->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::menu_geschichte_selected));
   anleitung_menu->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::on_anleitung_menu_activate));
   info_credits_menu->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::on_info_credits_menu_activate));
   news_menu->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::on_news_menu_activate));
   eventbox_credits->signal_button_release_event().connect(SigC::slot(*this, &midgard_CG_glade::on_eventbox_credits_button_release_event));
   eventbox_grundwerte->signal_button_release_event().connect(SigC::slot(*this, &midgard_CG_glade::on_eventbox_grundwerte_button_release_event));
   eventbox_lernen->signal_button_release_event().connect(SigC::slot(*this, &midgard_CG_glade::on_eventbox_lernen_button_release_event));
   eventbox_steigern->signal_button_release_event().connect(SigC::slot(*this, &midgard_CG_glade::on_eventbox_steigern_button_release_event));
   eventbox_beschreibung->signal_button_release_event().connect(SigC::slot(*this, &midgard_CG_glade::on_eventbox_beschreibung_button_release_event));
   eventbox_ausruestung->signal_button_release_event().connect(SigC::slot(*this, &midgard_CG_glade::on_eventbox_ausruestung_button_release_event));
   eventbox_optionen->signal_button_release_event().connect(SigC::slot(*this, &midgard_CG_glade::on_eventbox_optionen_button_release_event));
   togglebutton_delete_abenteurer_aus_liste->signal_toggled().connect(SigC::slot(*this, &midgard_CG_glade::on_togglebutton_delete_abenteurer_aus_liste_toggled));
   AbenteurerListe->signal_leaf_selected().connect(SigC::slot(*this, &midgard_CG_glade::on_AbenteurerListe_leaf));
   undo_tree->signal_leaf_selected().connect(SigC::slot(*this, &midgard_CG_glade::on_undo_leaf_selected));
   eventbox_geschichte->signal_button_release_event().connect(SigC::slot(*this, &midgard_CG_glade::on_eventbox_geschichte_button_release_event));
   eventbox_zufall->signal_button_release_event().connect(SigC::slot(*this, &midgard_CG_glade::on_eventbox_zufall_button_release_event));
   notebook_main->signal_switch_page().connect(SigC::slot(*this, &midgard_CG_glade::on_notebook_main_switch_page));
   midgard_CG->signal_delete_event().connect(SigC::slot(*this, &midgard_CG_glade::on_midgard_CG_delete_event));
   midgard_CG->signal_button_press_event().connect(SigC::slot(*this, &midgard_CG_glade::on_eventbox_MCG_button_press_event));
}

midgard_CG_glade::~midgard_CG_glade()
{  delete AbenteurerListe;
   delete undo_tree;
   delete _data;
}
