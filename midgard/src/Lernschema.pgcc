/*  Midgard Character Generator
 *  Copyright (C) 2001-2002 Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include "Lernschema.hh"
#include <Aux/SQLerror.h>
#include <Aux/Transaction.h>
exec sql include sqlca;
#include <gtk--/main.h>
#include "Typen.hh"
#include "Waffe.hh"
#include "Zauber.hh"
#include "Zauberwerk.hh"
#include "Fertigkeiten.hh"


Lernschema::Lernschema(Gtk::ProgressBar *progressbar)
{
#ifndef USE_XML
  exec sql begin declare section;
   char TYP[10],FERTIGKEIT[50],ART[50],ATTR[10],PE[30],SE[30];
   bool PFLICHT;
   int WERT,LERNPUNKTE,db_size;
  exec sql end declare section;
  exec sql select count(typ) into :db_size from lernschema_4;
  exec sql declare LEin cursor for select
   typ, pflicht, name, art, coalesce(wert,0), lernpunkte
   from lernschema_4 
   order by lernpunkte;
 Transaction tr;
 exec sql open LEin;
 SQLerror::test(__FILELINE__);
 double count=0;  
 while(true)   
   {
     progressbar->set_percentage(count/db_size);
     while(Gtk::Main::events_pending()) Gtk::Main::iteration() ;
     exec sql fetch LEin into :TYP,:PFLICHT,:FERTIGKEIT,:ART,
      :WERT,:LERNPUNKTE;//,:ATTR,:PE,:SE;
     SQLerror::test(__FILELINE__,100);
     if (sqlca.sqlcode) break; 
     lern_map[st_index(TYP,ART,FERTIGKEIT)] 
//            = st_wert(PFLICHT,WERT,ATTR,LERNPUNKTE,PE,SE); 
            = st_wert(PFLICHT,WERT,"",LERNPUNKTE,"",""); 
     ++count;
   }
#else 
 const Tag *zauber=xml_data->find("Zauber");
 if (zauber)
 {  Tag::const_iterator b=zauber->begin(),e=zauber->end();
    double size=(e-b)*3;
    FOR_EACH_CONST_TAG_OF_5(i,*zauber,b,e,"Spruch")
    {  progressbar->set_percentage((i-b)/size);
       while(Gtk::Main::events_pending()) Gtk::Main::iteration() ;
       for (Tag::const_iterator j=i->find(i->begin(),"Lernschema")
       		;j!=i->end();j=i->find(j+1,"Lernschema"))
          lern_map[st_index(j->getAttr("Typ"),"Zauberkünste",i->getAttr("Name"))] 
             = st_wert(j->getBoolAttr("Pflicht"),j->getIntAttr("Erfolgswert")
             		,"",j->getIntAttr("Lernpunkte"),"","");
    }
 }
 const Tag *fertigkeiten=xml_data->find("Fertigkeiten");
 if (fertigkeiten)
 {  Tag::const_iterator b=fertigkeiten->begin(),e=fertigkeiten->end();
    double size=(e-b)*3;
    FOR_EACH_CONST_TAG_OF_5(i,*fertigkeiten,b,e,"Fertigkeit")
    {  progressbar->set_percentage((i-b)/size+.33);
       while(Gtk::Main::events_pending()) Gtk::Main::iteration() ;
       for (Tag::const_iterator j=i->find(i->begin(),"Lernschema")
       		;j!=i->end();j=i->find(j+1,"Lernschema"))
          lern_map[st_index(j->getAttr("Typ"),"Fachkenntnisse",i->getAttr("Name"))] 
             = st_wert(j->getBoolAttr("Pflicht"),j->getIntAttr("Erfolgswert")
             		,"",j->getIntAttr("Lernpunkte"),"","");
    }
 }
 const Tag *waffen=xml_data->find("Waffen");
 if (waffen)
 {  Tag::const_iterator b=waffen->begin(),e=waffen->end();
    double size=(e-b)*3;
    FOR_EACH_CONST_TAG_OF_5(i,*waffen,b,e,"Waffe")
    {  progressbar->set_percentage((i-b)/size+.66);
       while(Gtk::Main::events_pending()) Gtk::Main::iteration() ;
       for (Tag::const_iterator j=i->find(i->begin(),"Lernschema")
       		;j!=i->end();j=i->find(j+1,"Lernschema"))
          lern_map[st_index(j->getAttr("Typ"),"Waffenfertigkeiten",i->getAttr("Name"))] 
             = st_wert(j->getBoolAttr("Pflicht"),j->getIntAttr("Erfolgswert")
             		,"",j->getIntAttr("Lernpunkte"),"","");
    }
 }
#endif 
 progressbar->set_percentage(1);
}

std::list<cH_MidgardBasicElement> Lernschema::get_List(const std::string& art, 
                                          const vector<cH_Typen>& Typ) const
{
 std::list<cH_MidgardBasicElement> L;
 for(std::map<st_index,st_wert>::const_iterator i=lern_map.begin();i!=lern_map.end();++i)
  {
   if( (i->first.typ==Typ[0]->Short() || i->first.typ==Typ[1]->Short()) &&
       i->first.art==art)
     {
      if(art=="Fachkenntnisse") 
         { 
           cH_MidgardBasicElement fert(&*cH_Fertigkeit(i->first.fertigkeit));
           cH_Fertigkeit(fert)->set_Erfolgswert(i->second.erfolgswert);
           L.push_back(fert); 
         }
      if(art=="Waffenfertigkeiten") 
         { 
           cH_MidgardBasicElement waffe(&*cH_Waffe(i->first.fertigkeit));
           cH_Waffe(waffe)->set_Erfolgswert(i->second.erfolgswert);
           L.push_back(waffe); 
         }
      if(art=="Zauberkünste") 
         { 
#warning hier auch
           L.push_back(&*cH_Zauber(i->first.fertigkeit));
         }
     }   
  }
 return L;
}
