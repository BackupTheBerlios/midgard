/*  Midgard Character Generator
 *  Copyright (C) 2001 Malte Thoma
 *  Copyright (C) 2002 Christof Petig
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#ifndef USE_XML
#include <Aux/Transaction.h>
#include <Aux/SQLerror.h>
exec sql include sqlca;
#endif
#include "Sprache.hh"
#include <cstring>
#include <Gtk_OStream.h>
#include <Aux/itos.h>
#include <gtk--/main.h>
#include "Schrift.hh"

cH_Sprache::cache_t cH_Sprache::cache;

cH_Sprache::cH_Sprache(const std::string& name IF_XML(,bool create))
{
 cH_Sprache *cached(cache.lookup(name));
 if (cached) *this=*cached;
 else
#ifndef USE_XML
  {
   *this=cH_Sprache(new Sprache(name));
   cache.Register(name,*this);
  }
#else
  cerr << "Sprache '" << name << "' nicht im Cache\n";
  if (create)
  {  static Tag t2("Sprache"); 
     // note that this Tag is shared ... works well for now
     t2.setAttr("Name",name);
     *this=cH_Sprache(&t2);
  }
  else throw NotFound();
//  assert(!"Sprache im Cache");
#endif  
}

#ifdef USE_XML
cH_Sprache::cH_Sprache(const Tag *tag)
{*this=cH_Sprache(new Sprache(tag));
 cache.Register(tag->getAttr("Name"),*this);
}
#endif

void Sprache::get_Sprache()
{
#ifndef USE_XML
  exec sql begin declare section;
   char db_name[50],db_schrift[50],db_region[50];
   int db_fp,db_maxwert;
   bool db_alt,db_minderheit;
   int db_g1,db_g2;
  exec sql end declare section;

  strncpy(db_name,Name().c_str(),sizeof(db_name));
  exec sql select distinct fp,max_wert,coalesce(alt,'f'),coalesce(minderheit,'f'),
       coalesce(region,''),coalesce(gruppe_1,0),coalesce(gruppe_2,0)
       into :db_fp,:db_maxwert,:db_alt,:db_minderheit,
         :db_region,:db_g1,:db_g2
       from sprachen where name = :db_name;
  SQLerror::test(__FILELINE__);
  region=db_region;
  alte_sprache=db_alt;
  minderheit=db_minderheit;
  maxwert=db_maxwert;
  kosten=db_fp;
  if(db_g1) V_sprachgruppe.push_back(db_g1);
  if(db_g2) V_sprachgruppe.push_back(db_g2);
  
  // Schriften
  exec sql declare schriftein cursor for select schrift from 
      sprache_schrift where sprache=:db_name;
  exec sql open schriftein;
  SQLerror::test(__FILELINE__);
  while (true)
   {
     exec sql fetch schriftein into :db_schrift;
     SQLerror::test(__FILELINE__,100);
     if (sqlca.sqlcode) break;
     VSchrift.push_back(db_schrift);
   }
#else
  region=tag->getAttr("Region");
  alte_sprache=tag->getBoolAttr("alteSprache");
  minderheit=tag->getBoolAttr("Minderheit");
  maxwert=tag->getIntAttr("Maximalwert");
  kosten=tag->getIntAttr("Kosten");
  if(tag->getIntAttr("Gruppe")) 
     V_sprachgruppe.push_back(tag->getIntAttr("Gruppe"));
  if(tag->getIntAttr("Gruppe2")) 
     V_sprachgruppe.push_back(tag->getIntAttr("Gruppe2"));

  FOR_EACH_CONST_TAG_OF(i,*tag,"Schrift")
     VSchrift.push_back(i->getAttr("Name",tag->getAttr("Name")));
#endif
}

int Sprache::Kosten(const vector<cH_Typen>& Typ,const Ausnahmen& ausnahmen) const
{ 
  cH_Fertigkeit F("Sprechen: Sprache");
  return  (int)(F->Standard_Faktor(Typ,ausnahmen) * kosten) ; 
}

int Sprache::MaxErfolgswert(const Grundwerte& w,const vector<cH_Typen>& Typ) const
{
  if     (w.In() < 31) return (11>maxwert ? maxwert : 11); 
  else if(w.In() < 61) return (18>maxwert ? maxwert : 18); 
  else return (20>maxwert ? maxwert : 20);
}


std::string Sprache::Schriften() const
{
  std::string s;
  for(vector<std::string>::const_iterator j=VSchrift.begin();j!=VSchrift.end();)
   {
     s=*j;
     if(++j!=VSchrift.end()) s+=", ";
   }
  return s;
}



//const vector<pair<std::string,int> > Sprache::SchriftWert(const std::list<cH_MidgardBasicElement>& list_Schrift,const std::list<cH_MidgardBasicElement>& list_AllSchrift) const 
const vector<pair<std::string,int> > Sprache::SchriftWert(const std::list<cH_MidgardBasicElement>& list_Schrift) const 
{
 vector<pair<std::string,int> > vs;
 for(vector<std::string>::const_iterator i=VSchrift.begin();i!=VSchrift.end();++i)
  {  
   for(std::list<cH_MidgardBasicElement>::const_iterator j=list_Schrift.begin();j!=list_Schrift.end();++j)
    {
      if(*i == (*j)->Name()) // Schrift ist gelernt
        vs.push_back(pair<std::string,int>(*i,(*j)->Erfolgswert()));
/*
      else // Schrift nicht gelernt, aber vielleicht ist dieselbe Schrift gelernt?
        {
          cH_Schrift schrift(*i);
          std::list<cH_MidgardBasicElement> LM=schrift->gleicheSchrift(list_AllSchrift);
          for(std::list<cH_MidgardBasicElement>::const_iterator l=LM.begin();l!=LM.end();++l)
            {
              if((*l)->Name()==*i)
                 vs.push_back(pair<std::string,int>(*i,+8));
            }
        }
*/
    }
  }
 return vs;
}

bool Sprache::Sprachgruppe(const std::vector<int>& V2) const
{
  for(vector<int>::const_iterator j=V_sprachgruppe.begin();j!=V_sprachgruppe.end();++j)
    for(vector<int>::const_iterator k=V2.begin();k!=V2.end();++k)
      if(*j==*k) return true;
  return false;
}

std::list<cH_MidgardBasicElement> Sprache::VerwandteSprachen(const std::list<cH_MidgardBasicElement>& gelernte_listSprache,const std::list<cH_MidgardBasicElement>& listSprache) const
{
  std::list<cH_MidgardBasicElement> VS;
  for(std::list<cH_MidgardBasicElement>::const_iterator i=listSprache.begin();i!=listSprache.end();++i)
     if(Erfolgswert()>=10 && !(*i)->ist_gelernt(gelernte_listSprache) &&
        Sprachgruppe(cH_Sprache(*i)->getVSprachgruppe())) 
      {
         cH_MidgardBasicElement MBE=new Sprache(*cH_Sprache(*i)); // Kopie anlegen
         MBE->set_Erfolgswert(Erfolgswert()-10);
         VS.push_back(MBE) ;
      }
 return VS;
}

std::list<cH_MidgardBasicElement> Sprache::cleanVerwandteSprachen(std::list<cH_MidgardBasicElement> L)
{
  // Aus der Liste die Sprache mit dem höchsten Erfolgswert nehmen.
  std::map<std::string,int> M;
  for(std::list<cH_MidgardBasicElement>::const_iterator i=L.begin();i!=L.end();++i)
   {
     if(M[(*i)->Name()] < (*i)->Erfolgswert()) 
         M[(*i)->Name()] = (*i)->Erfolgswert();
   }
  std::list<cH_MidgardBasicElement> N;
  for(std::map<std::string,int>::const_iterator i=M.begin();i!=M.end();++i)
   {
     const cH_Sprache s(i->first);
     s->set_Erfolgswert(i->second);
     N.push_back(&*s);
   }
 return N;
}


Sprachen_All::Sprachen_All(Gtk::ProgressBar *progressbar)
{
#ifndef USE_XML
 exec sql begin declare section;
   char db_name[100];
   int db_size;
 exec sql end declare section;
 exec sql select count(name) into :db_size from sprachen;
 exec sql declare SIein cursor for select distinct name from sprachen;
 Transaction tr;
 exec sql open SIein; 
 SQLerror::test(__FILELINE__);
 double count=0;  
 while(true)
  {
   progressbar->set_percentage(count/db_size);
   while(Gtk::Main::events_pending()) Gtk::Main::iteration() ;
   exec sql fetch SIein into :db_name;
   SQLerror::test(__FILELINE__,100);
   if (sqlca.sqlcode) break;
   list_All.push_back(&*(cH_Sprache(db_name)));
   ++count;
  }
 exec sql close SIein;
 tr.close();
#else
 const Tag *sprachen=xml_data->find("Sprachen");
 if (sprachen)
 {  Tag::const_iterator b=sprachen->begin(),e=sprachen->end();
    double size=e-b;
    FOR_EACH_CONST_TAG_OF_5(i,*sprachen,b,e,"Sprache")
    {  progressbar->set_percentage((i-b)/size);   
       while(Gtk::Main::events_pending()) Gtk::Main::iteration() ;
       list_All.push_back(&*(cH_Sprache(&*i)));
    }
 }   
#endif
 progressbar->set_percentage(1);
}  

