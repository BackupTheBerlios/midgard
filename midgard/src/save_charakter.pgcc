/*  Midgard Character Generator
 *  Copyright (C) 2001 Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include "midgard_CG.hh"
#ifndef USE_XML
exec sql include sqlca;
#include <Aux/Transaction.h>
#include <Aux/SQLerror.h>
#include <cstring>
#else
#include "WindowInfo.hh"
#include "export_common.h"
#include <fstream>
#endif
#include "Waffe.hh"
// for XML export
#include "xml_fileselection.hh"


gint midgard_CG::on_speichern_release_event(GdkEventButton *ev)
{
#ifndef USE_XML
  if (ev->button==1) on_speichern_clicked();
//  if (ev->button==3) midgard_CG::xml_export();
  if (ev->button==3) xml_export_auswahl();
//  frame_steigern->show();
#else
  xml_export_auswahl();
#endif
  steigern_aktivieren();
  return false;
}

void midgard_CG::xml_export_auswahl()
{ 
#ifdef USE_XML
 manage (new xml_fileselection(this,"save"/*"Abenteurer speichern"*/))
	->set_filename(filename);
  steigern_aktivieren();
#endif
}

void midgard_CG::xml_export(const std::string& dateiname)
{  steigern_aktivieren();
   
#ifndef USE_XML
  // eigentlich Unsinn da nur Version 8, aber besser als nichts zu tun
  std::string cname   = Werte.Name_Abenteurer();
  std::string version = Werte.Version(OptionBool.version);
  std::string command = "midgard_xmlexport '"+cname+"' '"+version+"' > '"+dateiname+"'";
  system(command.c_str());
  std::string strinfo = "Abenteurer "+cname+" exportiert\n";
  manage (new WindowInfo(strinfo));
#else
   ofstream datei(dateiname.c_str());
   if (!datei.good())
   {  manage(new WindowInfo("Ich kann die Datei '"+dateiname
   		+"' nicht beschreiben"));
      return;
   }

   datei << "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n\n";
   datei << "<MAGUS-data>\n";

// Vielleicht hier eingegebene Ausrüstung speichern wie in anderen Dateien
// oder ganz unten?
   datei << " <Preise>\n";
   for (std::list<cH_Preise>::const_iterator i=Database.preise.begin();
   		i!=Database.preise.end();++i)
   {  if ((*i)->ist_eigener_Artikel())
      {  datei << "  <Kaufpreis";
         write_string_attrib(datei, "Ware", (*i)->Name());
         write_string_attrib(datei, "Art", (*i)->Art());
         write_string_attrib(datei, "Art2", (*i)->Art2());
         write_float_attrib(datei, "Preis", (*i)->Kosten());
         write_string_attrib(datei, "Währung", (*i)->Einheit());
         write_float_attrib(datei, "Gewicht", (*i)->Gewicht());
         datei << "/>\n";
      }
   }
   datei << " </Preise>\n\n";
   
   datei << " <Midgard-Abenteurer";
   write_int_attrib(datei,"Version",10);
   datei << ">\n";

   grundwerte_speichern(datei);
   datei << "  <Ausrüstung>\n"; // oder Besitz?
   write_string(datei, "Rüstung", Werte.Ruestung()->Name(), 4);
   // Waffen Besitz
   for (std::list<cH_MidgardBasicElement>::const_iterator i=list_Waffen_besitz.begin();
         i!=list_Waffen_besitz.end();++i)
      {  cH_WaffeBesitz WB(*i);
         datei << "    <Waffe";
         write_string_attrib(datei, "Bezeichnung", WB->Name());
         write_int_attrib(datei, "AngriffVerteidigung_Bonus", WB->av_Bonus());
         write_int_attrib(datei, "SchadenLebenspunkte_Bonus", WB->sl_Bonus());
         write_string_attrib(datei, "Region", WB->Region());
         if (WB->Magisch().empty()) datei << "/>\n";
         else datei << '>' << WB->Magisch() << "</Waffe>\n";
      }
   save_ausruestung(datei, besitz.getChildren());
   datei << "  </Ausrüstung>\n";
   
   datei << "  <Fertigkeiten>\n";   

   // Sinne
   for(std::map<std::string,int>::const_iterator i=Werte.Sinne().begin();
   			i!=Werte.Sinne().end();++i) 
    { datei << "    <Sinn";
      write_string_attrib(datei, "Bezeichnung", i->first);
      write_int_attrib(datei, "Wert", i->second);
      datei << "/>\n";
    }

   MidgardBasicElement::saveElementliste(datei,list_Beruf,Werte,Typ,Database.ausnahmen);
   MidgardBasicElement::saveElementliste(datei,list_Fertigkeit_ang,Werte,Typ,Database.ausnahmen);
   MidgardBasicElement::saveElementliste(datei,list_Fertigkeit,Werte,Typ,Database.ausnahmen);
   MidgardBasicElement::saveElementliste(datei,list_Waffen,Werte,Typ,Database.ausnahmen);
   MidgardBasicElement::saveElementliste(datei,list_Zauber,Werte,Typ,Database.ausnahmen);
   MidgardBasicElement::saveElementliste(datei,list_Zauberwerk,Werte,Typ,Database.ausnahmen);
   MidgardBasicElement::saveElementliste(datei,list_Kido,Werte,Typ,Database.ausnahmen);
   MidgardBasicElement::saveElementliste(datei,list_WaffenGrund,Werte,Typ,Database.ausnahmen);
   MidgardBasicElement::saveElementliste(datei,list_Sprache,Werte,Typ,Database.ausnahmen);
   MidgardBasicElement::saveElementliste(datei,list_Schrift,Werte,Typ,Database.ausnahmen);

   // Regionen & Ähnliches
   for (std::list<st_Optionen>::const_iterator i=list_Optionen.begin();i!=list_Optionen.end();++i)
    {
      datei << "    <bool";
      write_string_attrib(datei, "Name", i->text);
      write_bool_attrib(datei, "Wert", i->active, !i->active);
      datei << ">\n";
    }
/*
   if (!OptionBool.Original) datei << "    <bool ORIG=\"false\"/>\n";
   if (!OptionBool.Info) datei << "    <bool INFO=\"false\"/>\n";
   if (!OptionBool.Pics) datei << "    <bool PICS=\"false\"/>\n";
   if (!OptionBool.version) datei << "    <bool VERS=\"false\"/>\n";
   if (!HausregelCheck(EPsteigern).active) datei << "    <bool STEI=\"false\"/>\n";
*/
  for(std::vector<cH_Region>::const_iterator i=Database.Regionen.begin();i!=Database.Regionen.end();++i)
   {  if (!(*i)->Active()) continue;
      datei << "    <Region";
      write_string_attrib(datei, "Name", (*i)->Name());
      write_string_attrib(datei, "Region", (*i)->Abkuerzung());
      datei << "/>\n";
   }
   datei << "  </Fertigkeiten>\n";   
   datei << " </Midgard-Abenteurer>\n";
   datei << "</MAGUS-data>\n";
#endif
}

#ifndef USE_XML
void midgard_CG::on_speichern_clicked()
{
   steigern_aktivieren();
   grundwerte_speichern();
   Transaction tr;

   ///////////////////////////////////////////////////////////////////////   
   // Berufe, (angeborene) Fertigkeiten, Waffen und Zauber
   // Grundfertigkeiten (Waffen), Sprache, Schrift
   exec sql begin declare section;
      char db_name_ch[50];
      char db_version[50];
      int db_av_bonus,db_sl_bonus;
       char db_region[20];
      char db_fertigkeit[50];
      char db_magisch[1024];
      int db_wert;
   exec sql end declare section;
   strncpy(db_name_ch,Werte.Name_Abenteurer().c_str(),sizeof(db_name_ch));
   strncpy(db_version,Werte.Version().c_str(),sizeof(db_version));
   // Alte einträge löschen

   exec sql DELETE FROM charaktere_fertigkeiten WHERE 
      charakter_name = :db_name_ch and version=:db_version;
   // Sinne
   std::map<std::string,int> Sinnmap=Werte.Sinne();
   for(std::map<std::string,int>::const_iterator i=Sinnmap.begin();i!=Sinnmap.end();++i) 
    { 
      strncpy(db_fertigkeit, i->first.c_str(),sizeof(db_fertigkeit));
      db_wert =i->second;     
      exec sql INSERT INTO charaktere_fertigkeiten
        (charakter_name,version,fertigkeit,wert,art) VALUES
        (:db_name_ch,:db_version,:db_fertigkeit,:db_wert,'Sinn') ;
      SQLerror::test(__FILELINE__);
    }

   MidgardBasicElement::saveElementliste(list_Beruf,Werte,Typ,Database.ausnahmen);
   MidgardBasicElement::saveElementliste(list_Fertigkeit_ang,Werte,Typ,Database.ausnahmen);
   MidgardBasicElement::saveElementliste(list_Fertigkeit,Werte,Typ,Database.ausnahmen);
   MidgardBasicElement::saveElementliste(list_Waffen,Werte,Typ,Database.ausnahmen);
/*
   for (std::list<cH_MidgardBasicElement>::const_iterator i=list_Waffen_besitz.begin();
         i!=list_Waffen_besitz.end();++i)
      {
         cH_WaffeBesitz WB(*i);
         strncpy(db_fertigkeit, (WB->Name()).c_str(),sizeof(db_fertigkeit));
         strncpy(db_magisch, (WB->Magisch()).c_str(),sizeof(db_magisch));
         db_av_bonus = WB->av_Bonus();
         db_sl_bonus = WB->sl_Bonus();
         strncpy(db_region,(WB->Region()).c_str(),sizeof(db_region));
         exec sql INSERT INTO charaktere_fertigkeiten
            (charakter_name,version,fertigkeit,wert,art,av_bonus,sl_bonus,region,magisch)
         VALUES
            (:db_name_ch,:db_version,:db_fertigkeit,0,'Besitz_W',:db_av_bonus,:db_sl_bonus,:db_region,:db_magisch) ;
            SQLerror::test(__FILELINE__);
      }
*/
   MidgardBasicElement::saveElementliste(list_Zauber,Werte,Typ,Database.ausnahmen);
   MidgardBasicElement::saveElementliste(list_Zauberwerk,Werte,Typ,Database.ausnahmen);
   MidgardBasicElement::saveElementliste(list_Kido,Werte,Typ,Database.ausnahmen);
   MidgardBasicElement::saveElementliste(list_WaffenGrund,Werte,Typ,Database.ausnahmen);
   MidgardBasicElement::saveElementliste(list_Sprache,Werte,Typ,Database.ausnahmen);
   MidgardBasicElement::saveElementliste(list_Schrift,Werte,Typ,Database.ausnahmen);
   // Regionen & Ähnliches
/* siehe xml
   for (std::list<st_Optionen>::const iterator i=list_Optionen.begin();i!=list_Optionen.end();++i)
    {
      if(i->active) 
        {
           exec sql INSERT INTO charaktere_fertigkeiten
              (charakter_name,version,fertigkeit,region,art)
              VALUES(:db_name_ch,:db_version,'','ORIG','bool');
               SQLerror::test(__FILELINE__);
        }      
    }
   if (!OptionBool.Original) 
    {  
     exec sql INSERT INTO charaktere_fertigkeiten
        (charakter_name,version,fertigkeit,region,art)
        VALUES(:db_name_ch,:db_version,'','ORIG','bool');
      SQLerror::test(__FILELINE__);
    }
   if (!OptionBool.Info) 
    {  
     exec sql INSERT INTO charaktere_fertigkeiten
        (charakter_name,version,fertigkeit,region,art)
        VALUES(:db_name_ch,:db_version,'','INFO','bool');
      SQLerror::test(__FILELINE__);
    }
   if (!OptionBool.Pics) 
    {  
     exec sql INSERT INTO charaktere_fertigkeiten
        (charakter_name,version,fertigkeit,region,art)
        VALUES(:db_name_ch,:db_version,'','PICS','bool');
      SQLerror::test(__FILELINE__);
    }
   if (!OptionBool.version) 
    {  
     exec sql INSERT INTO charaktere_fertigkeiten
        (charakter_name,version,fertigkeit,region,art)
        VALUES(:db_name_ch,:db_version,'','VERS','bool');
      SQLerror::test(__FILELINE__);
    }
   if (!HausregelCheck(EPsteigern).active) 
    {  
     exec sql INSERT INTO charaktere_fertigkeiten
        (charakter_name,version,fertigkeit,region,art)
        VALUES(:db_name_ch,:db_version,'','STEI','bool');
      SQLerror::test(__FILELINE__);
    }
*/
  for(std::vector<cH_Region>::const_iterator i=Database.Regionen.begin();i!=Database.Regionen.end();++i)
   {
     strncpy(db_fertigkeit,(*i)->Name().c_str(),sizeof(db_fertigkeit));
     if((*i)->Active()) db_wert=1;
     else db_wert=0;
     exec sql INSERT INTO charaktere_fertigkeiten
        (charakter_name,version,fertigkeit,wert,art)
        VALUES(:db_name_ch,:db_version,:db_fertigkeit,:db_wert,'Region');
      SQLerror::test(__FILELINE__);
   }
   save_ausruestung();
   tr.commit();
}
#endif

void midgard_CG::grundwerte_speichern(IF_XML(ostream &datei))
{
#ifndef USE_XML
   exec sql begin declare section;
//      char db_beschreibung[102400] ;
      char *db_beschreibung; 
      char db_typ_s[5];
      char db_typ_2_s[5];
      int db_st, db_gw, db_gs,db_ko, db_in,db_zt,db_au,db_pa,db_sb,db_wk,
          db_b, db_lp, db_ap,db_abwehr,db_abwehr_pp,db_zaubern,db_zaubern_pp,
          db_resistenz,db_resistenz_pp, db_alter  ;
      char db_hand[30] ;
      char db_geschlecht[5];
      int db_gewicht, db_groesse, db_grad ;
      char db_spez[30]    ;
      char db_stand[30]   ;
      char db_herkunft[50];
      char db_glaube[50]  ;
      char db_name_ch[50] ;
      char db_name_sp[50] ;
      char db_version[50] ;
      int db_gfp,db_gg,db_sg,db_gold ,db_silber,db_kupfer;
      char db_ruestung[20];
      char db_spezies[50];
      int db_aep,db_kep,db_zep;
      int db_steigern_EP;
      int db_grad_basiswerte;
      char db_stadt_land[20];
   exec sql end declare section;


      db_st = Werte.St();      
      db_gw = Werte.Gw();      
      db_gs = Werte.Gs();      
      db_ko = Werte.Ko();      
      db_in = Werte.In();      
      db_zt = Werte.Zt();      
      db_au = Werte.Au();      
      db_pa = Werte.pA();      
      db_sb = Werte.Sb();      
      db_wk = Werte.Wk();      
      db_b  = Werte.B();      
      db_lp = Werte.LP();      
      db_ap = Werte.AP();      
      db_abwehr       = Werte.Abwehr_wert();      
      db_zaubern      = Werte.Zaubern_wert();
      db_resistenz    = Werte.Resistenz();      
      db_abwehr_pp    = Werte.AbwehrPP();      
      db_zaubern_pp   = Werte.ZaubernPP();
      db_resistenz_pp = Werte.ResistenzPP();      
      db_alter        = Werte.Alter();      
      db_gewicht      = Werte.Gewicht();      
      db_groesse      = Werte.Groesse();      
      db_grad         = Werte.Grad();      
      db_gfp = Werte.GFP() ;
      db_gg = Werte.GG() ;
      db_sg = Werte.SG() ;
      db_gold = Werte.Gold();
      db_silber = Werte.Silber();
      db_kupfer = Werte.Kupfer();
      db_aep = Werte.AEP();
      db_kep = Werte.KEP();
      db_zep = Werte.ZEP();
      db_steigern_EP = Database.GradAnstieg.get_Steigern_EP_Prozent();
      db_grad_basiswerte = Database.GradAnstieg.get_Grad_Basiswerte();

   db_beschreibung = (char *) (Werte.Beschreibung()).c_str();
   strncpy(db_hand,(Werte.Hand()).c_str(),sizeof(db_hand));
   strncpy(db_geschlecht,(Werte.Geschlecht()).c_str(),sizeof(db_geschlecht));
   strncpy(db_spez,(Werte.Spezialisierung()).c_str(),sizeof(db_spez));
   strncpy(db_stand,(Werte.Stand()).c_str(),sizeof(db_stand));
   strncpy(db_herkunft,(Werte.Herkunft()->Name().c_str()),sizeof(db_herkunft));
   strncpy(db_glaube,(Werte.Glaube()).c_str(),sizeof(db_glaube));
   strncpy(db_name_ch,(Werte.Name_Abenteurer()).c_str(),sizeof(db_name_ch));
   strncpy(db_name_sp,(Werte.Name_Spieler()).c_str(),sizeof(db_name_sp));
   strncpy(db_version,(Werte.Version()).c_str(),sizeof(db_version));
   strncpy(db_typ_s,Typ[0]->Short().c_str(),sizeof(db_typ_s));
   strncpy(db_typ_2_s,Typ[1]->Short().c_str(),sizeof(db_typ_2_s));
   strncpy(db_ruestung,(Werte.Ruestung()->Name()).c_str(),sizeof(db_ruestung));
   strncpy(db_spezies,(Werte.Spezies()->Name()).c_str(),sizeof(db_spezies));
   strncpy(db_stadt_land,(Werte.Stadt_Land()).c_str(),sizeof(db_stadt_land));
   
   exec sql UPDATE charaktere SET 
      charakter_name = :db_name_ch  , 
      beschreibung   = :db_beschreibung  , 
      version        = :db_version  ,
      typ_s          = :db_typ_s    ,
      typ_2_s        = :db_typ_2_s    ,
      spieler_name   = :db_name_sp  , 
      st             = :db_st       ,
      gw             = :db_gw       ,
      gs             = :db_gs       ,
      ko             = :db_ko       ,
      inn            = :db_in       ,
      zt             = :db_zt       ,
      au             = :db_au       ,
      pa             = :db_pa       ,
      sb             = :db_sb       ,
      wk             = :db_wk       ,
      b              = :db_b        ,
      lp             = :db_lp       ,
      ap             = :db_ap       ,
      abwehr         = :db_abwehr   ,
      zaubern        = :db_zaubern  ,
      resistenz      = :db_resistenz,
      abwehr_pp      = :db_abwehr_pp   ,
      zaubern_pp     = :db_zaubern_pp  ,
      resistenz_pp   = :db_resistenz_pp,
      alter          = :db_alter    ,
      hand           = :db_hand     ,
      geschlecht     = :db_geschlecht  ,
      gewicht        = :db_gewicht  ,
      groesse        = :db_groesse  ,
      grad           = :db_grad     ,
      spezialisierung= :db_spez     ,
      stand          = :db_stand    ,
      herkunft       = :db_herkunft ,
      glaube         = :db_glaube   ,
      db_gfp         = :db_gfp         ,
      gg             = :db_gg         ,
      sg             = :db_sg         ,
      gold           = :db_gold        ,
      silber         = :db_silber      ,
      kupfer         = :db_kupfer      ,
      ruestung       = :db_ruestung    ,
      spezies          = :db_spezies ,
      aep            = :db_aep,
      kep            = :db_kep,
      zep            = :db_zep,
      steigern_EP_prozent  = :db_steigern_EP,
      grad_basiswerte =:db_grad_basiswerte,
      stadt_land      =:db_stadt_land
      WHERE charakter_name = :db_name_ch and version= :db_version;
   SQLerror::test(__FILELINE__,100);
   if (sqlca.sqlcode==100) charakter_db_anlegen();
#else
   datei << "  <Figur";
   write_string_attrib(datei, "Name", Werte.Name_Abenteurer());
   write_string_attrib(datei, "Spieler", Werte.Name_Spieler());
   write_string_attrib(datei, "Zeitpunkt", Werte.Version());
   write_int_attrib(datei, "Grad", Werte.Grad());
   datei << "/>\n";
   datei << "  <Typ";
   write_string_attrib(datei, "Spezies", Werte.Spezies()->Name());
   write_string_attrib(datei, "Geschlecht", Werte.Geschlecht());
   write_string_attrib(datei, "Abkürzung", Typ[0]->Short());
   write_string_attrib(datei, "Abkürzung2", Typ[1]->Short());
   write_string_attrib(datei, "Spezialisierung", Werte.Spezialisierung());
   write_string_attrib(datei, "Stadt_Land", Werte.Stadt_Land()); // ???
   write_string_attrib(datei, "Hand", Werte.Hand());
   datei << "/>\n";
   datei << "  <Basiseigenschaften";
   write_int_attrib(datei, "St", Werte.St());
   write_int_attrib(datei, "Gw", Werte.Gw());
   write_int_attrib(datei, "Gs", Werte.Gs());
   write_int_attrib(datei, "Ko", Werte.Ko());
   write_int_attrib(datei, "In", Werte.In());
   write_int_attrib(datei, "Zt", Werte.Zt());
   datei << "/>\n";
   datei << "  <abgeleiteteEigenschaften";
   write_int_attrib(datei, "Au", Werte.Au());
   write_int_attrib(datei, "pA", Werte.pA());
   write_int_attrib(datei, "Wk", Werte.Wk());
   write_int_attrib(datei, "Sb", Werte.Sb());
   write_int_attrib(datei, "B", Werte.B());
//   write_int_attrib(datei, "KAW", Werte.St());
//   write_int_attrib(datei, "WLW", Werte.St());
   write_int_attrib(datei, "GG", Werte.GG());
   write_int_attrib(datei, "SG", Werte.SG());
   datei << "/>\n";
   datei << "  <Erfolgswerte";
   write_int_attrib(datei, "Abwehr", Werte.Abwehr_wert());
   write_int_attrib(datei, "Zaubern", Werte.Zaubern_wert());
   write_int_attrib(datei, "ZauberResistenz", Werte.Resistenz());
   datei << "/>\n";
   datei << "  <Gesundheit"; // schlechter Name ?
//   write_int_attrib(datei, "LP_Basis");
   write_int_attrib(datei, "LP", Werte.LP());
   write_int_attrib(datei, "AP", Werte.AP());
   datei << "/>\n";
   datei << "  <Beschreibung"; // soziale?
   write_int_attrib(datei, "Alter", Werte.Alter());
   write_string_attrib(datei, "Gestalt", Werte.Gestalt());
   write_int_attrib(datei, "Gewicht", Werte.Gewicht());
   write_int_attrib(datei, "Größe", Werte.Groesse());
   write_string_attrib(datei, "Stand", Werte.Stand());
   write_string_attrib(datei, "Herkunft", Werte.Herkunft()->Name());
   write_string_attrib(datei, "Glaube", Werte.Glaube());
   datei << "/>\n";
#if 0    // nicht mehr notwendig???
   datei << "  <Boni"; 
   write_int_attrib(datei, "Ausdauer");
   write_int_attrib(datei, "Schaden");
   write_int_attrib(datei, "Angriff");
   write_int_attrib(datei, "Abwehr");
   write_int_attrib(datei, "Zaubern");
   datei << ">\n";
   datei << "    <Resistenzen"; // Würde ich unter BONI fassen MAT
   write_int_attrib(datei, "psy");
   write_int_attrib(datei, "phs");
   write_int_attrib(datei, "phk");
   write_int_attrib(datei, "Gift");
   datei << "/>\n";
   datei << "  </Boni>\n";
#endif
   datei << "  <Vermögen";
   write_int_attrib(datei, "GS", Werte.Gold());
   write_int_attrib(datei, "SS", Werte.Silber());
   write_int_attrib(datei, "KS", Werte.Kupfer());
   datei << "/>\n";
   datei << "  <Steigern";
   write_int_attrib(datei, "GFP", Werte.GFP());
   write_int_attrib(datei, "AEP", Werte.AEP());
   write_int_attrib(datei, "KEP", Werte.KEP());
   write_int_attrib(datei, "ZEP", Werte.ZEP());
//   write_bool_attrib(datei, "EPabziehen", , false); ???
   write_int_attrib(datei, "EPproGFP", Database.GradAnstieg.get_Steigern_EP_Prozent(), 50);
   write_int_attrib(datei, "Basiswerte", Database.GradAnstieg.get_Grad_Basiswerte(), Werte.Grad());
//   write_int_attrib(datei, "Abwehr", , Werte.Grad());
//   write_int_attrib(datei, "Resistenz", , Werte.Grad());
//   write_int_attrib(datei, "Zaubern", , Werte.Grad());
   write_float_attrib(datei, "benötigte_Tage", Werte.Steigertage());
   datei << "><Praxispunkte";
   write_int_attrib(datei, "Abwehr", Werte.AbwehrPP());
   write_int_attrib(datei, "Zaubern", Werte.ZaubernPP());
   write_int_attrib(datei, "Resistenz", Werte.ResistenzPP());
   datei << "/></Steigern>\n";
   write_string(datei, "Text", Werte.Beschreibung(), 2);
#endif
}


#ifndef USE_XML
void midgard_CG::save_ausruestung()
{ exec sql begin declare section;
    char db_name_a[50];
    char db_vers_a[50];
    char db_art_a[50],db_fert_a[50],db_magisch_a[50];
    int db_wert_a,db_self;
  exec sql end declare section;
  strncpy(db_name_a,Werte.Name_Abenteurer().c_str(),sizeof(db_name_a));
  strncpy(db_vers_a,Werte.Version().c_str(),sizeof(db_vers_a));
  strncpy(db_art_a,"Ausruestung",sizeof(db_art_a));
  int self=0;

  for(AusruestungBaum::const_iterator i=besitz.begin();i!=besitz.end();++i)
   {
     strncpy(db_fert_a,i->getAusruestung().Name().c_str(),sizeof(db_fert_a));
     strncpy(db_magisch_a,i->getAusruestung().Material().c_str(),sizeof(db_magisch_a));
     db_wert_a=i->getAusruestung().Sichtbar();
     db_self=++self;
     exec sql insert into charaktere_fertigkeiten
        (charakter_name,version,fertigkeit,wert,art,av_bonus,sl_bonus,magisch) VALUES
        (:db_name_a,:db_vers_a,:db_fert_a,:db_wert_a,:db_art_a,0,:db_self,:db_magisch_a) ;
     SQLerror::test(__FILELINE__);
     save_ausruestung_C(self,self,i->getChildren());
   }
}

void midgard_CG::save_ausruestung_C(int parent,int &self,const list<AusruestungBaum> &AB)
{ exec sql begin declare section;
    char db_name_ac[50];
    char db_vers_ac[50];
    char db_art_ac[50],db_fert_ac[50],db_magisch_ac[50];
    int db_wert_ac,db_parent,db_self_ac;
  exec sql end declare section;
  strncpy(db_name_ac,Werte.Name_Abenteurer().c_str(),sizeof(db_name_ac));
  strncpy(db_vers_ac,Werte.Version().c_str(),sizeof(db_vers_ac));
  strncpy(db_art_ac,"Ausruestung",sizeof(db_art_ac));

  for(AusruestungBaum::const_iterator i=AB.begin();i!=AB.end();++i)
   {
     strncpy(db_fert_ac,i->getAusruestung().Name().c_str(),sizeof(db_fert_ac));
     strncpy(db_magisch_ac,i->getAusruestung().Material().c_str(),sizeof(db_magisch_ac));
     db_wert_ac=i->getAusruestung().Sichtbar();
     db_parent=parent;
     db_self_ac=++self;
     exec sql insert into charaktere_fertigkeiten
        (charakter_name,version,fertigkeit,wert,art,av_bonus,sl_bonus,magisch) VALUES
        (:db_name_ac,:db_vers_ac,:db_fert_ac,:db_wert_ac,:db_art_ac,:db_parent,:db_self_ac,:db_magisch_ac) ;
     SQLerror::test(__FILELINE__);
     save_ausruestung_C(db_self_ac,self,i->getChildren());
   }
}
#else
void midgard_CG::save_ausruestung(ostream &datei,const list<AusruestungBaum> &AB, const int indent)
{  
  for(AusruestungBaum::const_iterator i=AB.begin();i!=AB.end();++i)
   {  datei << string(indent,' ') << "<Gegenstand";
      write_string_attrib(datei, "Bezeichnung", i->getAusruestung().Name());
      write_string_attrib(datei, "Besonderheit", i->getAusruestung().Material());
      write_bool_attrib(datei, "sichtbar", i->getAusruestung().Sichtbar());
      if (i->empty()) datei << "/>\n";
      else
      {  datei << ">\n";
         save_ausruestung(datei, i->getChildren(), indent+2);
         datei << string(indent,' ') << "</Gegenstand>\n";
      }
   }
}
#endif

#ifndef USE_XML
void midgard_CG::charakter_db_anlegen()
{
  
   exec sql begin declare section;
      char db_name_ch[50];
      char db_version[50];
   exec sql end declare section;
   strncpy(db_name_ch,(Werte.Name_Abenteurer()).c_str(),sizeof(db_name_ch));
   strncpy(db_version,(Werte.Version().c_str(),sizeof(db_version));
   std::cout << "Neuen Abenteurer "<< db_name_ch  <<" in Datenbank anlegen\n";
   exec sql insert into charaktere 
        (charakter_name,version)
     values (:db_name_ch,:db_version);
   on_speichern_clicked();   
}
#endif
