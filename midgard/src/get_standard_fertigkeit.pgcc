/*  Midgard Character Generator
 *  Copyright (C) 2001 Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

// generated 2001/2/11 14:16:06 CET by thoma@ig23.
// using glademm V0.5_11c
//
// newer (non customized) versions of this file go to Zauber_auswahl.cc_new

// This file is for your program, I won't touch it again!

#include <Aux/Transaction.h>
#include <Aux/SQLerror.h>
exec sql include sqlca;
#include "midgard_CG.hh"
#include <cstring>
#include <Gtk_OStream.h>
#include "class_Ausnahmen.hh"

double midgard_CG::get_standard_fertigkeit(const std::string& typ, const std::string& typ_2, const std::string& fertigkeit)
{
   Ausnahmen ausnahmen(Werte,Typ,Typ2,vec_Beruf);
   double fac;
   // gibt es eine Ausnahmeregelung?
   fac = ausnahmen.Ausnahmen_float(fertigkeit);
   if (fac!=0) return fac;

  exec sql begin declare section;
   char db_ergebnis[20],db_ergebnis2[20];
   char query[200];
  exec sql end declare section;
  strncpy(db_ergebnis2,"",sizeof(db_ergebnis2));
  std::string squery = "select "+typ ;
  if (typ_2!="") squery += ", " + typ_2 ; 
  squery += " from fertigkeiten where fertigkeit  = '"+fertigkeit+"'";
  strncpy(query,squery.c_str(),sizeof(query));  

   Transaction tr;
   exec sql prepare fert from :query ;    
    exec sql declare fertig cursor for fert ;

    exec sql open fertig;
    SQLerror::test(__FILELINE__);
    if (typ_2!="") exec sql fetch fertig into  :db_ergebnis, :db_ergebnis2;
    else exec sql fetch fertig into  :db_ergebnis;
    SQLerror::test(__FILELINE__,100);  

    exec sql close fertig;
   return(get_standard_fertigkeit_(db_ergebnis,db_ergebnis2,fertigkeit));
}

double midgard_CG::get_standard_fertigkeit_(const std::string& ergebnis,const std::string& ergebnis2,const std::string& fertigkeit)
{
   Ausnahmen ausnahmen(Werte,Typ,Typ2,vec_Beruf);
   double fac;
   // gibt es eine Ausnahmeregelung?
   fac = ausnahmen.Ausnahmen_float(fertigkeit);
   if (fac!=0) return fac;

  if (ergebnis=="G" || ergebnis2=="G") return 0.5;
  if (ergebnis=="S" && (ergebnis2=="S" || ergebnis2=="")) return 1.0;
  if (ergebnis2=="S" && (ergebnis=="S" || ergebnis=="")) return 1.0;
  else return 2.0;
//  if (ergebnis=="A") return 2.0;
  abort();
}
