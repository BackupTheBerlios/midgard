// $Id: xml.pgcc,v 1.6 2001/04/23 10:55:32 thoma Exp $
/*  Midgard Roleplaying Character Generator
 *  Copyright (C) 2001 Christof Petig
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include <string>
#include <Aux/FetchIStream.h>
#include <iostream>
#include <fstream>
#include <Aux/Transaction.h>
#include <Aux/dbconnect.h>
exec sql include sqlca;

void fetch_and_write_int(FetchIStream &is,ostream &o,const string &wert,int indent=0)
{  int val;
   
   is >> FetchIStream::MapNull<int>(val,0);
   if (!val) return;
   for (int i=0;i<indent;++i) o << ' ';
   o << '<' << wert << '>' << val << "</" << wert << ">\n";
}

void fetch_and_write_int_attrib(FetchIStream &is,ostream &o,const string &wert)
{  int val;
   
   is >> FetchIStream::MapNull<int>(val,0);
   if (!val) return;
   o << ' ' << wert << "=\"" << val << '\"';
}

void fetch_and_write_string(FetchIStream &is,ostream &o,const string &wert,int indent=0)
{  string val;
   
   is >> FetchIStream::MapNull<string>(val,""); 
   if (!val.size()) return;
   // val in XML wandeln ...
   for (int i=0;i<indent;++i) o << ' ';
   o << '<' << wert << '>' << val << "</" << wert << ">\n";
}

void fetch_and_write_string_attrib(FetchIStream &is,ostream &o,const string &wert)
{  string val;
   
   is >> FetchIStream::MapNull<string>(val,""); 
   if (!val.size()) return;
   // val in XML wandeln ...
   o << ' ' << wert << "=\"" << val << '\"';
}

void charakter_speichern(ostream &o, const string &name,const string &version="")
{  exec sql begin declare section;
   char *NAME,*VERSION;
   exec sql end declare section;
   
   (const char*)NAME=name.c_str();
   (const char*)VERSION=version.c_str();
   
   Transaction t;
   exec sql allocate descriptor spalten;
   exec sql declare c cursor for
   	select charakter_name, spieler_name, version, grad, 
   		typ_l, typ_s, spezialisierung, 
   		st, ge, ko, inn, zt, au, pa,
   		sb, rw, hgw, b, kaw, wlw, abwehr, zaubern,
   		psy, phs, phk, gift, lpbasis, lp, ap, alter, gestalt,
   		gewicht, groesse, stand, herkunft,
   		glaube, db_bo_au_typ, db_bo_au, db_bo_sc, db_bo_an, 
   		db_bo_ab, db_bo_za, db_bo_psy, db_bo_phs, db_bo_phk,
   		db_bo_gi, db_gfp, gold, silber, kupfer, ruestung,
   		beschreibung
   	from charaktere 
   	where charakter_name=:NAME and version=:VERSION;
   exec sql open c;
   SQLerror::test(__FILELINE__);
   exec sql fetch c into sql descriptor spalten;
   SQLerror::test(__FILELINE__);
   exec sql close c;
   SQLerror::test(__FILELINE__);
   FetchIStream is("spalten");
   o << "<?xml version=\"1.0\"?>\n\n"
   	"<Midgard-Charakter>\n"
   	"  <XMLVersion>1</XMLVersion>\n";
   fetch_and_write_string(is, o, "Name",2);
   fetch_and_write_string(is, o, "Spieler", 2);
   fetch_and_write_string(is, o, "Zeitpunkt", 2);
   fetch_and_write_int(is, o, "Grad", 2);
   o << "  <Typ";
   fetch_and_write_string_attrib(is, o, "Bezeichnung");
   fetch_and_write_string_attrib(is, o, "Abkuerzung");
   fetch_and_write_string_attrib(is, o, "Spezialisierung");
   o << "/>\n";
   o << "  <Basiseigenschaften";
   fetch_and_write_int_attrib(is, o, "St");
   fetch_and_write_int_attrib(is, o, "Ge");
   fetch_and_write_int_attrib(is, o, "Ko");
   fetch_and_write_int_attrib(is, o, "In");
   fetch_and_write_int_attrib(is, o, "Zt");
   o << "/>\n";
   o << "  <abgeleiteteEigenschaften";
   fetch_and_write_int_attrib(is, o, "Au");
   fetch_and_write_int_attrib(is, o, "pA");
   fetch_and_write_int_attrib(is, o, "Sb");
   fetch_and_write_int_attrib(is, o, "RW");
   fetch_and_write_int_attrib(is, o, "HGW");
   fetch_and_write_int_attrib(is, o, "B");
   fetch_and_write_int_attrib(is, o, "KAW");
   fetch_and_write_int_attrib(is, o, "WLW");
   o << "/>\n";
   o << "  <Erfolgswerte";
   fetch_and_write_int_attrib(is, o, "Abwehr");
   fetch_and_write_int_attrib(is, o, "Zaubern");
   o << "/>\n";
   o << "  <Resistenzen";
   fetch_and_write_int_attrib(is, o, "psy");
   fetch_and_write_int_attrib(is, o, "phs");
   fetch_and_write_int_attrib(is, o, "phk");
   fetch_and_write_int_attrib(is, o, "Gift");
   o << "/>\n";
   o << "  <Gesundheit"; // schlechter Name ?
   fetch_and_write_int_attrib(is, o, "LP_Basis");
   fetch_and_write_int_attrib(is, o, "LP");
   fetch_and_write_int_attrib(is, o, "AP");
   o << "/>\n";
   o << "  <Beschreibung"; // soziale?
   fetch_and_write_int_attrib(is, o, "Alter");
   fetch_and_write_string_attrib(is, o, "Gestalt");
   fetch_and_write_int_attrib(is, o, "Gewicht");
   fetch_and_write_int_attrib(is, o, "Groesse");
   fetch_and_write_string_attrib(is, o, "Stand");
   fetch_and_write_string_attrib(is, o, "Herkunft");
   fetch_and_write_string_attrib(is, o, "Glaube");
   o << "/>\n";
   o << "  <Boni"; 
   fetch_and_write_int_attrib(is, o, "Ausdauer_Typ");
   fetch_and_write_int_attrib(is, o, "Ausdauer");
   fetch_and_write_int_attrib(is, o, "Schaden");
   fetch_and_write_int_attrib(is, o, "Angriff");
   fetch_and_write_int_attrib(is, o, "Abwehr");
   fetch_and_write_int_attrib(is, o, "Zaubern");
   o << ">\n";
   o << "    <Resistenzen";
   fetch_and_write_int_attrib(is, o, "psy");
   fetch_and_write_int_attrib(is, o, "phs");
   fetch_and_write_int_attrib(is, o, "phk");
   fetch_and_write_int_attrib(is, o, "Gift");
   o << "/>\n";
   o << "  </Boni>\n"; 
   fetch_and_write_int(is, o, "GFP", 2);
   o << "  <Vermoegen";
   fetch_and_write_int_attrib(is, o, "GS");
   fetch_and_write_int_attrib(is, o, "SS");
   fetch_and_write_int_attrib(is, o, "KS");
   o << "/>\n";
   fetch_and_write_string(is, o, "Ruestung", 2);
   fetch_and_write_string(is, o, "Text", 2);

   o << "  <Fertigkeiten>\n";   
   exec sql declare c2 cursor for
        select art, fertigkeit, wert, av_bonus, sl_bonus
   	from charaktere_fertigkeiten
   	where charakter_name=:NAME and version=:VERSION
   	order by art, fertigkeit;
   exec sql open c2;
   SQLerror::test(__FILELINE__);
   while (!sqlca.sqlcode)
   {  exec sql fetch c2 into sql descriptor spalten;
      SQLerror::test(__FILELINE__,100);
      if (sqlca.sqlcode) break;
      string typ;
      FetchIStream is2("spalten");
      is2 >> typ;
      // oder <Beruf Wert=12>Arzt</Beruf> ?
      o << "    <"<<typ;
      fetch_and_write_string_attrib(is2, o, "Bezeichnung");
      fetch_and_write_int_attrib(is2, o, "Wert");
      fetch_and_write_int_attrib(is2, o, "AngriffVerteidigung_Bonus");
      fetch_and_write_int_attrib(is2, o, "SchadenLebenspunkte_Bonus");
      o << "/>\n";
   }
   exec sql close c2;
   SQLerror::test(__FILELINE__);
   o << "  </Fertigkeiten>\n";   
   
   o << "</Midgard-Charakter>\n";
   exec sql deallocate descriptor spalten;
}

int main(int argc, char *argv[])
{  
   if (argc!=3) {cerr << "FEHLER: "<<argv[0]<<" muß mit 'Charaktername' und 'Version' aufgerufen werden\n";
      exit(1); };
   try{
      Petig::Connection conn;
      conn.setDbase("midgard");
      Petig::dbconnect(conn);

   charakter_speichern(cout,argv[1],argv[2]);
   Petig::dbdisconnect();
   } catch (SQLerror &e)
   {  cerr << e << '\n';
   }
   return 0;
}
