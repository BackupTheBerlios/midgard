/*  Midgard Character Generator
 *  Copyright (C) 2001 Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

// generated 2001/2/8 11:08:32 CET by thoma@ig23.
// using glademm V0.5_11c
//
// newer (non customized) versions of this file go to Fertigkeiten_auswahl.cc_new

// This file is for your program, I won't touch it again!

#include "Fertigkeiten_auswahl.hh"
#include <Aux/Transaction.h>
#include <Aux/SQLerror.h>
exec sql include sqlca;
#include "midgard_CG.hh"
#include <cstring>
#include <Gtk_OStream.h>
#include "Sprache_auswahl.hh"


Fertigkeiten_auswahl::Fertigkeiten_auswahl(midgard_CG* h,const vector<H_Data_typen>& Typ,
     int lernpunkte, const Grundwerte& Werte,const std::vector<H_Data_beruf>& vec_Beruf)
{
 while(Gtk::Main::events_pending()) Gtk::Main::iteration() ;
try{
  hauptfenster=h;
  maxpunkte = lernpunkte;
  fert_auswahl_lernpunkte->set_text(itos(maxpunkte));
  // Berufsvorteile
  std::vector<string> vorteile=hauptfenster->Berufs_Vorteile();

  // Lernschema //////////////////////////////////////////////////////////////
  exec sql begin declare section;
   int db_lernpunkte;
   int db_erfolgswert;
   char db_fertigkeit[100]; 
   char query[10240];
   bool db_pflicht;
   char db_spezies[50];
  exec sql end declare section;
  strncpy(db_spezies,(Werte.Spezies()).c_str(),sizeof(db_spezies));
  
   Transaction tr;
   // Speziesspezifische Fertigkeiten ///////////////////////////////
   exec sql declare fert_spezies cursor for
      select coalesce(p.lernpunkte,0), coalesce(p.pflicht,''),
            coalesce(p.erfolgswert,0) 
         from pflicht_lernen p
         where typ = :db_spezies 
         and p.pflicht  not in (select verboten from pflicht_lernen where
         typ=:db_spezies  and verboten is not null);
   exec sql open fert_spezies;
   SQLerror::test(__FILELINE__,100);
   while (true)
      {
         exec sql fetch fert_spezies into :db_lernpunkte, :db_fertigkeit,:db_erfolgswert;
         SQLerror::test(__FILELINE__,100);
         if (sqlca.sqlcode) break;
         cH_MidgardBasicElement fertigkeit(new Fertigkeit(db_fertigkeit,db_lernpunkte,true));
         cH_Fertigkeit(fertigkeit)->set_Erfolgswert(db_erfolgswert);
         list_Fert.push_back(fertigkeit);
      }
   exec sql close fert_spezies;

   // Lernschema
     std::string squery = " select fertigkeit,lernpunkte,pflicht 
         from lernschema
         where ";
      if (Typ[1]->Short()=="") squery += " typ = '"+Typ[0]->Short()+"' ";
      if (Typ[1]->Short()!="") squery += " (typ = '"+Typ[0]->Short()+"' or typ = '"+Typ[1]->Short()+"') ";
      squery += " and art = 'Fertigkeit' and not exists (select true from 
            pflicht_lernen where typ='"+Werte.Spezies()+"' 
            and verboten=fertigkeit) order by lernpunkte";
   strncpy(query,squery.c_str(),sizeof(query));
   exec sql prepare sfert from :query;
   exec sql declare cfertigkeiten cursor for sfert;
   exec sql open cfertigkeiten;// using :db_spezies;
   SQLerror::test(__FILELINE__);
   while (true)
      {
         exec sql fetch cfertigkeiten into :db_fertigkeit, :db_lernpunkte,:db_pflicht;
         SQLerror::test(__FILELINE__,100);
         if (sqlca.sqlcode) break;
         cH_MidgardBasicElement fertigkeit(new Fertigkeit(db_fertigkeit,db_lernpunkte,db_pflicht));
         cH_Fertigkeit(fertigkeit)->set_Erfolgswert(cH_Fertigkeit(fertigkeit)->Anfangswert0());
         if (hauptfenster->region_check(fertigkeit->Region()))
            list_Fert.push_back(fertigkeit);
      }
   exec sql close cfertigkeiten;
  
   Gtk::OStream os(fertigkeiten_clist_auswahl);
   fertigkeiten_clist_auswahl->freeze();
   for(std::list<cH_MidgardBasicElement>::iterator i=list_Fert.begin();i!=list_Fert.end();++i)
      { cH_Fertigkeit f(*i);
        int v=0;
        for (std::vector<string>::const_iterator j=vorteile.begin();j!=vorteile.end();++j)
            if ((*j)==f->Name()) v=1;
        std::string serfolgswert=itos(f->Erfolgswert());
        if (serfolgswert=="0") serfolgswert="";
        if ( //(hauptfenster->Fertigkeiten_Voraussetzung(f->Name())
             (f->Voraussetzungen(Werte) || Werte.Spezies()!="Mensch") &&
            Fertigkeiten_spezies_voraussetzung(f->Name(),Werte.Spezies()))
         { os << f->Lernpunkte()-v <<"\t"<<f->Voraussetzung()<<"\t"<<f->Pflicht()<<"\t"<<f->Name()<<"\t"
               << serfolgswert<<"\t"<<f->Attribut()<<"\t"<<f->Kosten()<<"\n";
            os.flush(&*i);
         }
      }
   // andere Fertigkeiten ////////////////////////////////////////////////

  squery = "SELECT fertigkeit FROM fertigkeiten where fp != 0  \
      AND fertigkeit NOT IN (SELECT fertigkeit from lernschema where ";
   if (Typ[1]->Short()=="") squery += " typ = '"+Typ[0]->Short()+"') ";
   if (Typ[1]->Short()!="") squery += " (typ = '"+Typ[0]->Short()+"' or typ = '"+Typ[1]->Short()+"')) ";
      squery += " ORDER BY fertigkeit" ; 

   strncpy(query,squery.c_str(),sizeof(query));
   exec sql prepare san_fert from :query;
   exec sql declare an_fert cursor for san_fert;
   exec sql open an_fert;
   SQLerror::test(__FILELINE__);

   while(true)
      {
         exec sql fetch an_fert into :db_fertigkeit;
         SQLerror::test(__FILELINE__,100);
         if (sqlca.sqlcode) break;

         cH_MidgardBasicElement fertigkeit(new Fertigkeit(db_fertigkeit));
         cH_Fertigkeit(fertigkeit)->set_Erfolgswert(cH_Fertigkeit(fertigkeit)->Anfangswert0());
         if (hauptfenster->region_check(fertigkeit->Region()))
            list_allg_Fert.push_back(fertigkeit);
      }
   exec sql close an_fert;

   os <<"\n\n";   
   for(std::list<cH_MidgardBasicElement>::iterator i=list_allg_Fert.begin();i!=list_allg_Fert.end();++i)
      { cH_Fertigkeit f(*i);
        int v=0;
        for (std::vector<string>::const_iterator j=vorteile.begin();j!=vorteile.end();++j)
           if ((*j)==f->Name()) v=1;
        std::string serfolgswert=itos(f->Erfolgswert());
        if (serfolgswert=="0") serfolgswert="";
        if ( //hauptfenster->Fertigkeiten_Voraussetzung(f->Name()) &&
            f->Voraussetzungen(Werte) && Fertigkeiten_spezies_voraussetzung(f->Name(),Werte.Spezies()))
         { os << f->Lernpunkte()-v<<"\t"<<f->Voraussetzung()<<"\t"<<""<<"\t"<<f->Name()<<"\t"
              << serfolgswert<<"\t"<<f->Attribut()<<"\t"<<f->Kosten()<<"\n";
           os.flush(&*i);
         }
      }

   for (unsigned int i=0;i<fertigkeiten_clist_auswahl->columns().size();++i)
      fertigkeiten_clist_auswahl->set_column_auto_resize(i,true);

   fertigkeiten_clist_auswahl->set_selection_mode(GTK_SELECTION_MULTIPLE);
   fertigkeiten_clist_auswahl->set_reorderable(true);
   fertigkeiten_clist_auswahl->thaw();

} catch (SQLerror &e)
{ cerr << e << '\n';
}
}

void Fertigkeiten_auswahl::on_close_fertigkeiten_clicked()
{
   std::list<cH_MidgardBasicElement> saf;
   for (Gtk::CList::SelectionList::iterator i=fertigkeiten_clist_auswahl->selection().begin();
         i!=fertigkeiten_clist_auswahl->selection().end();++i)
     {  
//      cH_Fertigkeit *ptr = static_cast<cH_Fertigkeit*>(i->get_data());
      cH_MidgardBasicElement *ptr = static_cast<cH_MidgardBasicElement*>(i->get_data());
      saf.push_back(*ptr);
     }
  hauptfenster->MidgardBasicElement_uebernehmen(saf);
  destroy();
}


void Fertigkeiten_auswahl::on_fertigkeiten_clist_auswahl_select_row(gint row, gint column, GdkEvent *event)
{
   if (maxpunkte < atoi(fertigkeiten_clist_auswahl->get_text(row,0).c_str() ))
      {
         fertigkeiten_clist_auswahl->row(row).unselect();
      }
   maxpunkte -= atoi(fertigkeiten_clist_auswahl->get_text(row,0).c_str());
   fert_auswahl_lernpunkte->set_text(itos(maxpunkte));
   // Sprache oder Schrift?
   std::string fert = fertigkeiten_clist_auswahl->get_text(row,3);
   if (fert == "Sprache" || fert == "Lesen/Schreiben" )
    {
      if (maxpunkte >=  atoi(fertigkeiten_clist_auswahl->get_text(row,0).c_str() ))
         manage (new Sprache_auswahl(hauptfenster,fert));
    }
}

void Fertigkeiten_auswahl::on_fertigkeiten_clist_auswahl_unselect_row(gint row, gint column, GdkEvent *event)
{
   maxpunkte += atoi(fertigkeiten_clist_auswahl->get_text(row,0).c_str());
   fert_auswahl_lernpunkte->set_text(itos(maxpunkte));
}

bool Fertigkeiten_auswahl::Fertigkeiten_spezies_voraussetzung(const std::string& name,const std::string& spezies)
{
  exec sql begin declare section;
   char db_spezies[50],db_verboten[50];
   char dummy[50];
  exec sql end declare section;
  strncpy(db_spezies,spezies.c_str(),sizeof(db_spezies));
  strncpy(db_verboten,name.c_str(),sizeof(db_verboten));
  exec sql select verboten into :dummy from pflicht_lernen 
      where typ = :db_spezies and verboten = :db_verboten;
  SQLerror::test(__FILELINE__,100);
  if (sqlca.sqlcode) return true;
  else return false;
  abort();
}
