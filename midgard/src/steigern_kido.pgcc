/*  Midgard Character Generator
 *  Copyright (C) 2001 Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include "midgard_CG.hh"
#include <Aux/Transaction.h>
#include <Aux/SQLerror.h>
exec sql include sqlca;
#include <cstring>
#include <Gtk_OStream.h>
#include <strstream>
#include "WindowInfo.hh"


void midgard_CG::on_kido_laden_clicked()
{   
 midgard_CG::on_speichern_clicked();
 midgard_CG::show_alte_kido();
 midgard_CG::show_neue_kido();
}


void midgard_CG::show_alte_kido()
{
   steigern_kido_clist_alt->clear();
   Gtk::OStream os(steigern_kido_clist_alt);
   for (vector<st_kido>::iterator i=vec_kido.begin(); i!=vec_kido.end();++i)
      {
         double fac = midgard_CG::get_standard_fertigkeit(typ.s,"KiDo");
         os << i->hoho<<"\t"<<i->technik<<"\t"<<i->stufe<<"\t"
            << i->ap<<"\t"<<fac*i->fp<<"\t"<<i->stil<<"\n";
      }
   for (unsigned int i=0;i<steigern_kido_clist_alt->columns().size();++i)
      steigern_kido_clist_alt->set_column_auto_resize(i,true);
   steigern_kido_clist_alt->set_reorderable(true);
}

int midgard_CG::get_erfolgswert_kido()
{
 for (vector<st_ausgewaehlte_fertigkeiten>::const_iterator
      i= vec_fertigkeiten.begin();i!=vec_fertigkeiten.end();++i)
   {
      if (i->name == "KiDo") return i->erfolgswert; 
   }
 // should never get here 
 string strinfo="WARNUNG: Dieser Charakter beherrscht die Fertigkeit KiDo nicht.";
 manage (new WindowInfo(strinfo));
 return 0; 
}

void midgard_CG::show_neue_kido()
{
  vector<st_kido> new_kido;
  steigern_kido_clist_neu->clear();
  exec sql begin declare section;
   char db_hoho[50];
   char query[1024];
  exec sql end declare section;
  string stufe_constraint ="";

  // Stufe
  if (werte.grad<=4 || get_erfolgswert_kido()+werte.bo_za <=15)
      stufe_constraint += " and stufe != 'Eingeweihter' ";
  if (werte.grad<=6 || get_erfolgswert_kido()+werte.bo_za <=18)
      stufe_constraint += " and stufe != 'Meister' ";
  // Stil
  if (werte.spezialisierung=="Harte Techniken")
      stufe_constraint += " and stil != 'Sanfte Techniken' ";
  if (werte.spezialisierung=="Sanfte Techniken")
      stufe_constraint += " and stil != 'Harte Techniken' ";
  // Maximale mögliche Techniken einer Stufe erreicht
  if (werte.spezialisierung=="Harte Techniken" || werte.spezialisierung=="Sanfte Techniken")
   {
     if (maxkidostil("Schüler") >= 12 )
         stufe_constraint += " and stufe != 'Schüler' ";
     if (maxkidostil("Eingeweihter") >= 7 )
         stufe_constraint += " and stufe != 'Eingeweihter' ";
     if (maxkidostil("Meister") >= 3 )
         stufe_constraint += " and stufe != 'Meister' ";
   }
  else
   {
     if (maxkidostil("Schüler") >= 11 )
         stufe_constraint += " and stufe != 'Schüler' ";
     if (maxkidostil("Eingeweihter") >= 6 )
         stufe_constraint += " and stufe != 'Eingeweihter' ";
     if (maxkidostil("Meister") >= 2 )
         stufe_constraint += " and stufe != 'Meister' ";
   }

  string squery = "SELECT name_orig from kido \
   where name_orig not in (SELECT fertigkeit FROM charaktere_fertigkeiten \
   WHERE charakter_name = '"+werte.name_charakter+"' AND version = '"+
   werte.version+"') "+stufe_constraint+"order by 1";

  snprintf(query,sizeof(query),squery.c_str());
  Transaction tr;
  exec sql prepare kido_ein_ from :query ;
  exec sql declare kido_ein cursor for kido_ein_ ;
  exec sql open kido_ein;
  SQLerror::test(__FILELINE__);
  Gtk::OStream os(steigern_kido_clist_neu);
  while (true)
    {
       exec sql fetch kido_ein into :db_hoho;
         SQLerror::test(__FILELINE__,100);  
         if (sqlca.sqlcode) break;
         new_kido.push_back(st_kido(db_hoho,"","","",0,0,""));
      }
   exec sql close kido_ein;
   tr.commit();

   midgard_CG::get_kido(new_kido);
   double fac = midgard_CG::get_standard_fertigkeit(typ.s,"KiDo");
   for (vector<st_kido>::iterator i=new_kido.begin();i!=new_kido.end();++i)
     {
        os << i->hoho <<"\t"<< i->technik <<"\t"<<i->stufe<<"\t"
            <<i->ap<<"\t"<<fac*i->fp<<"\t"<<i->stil<<"\n";
     }
   for (unsigned int i=0;i<steigern_kido_clist_neu->columns().size();++i)
      steigern_kido_clist_neu->set_column_auto_resize(i,true);
   steigern_kido_clist_neu->set_reorderable(true);
}


void midgard_CG::on_steigern_kido_clist_alt_select_row(gint row, gint column, GdkEvent *event)
{   
   string alt_kido = steigern_kido_clist_alt->get_text(row,0);
   int alt_kosten = atoi(steigern_kido_clist_alt->get_text(row,4).c_str());
   werte.gfp -= alt_kosten;
   for (vector<st_kido>::iterator i=vec_kido.begin();
            i!= vec_kido.end();++i) 
      if (i->hoho==alt_kido) {vec_kido.erase(i);break;}

   midgard_CG::zeige_werte(werte,"alle");
   midgard_CG::show_kido();
   midgard_CG::on_speichern_clicked();
   midgard_CG::show_alte_kido();
   midgard_CG::show_neue_kido();
}

void midgard_CG::on_steigern_kido_clist_neu_select_row(gint row, gint column, GdkEvent *event)
{   
  int new_kosten = atoi(steigern_kido_clist_neu->get_text(row,4).c_str());
  string new_name = steigern_kido_clist_neu->get_text(row,0);
  werte.gfp += new_kosten;
  vec_kido.push_back(st_kido(new_name,"","","",0,0,""));
  get_kido(vec_kido);

  midgard_CG::show_kido();
  midgard_CG::on_speichern_clicked();
  midgard_CG::zeige_werte(werte,"alle");
  midgard_CG::show_alte_kido();
  midgard_CG::show_neue_kido();
}

int midgard_CG::maxkidostil(const string& stufe)
{
  int count=0;
  for (vector<st_kido>::const_iterator i=vec_kido.begin();
      i!=vec_kido.end();++i)
   {
     if (i->stufe==stufe) ++count;
   }
cout << count<<"\n";
return count;
}
