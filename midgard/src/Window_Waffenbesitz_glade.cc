// generated 2001/8/14 13:28:45 CEST by thoma@Tiger.
// using glademm V0.6.2_cvs
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- /home/thoma/rollenspiel/midgard/programme/gcc_3.0/midgard/midgard.glade
// for gtk 1.2.8 and gtkmm 1.2.5
//
// Please modify the corresponding derived classes in ./src/Window_Waffenbesitz.cc

#include "config.h"
#include "Window_Waffenbesitz.hh"
#include <gtk--/label.h>
#include <gtk--/pixmap.h>
#include "../pixmaps/Weapon-trans-50.xpm"
#include <gtk--/button.h>
#include "../pixmaps/SchliessenIII-50.xpm"
#include <gtk--/toolbar.h>
#include <gtk--/box.h>
#include <gtk--/viewport.h>
#include <gtk--/scrolledwindow.h>
#include "../pixmaps/Sort_Weapon-trans-50.xpm"
#include <gtk--/table.h>

Window_Waffenbesitz_glade::Window_Waffenbesitz_glade(
) : Gtk::Window(GTK_WINDOW_TOPLEVEL)
{   
   
   Gtk::Window *Window_Waffenbesitz = this;
   Gtk::Label *label315 = manage(new class Gtk::Label("Besitz"));
   Gtk::Label *label316 = manage(new class Gtk::Label("Erwerb"));
   Gtk::Pixmap *pixmap9 = manage(new class Gtk::Pixmap(Weapon_trans_50_xpm));
   Gtk::Toolbar *toolbar29 = manage(new class Gtk::Toolbar(GTK_ORIENTATION_HORIZONTAL, GTK_TOOLBAR_ICONS));
   Gtk::Button *button58 = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar29->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(SchliessenIII_50_xpm))->gtkobj()), 0, 0));
   Gtk::HBox *hbox18 = manage(new class Gtk::HBox(false, 0));
   waffenbesitz_alt_tree = new class SimpleTree(3);
   
   Gtk::Viewport *viewport20 = manage(new class Gtk::Viewport());
   Gtk::ScrolledWindow *scrolledwindow56 = manage(new class Gtk::ScrolledWindow());
   waffenbesitz_neu_tree = new class SimpleTree(3);
   
   Gtk::Viewport *viewport21 = manage(new class Gtk::Viewport());
   Gtk::ScrolledWindow *scrolledwindow57 = manage(new class Gtk::ScrolledWindow());
   Gtk::Toolbar *toolbar35 = manage(new class Gtk::Toolbar(GTK_ORIENTATION_HORIZONTAL, GTK_TOOLBAR_BOTH));
   Gtk::Button *button_sort = Gtk::wrap((GtkButton*)gtk_toolbar_append_element(GTK_TOOLBAR(toolbar35->gtkobj()), GTK_TOOLBAR_CHILD_BUTTON, 0, "Waffen sortieren", 0, 0, GTK_WIDGET(manage(new Gtk::Pixmap(Sort_Weapon_trans_50_xpm))->gtkobj()), 0, 0));
   checkbutton_mag_waffenbonus = manage(new class Gtk::CheckButton("mag.Bonus angeben"));
   
   Gtk::Table *table70 = manage(new class Gtk::Table(1, 2, false));
   Gtk::Table *table43 = manage(new class Gtk::Table(3, 3, false));
   label315->set_alignment(0, 0.5);
   label315->set_padding(0, 0);
   label316->set_alignment(0, 0.5);
   label316->set_padding(0, 0);
   pixmap9->set_alignment(0.5, 0.5);
   pixmap9->set_padding(0, 0);
   toolbar29->set_border_width(5);
   toolbar29->set_space_size(5);
   toolbar29->set_tooltips(true);
   hbox18->pack_start(*toolbar29, false, false, 0);
   viewport20->set_shadow_type(GTK_SHADOW_NONE);
   viewport20->add(*waffenbesitz_alt_tree);
   scrolledwindow56->set_usize(250, 260);
   scrolledwindow56->set_policy(GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
   scrolledwindow56->add(*viewport20);
   viewport21->set_shadow_type(GTK_SHADOW_NONE);
   viewport21->add(*waffenbesitz_neu_tree);
   scrolledwindow57->set_usize(250, 260);
   scrolledwindow57->set_policy(GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
   scrolledwindow57->add(*viewport21);
   button_sort->set_border_width(5);
   toolbar35->set_space_size(5);
   toolbar35->set_tooltips(true);
   _tooltips.set_tip(*checkbutton_mag_waffenbonus, "Nach dem aktivieren: Waffe wählen", "");
   table70->attach(*toolbar35, 0, 1, 0, 1, GTK_FILL, 0, 0, 0);
   table70->attach(*checkbutton_mag_waffenbonus, 1, 2, 0, 1, GTK_FILL, 0, 0, 0);
   table43->attach(*label315, 0, 1, 0, 1, 0, 0, 0, 3);
   table43->attach(*label316, 2, 3, 0, 1, GTK_EXPAND, 0, 0, 3);
   table43->attach(*pixmap9, 1, 2, 0, 1, GTK_EXPAND|GTK_FILL, GTK_FILL, 0, 0);
   table43->attach(*hbox18, 2, 3, 2, 3, 0, 0, 0, 3);
   table43->attach(*scrolledwindow56, 0, 1, 1, 2, GTK_EXPAND|GTK_FILL, GTK_EXPAND|GTK_FILL, 0, 0);
   table43->attach(*scrolledwindow57, 2, 3, 1, 2, GTK_EXPAND|GTK_FILL, GTK_EXPAND|GTK_FILL, 0, 0);
   table43->attach(*table70, 0, 1, 2, 3, GTK_FILL, GTK_FILL, 0, 0);
   Window_Waffenbesitz->set_title("Waffenbesitz");
   Window_Waffenbesitz->set_policy(false, true, true);
   Window_Waffenbesitz->add(*table43);
   label315->show();
   label316->show();
   pixmap9->show();
   toolbar29->show();
   hbox18->show();
   waffenbesitz_alt_tree->show();
   viewport20->show();
   scrolledwindow56->show();
   waffenbesitz_neu_tree->show();
   viewport21->show();
   scrolledwindow57->show();
   toolbar35->show();
   checkbutton_mag_waffenbonus->show();
   table70->show();
   table43->show();
   Window_Waffenbesitz->show();
   button58->clicked.connect(SigC::slot(static_cast<class Window_Waffenbesitz*>(this), &Window_Waffenbesitz::on_button_close_clicked));
   waffenbesitz_alt_tree->leaf_selected.connect(SigC::slot(static_cast<class Window_Waffenbesitz*>(this), &Window_Waffenbesitz::on_leaf_selected_alt));
   waffenbesitz_neu_tree->leaf_selected.connect(SigC::slot(static_cast<class Window_Waffenbesitz*>(this), &Window_Waffenbesitz::on_leaf_selected_neu));
   button_sort->clicked.connect(SigC::slot(static_cast<class Window_Waffenbesitz*>(this), &Window_Waffenbesitz::on_button_sort_clicked));
   checkbutton_mag_waffenbonus->toggled.connect(SigC::slot(static_cast<class Window_Waffenbesitz*>(this), &Window_Waffenbesitz::on_checkbutton_mag_waffenbonus_toggled));
}

Window_Waffenbesitz_glade::~Window_Waffenbesitz_glade()
{   delete waffenbesitz_alt_tree;
   delete waffenbesitz_neu_tree;
}
