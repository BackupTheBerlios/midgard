#include "Praxispunkte.hh"
#include <Aux/SQLerror.h>
#include <Aux/Transaction.h>
exec sql include sqlca;
#include <gtk--/main.h>
#include "MidgardBasicElement.hh"
#include "WindowInfo.hh"
#include "Waffe.hh"
#include "Fertigkeiten.hh"
#include "Grundwerte.hh"
#include "zufall.h"

Praxispunkte::Praxispunkte(Gtk::ProgressBar *progressbar)
{
  exec sql begin declare section;
   char NAME[50],query[1024];
   int MAX,FAK;
   int db_size;
  exec sql end declare section; 
  exec sql select count(name) into :db_size from praxispunkte;
  std::string squery="select name, max_wert,lernfaktor
      from praxispunkte order by name";
      
  strncpy(query,squery.c_str(),sizeof(query));
  Transaction tr;
  exec sql prepare cl_praxispunkte_ein_ from :query ;
  exec sql declare cl_praxispunkte_ein cursor for cl_praxispunkte_ein_ ;

  exec sql open cl_praxispunkte_ein;
  SQLerror::test(__FILELINE__);
  double count=0;
  while (true)
   {
     progressbar->set_percentage(count/db_size);
     while(Gtk::Main::events_pending()) Gtk::Main::iteration() ;
     exec sql fetch cl_praxispunkte_ein into :NAME,:MAX,:FAK;
     SQLerror::test(__FILELINE__,100);
     if (sqlca.sqlcode) break;
     prax_map[NAME] = st_map(MAX,FAK);
     ++count;
   }
 exec sql close cl_praxispunkte_ein;
 tr.close();
 progressbar->set_percentage(1);
}

bool Praxispunkte::wuerfeln(const cH_MidgardBasicElement& MBE,
                           const Grundwerte& Werte,
                           const vector<cH_Typen>& Typ,
                           bool wuerfeln)
{
 
 int Max,Faktor;
 if(MBE->What()==MidgardBasicElement::FERTIGKEIT)
  {  Max=prax_map[MBE->Name()].max_wert;
     Faktor=prax_map[MBE->Name()].lernfaktor;
  }
 else if(MBE->What()==MidgardBasicElement::WAFFE)
  {  Max=prax_map[cH_Waffe(MBE)->Art()].max_wert;
     Faktor=prax_map[cH_Waffe(MBE)->Art()].lernfaktor;
  }
 else assert(0);

 if(Max==0&&Faktor==0)
    {
      std::string strinfo ="Diese Fertigkeit kann nicht mit\n Praxispunkten gesteigert werden\n";  
      manage (new WindowInfo(strinfo));
      return false ;
    }

 if (MBE->What()==MidgardBasicElement::WAFFE)
  {
   if (Typ[0]->Short() == "Kr" || Typ[0]->Short() == "Sö" )
      {
        if (cH_Waffe(MBE)->Art() == "Angriff" || cH_Waffe(MBE)->Art()== "Fern") Max = 19;
        if (cH_Waffe(MBE)->Art() == "Verteidigung")                   Max = 8;
      }
   if (Typ[0]->Zaubern() == "z" )
      {
        if (cH_Waffe(MBE)->Art() == "Angriff" || cH_Waffe(MBE)->Art() == "Fern") Max = 14;
        if (cH_Waffe(MBE)->Art() == "Verteidigung")                    Max = 6;
      }
  }
 else // allg.Fertigkeit
   Max+=cH_Fertigkeit(MBE)->AttributBonus(Werte) ;

 if (Max <= MBE->Erfolgswert() )
  {
    std::string strinfo="Maximal möglicher Erfolgswert erreicht\n keine weitere Steigerung mehr möglich\n";
    manage (new WindowInfo(strinfo));
    return false ;
  }

 if (wuerfeln == false)  return true ;

 // Nur wenn gewürfelt werden soll:
 Random random;
 int wurf=random.integer(1,100);
 int soll=100-MBE->Erfolgswert()*Faktor;
 std::string strinfo= "Es wurde eine "+itos(wurf)+" gewürfelt.\n";
 strinfo += "PW: 100 - gegenwärtiger EW * Lernfaktor\n";
 strinfo += "PW: 100 - "+ itos(MBE->Erfolgswert())+ " * " +itos(Faktor)+
            " = "+itos(soll)+'\n';
 if (wurf <= 5 || wurf <= soll )
   {
      strinfo += " ---> GELUNGEN\n";
      manage (new WindowInfo(strinfo,true));
      return true;
   } 
 else
   { 
      strinfo += " ---> MIßLUNGEN\n";
      manage (new WindowInfo(strinfo,true));
      return false;
   }
}
