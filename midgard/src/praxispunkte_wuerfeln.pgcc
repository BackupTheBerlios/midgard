/*  Midgard Character Generator
 *  Copyright (C) 2001 Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include "midgard_CG.hh"
#include <Aux/Transaction.h>
#include <Aux/SQLerror.h>
#include "WindowInfo.hh"
#include <strstream>
exec sql include sqlca;

int midgard_CG::praxispunkte_wuerfeln(const std::string& fert,int alter_wert, const std::string& art, bool wuerfeln)
{
 Random random;
 exec sql begin declare section;
   int db_max_wert, db_lernfaktor;
   char db_fert[30], db_art[30], db_atr[10];
 exec sql end declare section;
 strncpy(db_fert,fert.c_str(),sizeof(db_fert));
 strstream strinfo;
 bool gelungen;

 if (art=="Waffe")
  {
   exec sql select DISTINCT p.max_wert,p.lernfaktor,w.art 
   into  :db_max_wert, :db_lernfaktor , :db_art
   from praxispunkte p,waffen w where p.name=w.art and w.name = :db_fert;
   SQLerror::test(__FILELINE__);
   std::string sdb_art = db_art;
   if (Typ.Short() == "Kr" || Typ.Short() == "Sö" ) 
      {
        if (sdb_art == "Angriff" || sdb_art == "Fern") db_max_wert = 19;
        if (sdb_art == "Verteidigung")             db_max_wert = 8;
      }
   if (Typ.Zaubern() == "z" ) 
      {
        if (sdb_art == "Angriff" || sdb_art == "Fern") db_max_wert = 14;
        if (sdb_art == "Verteidigung")             db_max_wert = 6;
      }
  }
 else // allg.Fertigkeit  
  {
   exec sql select p.max_wert,p.lernfaktor
   into  :db_max_wert, :db_lernfaktor 
   from praxispunkte p, steigern_fertigkeiten s 
   where p.name = s.wie and s.name = :db_fert;
   SQLerror::test(__FILELINE__,100);

   if (sqlca.sqlcode)
      {
         strinfo <<"Diese Fertigkeit kann nicht mit\n Praxispunkten "
            << "gesteigert werden\n"<<char(0);
         manage (new WindowInfo(strinfo.str()));
         return(gelungen=false);
      }
   exec sql select attribut into :db_atr 
      from fertigkeiten where fertigkeit= :db_fert;

      int hoches_attribut = midgard_CG::attribut_check(db_atr);
      db_max_wert += hoches_attribut;
  }

 if (db_max_wert <= alter_wert )
  {
    strinfo << "Maximal möglicher Erfolgswert erreicht\n";
    strinfo << "keine weitere Steigerung mehr möglich\n"<<char(0);
    strinfo.freeze(0);
    manage (new WindowInfo(strinfo.str()));
    return(gelungen = false);
  }
 if (wuerfeln == false)
  {
    return(gelungen = true);
  }
 // Nur wenn gewürfelt werden soll:
 int wurf=random.integer(1,100);
 int soll=100-alter_wert*db_lernfaktor;
 strinfo << "Es wurde eine "<<wurf<<" gewürfelt.\n";
 strinfo << "PW: 100 - gegenwärtiger EW * Lernfaktor\n";
 strinfo << "PW: 100 - "<<alter_wert<<" * "<<db_lernfaktor<<" = "<<soll<<"\n";
 if (wurf <= 5 || wurf <= soll )
   {
      strinfo << " ---> GELUNGEN\n";
      gelungen = true;
   }
 else 
   {
      strinfo << " ---> MIßLUNGEN\n";
      gelungen = false;
   }
 strinfo << char(0);
 manage (new WindowInfo(strinfo.str()));
 strinfo.freeze(0);
 return(gelungen);
}

