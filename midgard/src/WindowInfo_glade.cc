// generated 2002/12/11 19:15:29 CET by christof@puck.petig-baender.de
// using glademm V1.1.3c_cvs
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- --gnome2 midgard.glade
// for gtk 2.0.9 and gtkmm 2.0.1
//
// Please modify the corresponding derived classes in ./src/WindowInfo.cc

#include "config.h"
#include "WindowInfo_glade.hh"
#include <gdk/gdkkeysyms.h>
#include <gtkmm/accelgroup.h>
#include <gtkmm/image.h>
#include "../pixmaps/Excl-32.xpm"
#include <gtkmm/label.h>
#include <gtkmm/box.h>
#include "../pixmaps/Nein-32.xpm"
#include "../pixmaps/Yellow-Dice-trans-50.xpm"
#include "../pixmaps/Clear-32.xpm"
#include "../pixmaps/Angeb_Sicht-32.xpm"
#include <gtkmm/table.h>
#include "../pixmaps/Gross_ark_pre.xpm"

WindowInfo_glade::WindowInfo_glade(
) : Gtk::Window(Gtk::WINDOW_DIALOG)
{  
   
   Gtk::Window *WindowInfo = this;
   _data = new GlademmData(get_accel_group());
   LogWin = new class logwin();
   
   Glib::RefPtr<Gdk::Bitmap> _pixmap_ja_mask;
   Glib::RefPtr<Gdk::Pixmap> _pixmap_ja_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _pixmap_ja_mask, Excl_32_xpm);
   Gtk::Image *pixmap_ja = manage(new class Gtk::Image(_pixmap_ja_pixmap, _pixmap_ja_mask));
   Gtk::Label *label570 = manage(new class Gtk::Label("Ja"));
   Gtk::HBox *hbox73 = manage(new class Gtk::HBox(false, 0));
   button_bestaetigen = manage(new class Gtk::Button());
   
   Glib::RefPtr<Gdk::Bitmap> _pixmap_nein_mask;
   Glib::RefPtr<Gdk::Pixmap> _pixmap_nein_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _pixmap_nein_mask, Nein_32_xpm);
   Gtk::Image *pixmap_nein = manage(new class Gtk::Image(_pixmap_nein_pixmap, _pixmap_nein_mask));
   Gtk::Label *label569 = manage(new class Gtk::Label("Nein"));
   Gtk::HBox *hbox72 = manage(new class Gtk::HBox(false, 0));
   button_abbrechen = manage(new class Gtk::Button());
   table_bestaetigen = manage(new class Gtk::Table(1, 2, true));
   
   Glib::RefPtr<Gdk::Bitmap> _pixmap144_mask;
   Glib::RefPtr<Gdk::Pixmap> _pixmap144_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _pixmap144_mask, Yellow_Dice_trans_50_xpm);
   Gtk::Image *pixmap144 = manage(new class Gtk::Image(_pixmap144_pixmap, _pixmap144_mask));
   Gtk::Label *label564 = manage(new class Gtk::Label("Fenster\n"
		"schließen"));
   Gtk::HBox *hbox68 = manage(new class Gtk::HBox(false, 0));
   button_info_ok = manage(new class Gtk::Button());
   
   Glib::RefPtr<Gdk::Bitmap> _pixmap143_mask;
   Glib::RefPtr<Gdk::Pixmap> _pixmap143_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _pixmap143_mask, Clear_32_xpm);
   Gtk::Image *pixmap143 = manage(new class Gtk::Image(_pixmap143_pixmap, _pixmap143_mask));
   Gtk::Label *label563 = manage(new class Gtk::Label("Textfeld\n"
		"löschen"));
   Gtk::HBox *hbox67 = manage(new class Gtk::HBox(false, 0));
   button_erase = manage(new class Gtk::Button());
   
   Glib::RefPtr<Gdk::Bitmap> _pixmap187_mask;
   Glib::RefPtr<Gdk::Pixmap> _pixmap187_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _pixmap187_mask, Angeb_Sicht_32_xpm);
   Gtk::Image *pixmap187 = manage(new class Gtk::Image(_pixmap187_pixmap, _pixmap187_mask));
   Gtk::Label *label648 = manage(new class Gtk::Label("Status"));
   Gtk::HBox *hbox101 = manage(new class Gtk::HBox(false, 0));
   button_status = manage(new class Gtk::ToggleButton());
   table_schliessen = manage(new class Gtk::Table(1, 3, true));
   frame_auswahl = manage(new class Gtk::Frame());
   
   Gtk::Table *table125 = manage(new class Gtk::Table(3, 1, false));
   LogWin_Status = new class logwin();
   scrolledwindow_status = manage(new class Gtk::ScrolledWindow());
   
   Glib::RefPtr<Gdk::Bitmap> _pixmap_arkanum_mask;
   Glib::RefPtr<Gdk::Pixmap> _pixmap_arkanum_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _pixmap_arkanum_mask, Gross_ark_pre_xpm);
   pixmap_arkanum = manage(new class Gtk::Image(_pixmap_arkanum_pixmap, _pixmap_arkanum_mask));
   
   Gtk::Table *table133 = manage(new class Gtk::Table(11, 2, false));
   pixmap_ja->set_alignment(0.5,0.5);
   pixmap_ja->set_padding(0,0);
   label570->set_alignment(0.5,0.5);
   label570->set_padding(0,0);
   label570->set_justify(Gtk::JUSTIFY_CENTER);
   label570->set_line_wrap(false);
   hbox73->pack_start(*pixmap_ja);
   hbox73->pack_start(*label570);
   button_bestaetigen->set_flags(Gtk::CAN_FOCUS);
   button_bestaetigen->set_relief(Gtk::RELIEF_NORMAL);
   button_bestaetigen->add(*hbox73);
   pixmap_nein->set_alignment(0.5,0.5);
   pixmap_nein->set_padding(0,0);
   label569->set_alignment(0.5,0.5);
   label569->set_padding(0,0);
   label569->set_justify(Gtk::JUSTIFY_CENTER);
   label569->set_line_wrap(false);
   hbox72->pack_start(*pixmap_nein);
   hbox72->pack_start(*label569);
   button_abbrechen->set_flags(Gtk::CAN_FOCUS);
   button_abbrechen->set_relief(Gtk::RELIEF_NORMAL);
   button_abbrechen->add(*hbox72);
   table_bestaetigen->set_row_spacings(0);
   table_bestaetigen->set_col_spacings(10);
   table_bestaetigen->attach(*button_bestaetigen, 0, 1, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table_bestaetigen->attach(*button_abbrechen, 1, 2, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   pixmap144->set_alignment(0.5,0.5);
   pixmap144->set_padding(0,0);
   label564->set_alignment(0.5,0.5);
   label564->set_padding(0,0);
   label564->set_justify(Gtk::JUSTIFY_CENTER);
   label564->set_line_wrap(false);
   hbox68->pack_start(*pixmap144);
   hbox68->pack_start(*label564, Gtk::PACK_SHRINK, 0);
   button_info_ok->set_size_request(50,-1);
   button_info_ok->set_flags(Gtk::CAN_FOCUS);
   button_info_ok->set_relief(Gtk::RELIEF_NORMAL);
   button_info_ok->add(*hbox68);
   pixmap143->set_alignment(0.5,0.5);
   pixmap143->set_padding(0,0);
   label563->set_alignment(0.5,0.5);
   label563->set_padding(0,0);
   label563->set_justify(Gtk::JUSTIFY_CENTER);
   label563->set_line_wrap(false);
   hbox67->pack_start(*pixmap143);
   hbox67->pack_start(*label563, Gtk::PACK_SHRINK, 0);
   button_erase->set_flags(Gtk::CAN_FOCUS);
   button_erase->set_relief(Gtk::RELIEF_NORMAL);
   button_erase->add(*hbox67);
   pixmap187->set_alignment(0.5,0.5);
   pixmap187->set_padding(0,0);
   label648->set_alignment(0.5,0.5);
   label648->set_padding(0,0);
   label648->set_justify(Gtk::JUSTIFY_CENTER);
   label648->set_line_wrap(false);
   hbox101->pack_start(*pixmap187);
   hbox101->pack_start(*label648, Gtk::PACK_SHRINK, 0);
   button_status->set_flags(Gtk::CAN_FOCUS);
   button_status->set_relief(Gtk::RELIEF_NORMAL);
   button_status->set_active(false);
   button_status->add(*hbox101);
   table_schliessen->set_row_spacings(0);
   table_schliessen->set_col_spacings(10);
   table_schliessen->attach(*button_info_ok, 0, 1, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table_schliessen->attach(*button_erase, 1, 2, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table_schliessen->attach(*button_status, 2, 3, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   frame_auswahl->set_shadow_type(Gtk::SHADOW_NONE);
   frame_auswahl->set_label_align(0,0);
   table125->set_row_spacings(0);
   table125->set_col_spacings(0);
   table125->attach(*table_bestaetigen, 0, 1, 1, 2, Gtk::FILL, Gtk::FILL, 0, 0);
   table125->attach(*table_schliessen, 0, 1, 0, 1, Gtk::FILL, Gtk::FILL, 0, 0);
   table125->attach(*frame_auswahl, 0, 1, 2, 3, Gtk::FILL, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, 0, 0);
   scrolledwindow_status->set_policy(Gtk::POLICY_AUTOMATIC, Gtk::POLICY_AUTOMATIC);
   scrolledwindow_status->add(*LogWin_Status);
   pixmap_arkanum->set_alignment(0.5,0.5);
   pixmap_arkanum->set_padding(0,0);
   table133->set_row_spacings(0);
   table133->set_col_spacings(0);
   table133->attach(*LogWin, 0, 1, 0, 9, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, 0, 0);
   table133->attach(*table125, 0, 1, 9, 10, Gtk::AttachOptions(), Gtk::AttachOptions(), 0, 0);
   table133->attach(*scrolledwindow_status, 0, 1, 10, 11, Gtk::FILL, Gtk::EXPAND|Gtk::FILL, 0, 0);
   table133->attach(*pixmap_arkanum, 1, 2, 0, 11, Gtk::AttachOptions(), Gtk::AttachOptions(), 0, 0);
   WindowInfo->set_title("Info");
   WindowInfo->set_default_size(677,422);
   WindowInfo->set_modal(false);
   WindowInfo->set_position(Gtk::WIN_POS_NONE);
   WindowInfo->add(*table133);
   LogWin->show();
   pixmap_ja->show();
   label570->show();
   hbox73->show();
   button_bestaetigen->show();
   pixmap_nein->show();
   label569->show();
   hbox72->show();
   button_abbrechen->show();
   table_bestaetigen->show();
   pixmap144->show();
   label564->show();
   hbox68->show();
   button_info_ok->show();
   pixmap143->show();
   label563->show();
   hbox67->show();
   button_erase->show();
   pixmap187->show();
   label648->show();
   hbox101->show();
   button_status->show();
   table_schliessen->show();
   frame_auswahl->show();
   table125->show();
   LogWin_Status->show();
   scrolledwindow_status->show();
   pixmap_arkanum->show();
   table133->show();
   button_bestaetigen->signal_clicked().connect(SigC::slot(*this, &WindowInfo_glade::on_button_bestaetigen_clicked));
   button_abbrechen->signal_clicked().connect(SigC::slot(*this, &WindowInfo_glade::on_button_abbrechen_clicked));
   button_info_ok->signal_clicked().connect(SigC::slot(*this, &WindowInfo_glade::on_button_abbrechen_clicked));
   button_erase->signal_clicked().connect(SigC::slot(*this, &WindowInfo_glade::on_button_erase_clicked));
   button_status->signal_toggled().connect(SigC::slot(*this, &WindowInfo_glade::on_button_status_toggled));
   WindowInfo->signal_delete_event().connect(SigC::slot(*this, &WindowInfo_glade::on_WindowInfo_delete_event));
}

WindowInfo_glade::~WindowInfo_glade()
{  delete LogWin;
   delete LogWin_Status;
   delete _data;
}
