/*  Midgard Character Generator
 *  Copyright (C) 2001 Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include "Spezies.hh"
#ifndef USE_XML
#include <Aux/SQLerror.h>
#include <Aux/Transaction.h>
exec sql include sqlca;
#endif
#include <gtk--/main.h>


cH_Spezies::cache_t cH_Spezies::cache;

cH_Spezies::cH_Spezies(const std::string& name)
{
 cH_Spezies *cached(cache.lookup(name));
 if (cached) *this=*cached;
 else
  {
#ifndef USE_XML
   *this=cH_Spezies(new Spezies(name));
   cache.Register(name,*this);
#else
   cerr << "Spezies '" << name << "' nicht im Cache\n";
   *this=cH_Spezies(find_Tag("SpeziesListe","Spezies","Name",name));
#endif
  }
}

#ifdef USE_XML
cH_Spezies::cH_Spezies(const Tag *tag)
{*this=cH_Spezies(new Spezies(tag));
 cache.Register(tag->getAttr("Name"),*this);
}
#endif

#ifndef USE_XML
Spezies::Spezies(const std::string& n)
: name(n)
#else
Spezies::Spezies(const Tag *tag) 
: name(tag->getAttr("Name"))
#endif
{
#ifndef USE_XML
 exec sql begin declare section;
   int ST,GE,KO,IN,ZT;
   int SB,AU,LPBASIS,AP_GRAD,ABB,PSY,PHS,PHK,ALTER,GF,GW,GS,
      GESTALT,BF,BS;
   char SPEZIES[50];
   int NR;
   char TYP[50];
   int MAXGRAD;
   bool LAND;
 exec sql end declare section;
 strncpy(SPEZIES,Name().c_str(),sizeof(SPEZIES));
 exec sql select nr,coalesce(m_st,-h_st), coalesce(m_ge,-h_ge),
      coalesce(m_ko,-h_ko), coalesce(m_in,-h_in), coalesce(m_zt,-h_zt) ,
      coalesce(m_sb,-h_sb), coalesce(m_au,-h_au), lpbasis, ap_grad,
      coalesce(m_abb,0), coalesce(m_psy,0), coalesce(m_phs,0), 
      coalesce(m_phk,0),alter,groesse_f,groesse_w,groesse_s,
      coalesce(gestalt,0),b_f,b_s,coalesce(land,'f')
      into :NR,:ST,:GE,:KO,:IN,:ZT,:SB,:AU,:LPBASIS,:AP_GRAD,
         :ABB,:PSY,:PHS,:PHK,:ALTER,:GF,:GW,:GS,:GESTALT,:BF,:BS,:LAND
      from spezies where spezies=:SPEZIES;
 SQLerror::test(__FILELINE__); 
 nr=NR;
 st=ST;
 gw=GE;
 gs=GE;
 ko=KO;
 in=IN;
 zt=ZT;
 sb=SB;
 au=AU;
 lpbasis=LPBASIS;
 ap_grad=AP_GRAD;
 m_abb=ABB;
 m_psy=PSY;
 m_phs=PHS;
 m_phk=PHK;
 alter=ALTER;
 groesse_f=GF;
 groesse_w=GW;
 groesse_s=GS;
 gestalt=GESTALT;
 b_f=BF;
 b_s=BS;
 land=LAND;

 exec sql declare SPEIN2 cursor for select typen,coalesce(maxgrad,0) from 
      spezies_typen where  spezies = :SPEZIES;
 Transaction tr;
 exec sql open SPEIN2;
 while(true)
      {
       exec sql fetch SPEIN2 into :TYP,:MAXGRAD;
       SQLerror::test(__FILELINE__,100); 
       if (sqlca.sqlcode) break;
       vec_typen.push_back(st_spez(TYP,MAXGRAD));
      }
 exec sql close SPEIN2;
 tr.close();
#else
 nr=tag->getIntAttr("MCG-Index");
 land=tag->getBoolAttr("Land");
 
 const Tag *Minima=tag->find("Minima");
 const Tag *Maxima=tag->find("Maxima");
 if (!Minima) Minima=tag; // similar to empty tag for this purpose
 if (!Maxima) Maxima=tag;
 st=Minima->getIntAttr("St",-Maxima->getIntAttr("St"));
 gw=Minima->getIntAttr("St",-Maxima->getIntAttr("Gw"));
 gs=Minima->getIntAttr("St",-Maxima->getIntAttr("Gs"));
 ko=Minima->getIntAttr("St",-Maxima->getIntAttr("Ko"));
 in=Minima->getIntAttr("St",-Maxima->getIntAttr("In"));
 zt=Minima->getIntAttr("St",-Maxima->getIntAttr("Zt"));
 sb=Minima->getIntAttr("St",-Maxima->getIntAttr("Sb"));
 au=Minima->getIntAttr("St",-Maxima->getIntAttr("Au"));
 
 const Tag *Modifikation=tag->find("Modifikation");
 if (!Modifikation) Modifikation=tag;
 lpbasis=Modifikation->getIntAttr("LP_Basis");
 ap_grad=Modifikation->getIntAttr("APproGrad");
 m_abb=Modifikation->getIntAttr("Abwehr");
 gestalt=Modifikation->getIntAttr("Gestalt");

 const Tag *Resistenzen=Modifikation->find("Resistenzen");
 if (!Resistenzen) Resistenzen=tag;
 m_psy=Resistenzen->getIntAttr("psy");
 m_phs=Resistenzen->getIntAttr("phs");
 m_phk=Resistenzen->getIntAttr("phk");

 const Tag *Alter=tag->find("Alter");
 if (Alter) alter=Alter->getIntAttr("AnzahlWürfel");
 else alter=0;

 const Tag *Groesse=tag->find("Größe");
 if (!Groesse) Groesse=tag;
 groesse_f=Groesse->getIntAttr("AnzahlWürfel");
 groesse_w=Groesse->getIntAttr("ArtWürfel");
 groesse_s=Groesse->getIntAttr("Addiere");
 
 const Tag *Bewegungsweite=tag->find("Bewegungsweite");
 if (Bewegungsweite) 
 {  b_f=Bewegungsweite->getIntAttr("AnzahlWürfel");
    b_s=Bewegungsweite->getIntAttr("Addiere");
 }
 else b_f=b_s=0;
 
 FOR_EACH_CONST_TAG_OF(i,*tag,"Typ")
    vec_typen.push_back(st_spez(i->getAttr("Name"),i->getIntAttr("MaximalerGrad")));
#endif
}


Spezies_All::Spezies_All(Gtk::ProgressBar *progressbar)
{
#ifndef USE_XML
  exec sql begin declare section;
   char db_name[100],db_dummy[10];
   int db_size;
 exec sql end declare section;
 exec sql select count(spezies) into :db_size from spezies;
 exec sql declare SP_EIN cursor for select distinct 
      spezies,nr from spezies order by nr;
 Transaction tr;
 exec sql open SP_EIN;
 SQLerror::test(__FILELINE__); 
 double count=0;
 while (true)
  { 
    progressbar->set_percentage(count/db_size);
    while(Gtk::Main::events_pending()) Gtk::Main::iteration() ;
    exec sql fetch SP_EIN
      into :db_name,:db_dummy;
    SQLerror::test(__FILELINE__,100); 
    if (sqlca.sqlcode) break;
    list_All.push_back(cH_Spezies(db_name));
    ++count;
  }
 exec sql close SP_EIN;
 tr.close();
#else
 const Tag *spezies=xml_data->find("SpeziesListe");
 if (spezies)
 {  Tag::const_iterator b=spezies->begin(),e=spezies->end();
    double size=e-b;
    FOR_EACH_CONST_TAG_OF_5(i,*spezies,b,e,"Spezies")
    {  progressbar->set_percentage((i-b)/size);   
       while(Gtk::Main::events_pending()) Gtk::Main::iteration() ;
       list_All.push_back(cH_Spezies(&*i));
    }
 }   
#endif
 progressbar->set_percentage(1);
}

bool Spezies::Typ_erlaubt(std::string typ) const
{
  for(std::vector<st_spez>::const_iterator i=vec_typen.begin();i!=vec_typen.end();++i)
    if(i->typen == typ) return true ;
  return false;
}

bool operator==(gpointer data,const cH_Spezies &s)
{  return *(static_cast<Spezies*>(data))==*s;
}
