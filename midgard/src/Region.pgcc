/*  Midgard Character Generator
 *  Copyright (C) 2001-2002 Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include "Region.hh"
#include <Aux/SQLerror.h>
#include <Aux/Transaction.h>
exec sql include sqlca;
#include <gtk--/main.h>

#include "../pixmaps/Eschar-trans-50.xpm"
#include "../pixmaps/KiDo-trans-50.xpm"
#include "../pixmaps/Regio_Rawindra-50.xpm"
#include "../pixmaps/Regio_Alba-50.xpm"
#include "../pixmaps/Regio_H_u_D-50.xpm"
#include "../pixmaps/Regio_Gilde-50.xpm"
//#include "../pixmaps/Job-trans-50.xpm"
#include "../pixmaps/pinguin.xpm"

Gtk::Pixmap *RegionenPic::Pic(epic typ)
{  
   if      (typ==Eschar)     return manage(new Gtk::Pixmap(Eschar_trans_50_xpm));
   else if (typ==KanThaiPan) return manage(new Gtk::Pixmap(KiDo_trans_50_xpm));
   else if (typ==Rawindra)   return manage(new Gtk::Pixmap(Regio_Rawindra_50_xpm));
   else if (typ==Alba)       return manage(new Gtk::Pixmap(Regio_Alba_50_xpm));
   else if (typ==Gildenbrief)return manage(new Gtk::Pixmap(Regio_Gilde_50_xpm));
   else if (typ==HD)         return manage(new Gtk::Pixmap(Regio_H_u_D_50_xpm));
   else return manage(new Gtk::Pixmap(pinguin_xpm));
   abort();
}


cH_Region::cache_t cH_Region::cache;

cH_Region::cH_Region(const std::string& name)
{
 cH_Region *cached(cache.lookup(name));
 if (cached) *this=*cached;
 else
  {
   *this=cH_Region(new Region(name));
   cache.Register(name,*this);
  }
}

Region::Region(const std::string& n) 
: name(n), active(false)
{
  exec sql begin declare section;
   int db_nr;
   char db_name[50], db_abkuerzung[50], db_file[50],
        db_url[50], db_maintainer[50],db_version[50],db_copyright[100];
   bool db_offiziell;
   int db_pic;
  exec sql end declare section;
  strncpy(db_name,Name().c_str(),sizeof(db_name));
  exec sql select nr,abkuerzung,coalesce(file,''),coalesce(url,''),maintainer,version,copyright,offiziell,
         coalesce(pic,0)
      into :db_nr,:db_abkuerzung,:db_file,:db_url, :db_maintainer,:db_version,
           :db_copyright,:db_offiziell,:db_pic
      from regionen where name=:db_name;
  nr=db_nr;
  abkuerzung=db_abkuerzung;
  file=db_file;
  url=db_url;
  maintainer=db_maintainer;
  version=db_version;
  copyright=db_copyright;
  offiziell=db_offiziell;
  pic=RegionenPic::epic(db_pic);
}

bool Region::setActive(const std::vector<cH_Region>& LR,const cH_Region& R,bool active)
{
  for(std::vector<cH_Region>::const_iterator i=LR.begin();i!=LR.end();++i)
   {
     if(R==*i) 
         { 
            (*i)->setActive(active);
            return true;
         }
   }
 return false;
}


Regionen_All::Regionen_All(Gtk::ProgressBar *progressbar)
{
 exec sql begin declare section;
   char db_name[100];
   int db_size;
 exec sql end declare section;
 exec sql select count(name) into :db_size from regionen;
 exec sql declare RIein cursor for select name from regionen order by nr;
 Transaction tr;
 exec sql open RIein;
 SQLerror::test(__FILELINE__);
 double count=0;
 while(true)
  {
   progressbar->set_percentage(count/db_size);
   while(Gtk::Main::events_pending()) Gtk::Main::iteration() ;
   exec sql fetch RIein into :db_name;
   SQLerror::test(__FILELINE__,100);  
   if (sqlca.sqlcode) break;
   list_All.push_back(cH_Region(db_name));
   ++count;
  }
 exec sql close RIein;
 tr.close();
 progressbar->set_percentage(1);       
}



