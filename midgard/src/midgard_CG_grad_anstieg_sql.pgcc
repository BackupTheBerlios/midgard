#include "midgard_CG.hh"
#include "WindowInfo.hh"
#include <Aux/FetchIStream.h>
#include <Aux/dbconnect.h>  
#include <Aux/Transaction.h>
exec sql include sqlca;


void midgard_CG::get_ab_re_za(const string& was)
{
  int grad=Werte.Grad();
  int grad_alt;
  if (was=="Abwehr")    grad_alt = Grad_Anstieg.get_Grad_Abwehr(); 
  else if (was=="Resistenz") grad_alt = Grad_Anstieg.get_Grad_Resistenz();
  else if (was=="Zaubern")   grad_alt = Grad_Anstieg.get_Grad_Zaubern();
  else abort();
  if (grad <= grad_alt)
      {manage(new WindowInfo("Für Grad "+itos(grad_alt)+" wurde schon gesteigert!")) ;return;}
  ++grad_alt;
  
  exec sql allocate descriptor mydesc;
  exec sql begin declare section;
   char query[1024];
  exec sql end declare section;
  string squery = "select ";
  if (was=="Abwehr"   ) squery += "abwehr   , abwehr_kosten ";
  if (was=="Resistenz") squery += "resistenz, resistenz_kosten ";
  if (was=="Zaubern"  ) squery += "zaubern  , zaubern_kosten ";
  squery += " from grad_anstieg where grad = '"+itos(grad_alt)+"'"; 

  snprintf(query,sizeof(query),squery.c_str());
  Transaction tr;
  exec sql prepare grad_an_ein_ from :query ;
  exec sql declare grad_an_ein cursor for grad_an_ein_ ;
  exec sql open grad_an_ein;
  SQLerror::test(__FILELINE__);
  exec sql fetch from grad_an_ein into sql descriptor mydesc;

  int wert,kosten;
  FetchIStream is("mydesc");
  is >> FetchIStream::MapNull<int>(wert,0) >> FetchIStream::MapNull<int>(kosten,0);
  SQLerror::test(__FILELINE__);
  exec sql close grad_an_ein;
  tr.close();
  if (wert==0)
    {manage(new WindowInfo(was+" kann für Grad "+itos(grad_alt)+" nicht gesteigert werden!")) ;}
  else 
   {
     Werte.add_GFP(kosten);
     if (was=="Abwehr") Werte.set_Abwehr_wert(wert);
     if (was=="Resistenz") Werte.set_Resistenz(wert); 
     if (was=="Zaubern") Werte.set_Zaubern_wert(wert); 
   }
  if (was=="Abwehr") Grad_Anstieg.set_Grad_Abwehr(grad_alt);
  if (was=="Resistenz") Grad_Anstieg.set_Grad_Resistenz(grad_alt);
  if (was=="Zaubern") Grad_Anstieg.set_Grad_Zaubern(grad_alt);
}

void midgard_CG::get_grad(int gfp)
{
 exec sql begin declare section;
   int db_new_grad,db_gfp=gfp;
 exec sql end declare section;
 exec sql select max(grad) into :db_new_grad from grad_anstieg 
      where gfp <= :db_gfp;
 SQLerror::test(__FILELINE__);
 Werte.set_Grad(db_new_grad);
}
