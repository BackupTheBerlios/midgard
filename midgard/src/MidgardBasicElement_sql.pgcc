#include "MidgardBasicElement.hh"
#include "Grundwerte.hh"
#include "Ausnahmen.hh"
#include <Aux/SQLerror.h>
#include <Aux/Transaction.h>
exec sql include sqlca;
#include "xml.h"
#include "Zauberwerk.hh"
#include "Fertigkeiten.hh"
#include "Waffe.hh"

#ifdef USE_XML
static void Add(map<std::string,std::string> &map_typ, std::string typen, std::string wert)
{  while (!typen.empty())
   {  string::size_type komma=typen.find(',');
      if (komma!=string::npos)
      {  map_typ[typen.substr(0,komma)]=wert;
         typen=typen.substr(komma+1);
      }
      else
      {  map_typ[typen]=wert;
         return;
      }
   }
}
#endif

void MidgardBasicElement::get_map_typ()
{  
#ifndef USE_XML 
 exec sql begin declare section;
   char query[1024], db_typ[10], db_standard[10];
 exec sql end declare section;
 std::string squery;
 if(What()==ZAUBER)
    squery ="select typ,standard from zauber_typen where name ='"+Name()+"'";
 if(What()==ZAUBERWERK)
    squery ="select typ,standard from zauberwerk_typen where name ='"+Name()
             +"' and stufe ='"+Stufe()+"'";
 if(What()==FERTIGKEIT )
    squery ="select typ,standard from fertigkeiten_typen where name ='"+Name()+"'";
 if(What()==WAFFEGRUND)
    squery ="select typ,standard from waffen_typen where name ='"+Name()+"'";
 if(What()==WAFFE)
    squery ="select typ,standard from waffen_typen where name ='"+dynamic_cast<Waffe*>(this)->Grundkenntnis()+"'";
 if(What()==SPRACHE)
    squery ="select typ,standard from fertigkeiten_typen where name ='Sprache'";
 if(What()==SCHRIFT)
    squery ="select typ,standard from fertigkeiten_typen where name ='Lesen/Schreiben'";
 if(What()==KIDO)
    squery ="select typ,standard from fertigkeiten_typen where name ='KiDo'";
 strncpy(query,squery.c_str(),sizeof(query));
 Transaction tr;
 exec sql prepare MBein_ from :query ;
 exec sql declare MBein cursor for MBein_ ;
 exec sql open MBein;
 SQLerror::test(__FILELINE__);
 while(true)
  {
    exec sql fetch MBein into :db_typ,:db_standard;
    SQLerror::test(__FILELINE__,100);
    if (sqlca.sqlcode) break;
    map_typ[db_typ]=db_standard;
  } 
//cout << What()<<'\t'<<map_typ.size()<<'\n';
#else // USE_XML
 const Tag *tag=0;

 if(What()==ZAUBER)
    tag=find_Tag("Zauber","Spruch","Name",Name()); 
 if(What()==ZAUBERWERK)
 {  vector<pair<std::string,std::string> > anforderungen;
    anforderungen.push_back(pair<std::string,std::string>("Name",Name()));
    anforderungen.push_back(pair<std::string,std::string>("Stufe",Stufe()));
    tag=find_Tag("Zauberwerke","Zauberwerk",anforderungen);
 }
 if(What()==FERTIGKEIT )
    tag=find_Tag("Fertigkeiten","Fertigkeit","Name",Name());
 if(What()==WAFFEGRUND)
    tag=find_Tag("Waffen:Grundkenntnisse","Waffen:Grundkenntnis","Name",Name());
 // auch in Waffen:Steigern suchen
 // dynamic_cast<Waffe*>(this)->Grundkenntnis()
 if(What()==WAFFE)
    tag=find_Tag("Waffen","Waffe","Name",Name());
 if(What()==SPRACHE)
    tag=find_Tag("Fertigkeiten","Fertigkeit","Name","Sprache");
 if(What()==SCHRIFT)
    tag=find_Tag("Fertigkeiten","Fertigkeit","Name","Lesen/Schreiben");
 if(What()==KIDO)
    tag=find_Tag("Fertigkeiten","Fertigkeit","Name","KiDo"); 

 if (tag)
 {  const Tag *Grund=tag->find("Grund");
    const Tag *Standard=tag->find("Standard");
    const Tag *Ausnahme=tag->find("Ausnahme");
    // auch in Waffen:Steigern suchen
    // V4 nicht?
    if ((What()==WAFFEGRUND || What()==WAFFE)
    		&& !Grund && !Standard && !Ausnahme)
    {  tag=xml_data->find("Waffen:Steigern");
       if (!tag)
       {  cerr << "<Waffen:Steigern><Grund/>... nicht gefunden\n";
          return;
       }
       Grund=tag->find("Grund");
       Standard=tag->find("Standard");
       Ausnahme=tag->find("Ausnahme");
    }
    if (Grund) Add(map_typ,Grund->Value(),"G");
    if (Standard) Add(map_typ,Standard->Value(),"S");
    if (Ausnahme) Add(map_typ,Ausnahme->Value(),"A");
    return;
 }
#endif    
}
 

void MidgardBasicElement::get_Steigern_Kosten_map()
{
  exec sql begin declare section;
   char query[1024];
   int P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19;
  exec sql end declare section;
  std::string squery ="select coalesce(p1,0),coalesce(p2,0),coalesce(p3,0),
   coalesce(p4,0),
   coalesce(p5,0),coalesce(p6,0),coalesce(p7,0),coalesce(p8,0),
   coalesce(p9,0),coalesce(p10,0),coalesce(p11,0),coalesce(p12,0),
   coalesce(p13,0),coalesce(p14,0),coalesce(p15,0),coalesce(p16,0)
   ,coalesce(p17,0),coalesce(p18,0),coalesce(p19,0) from ";
  if(What()==FERTIGKEIT) 
   squery += "steigern_fertigkeiten_werte w, steigern_fertigkeiten s where 
               s.wie = w.name and s.name = '"+Name()+"'"; 
  if(What()==SPRACHE) 
   squery += "steigern_fertigkeiten_werte w, steigern_fertigkeiten s where 
               s.wie = w.name and s.name = 'Sprache'"; 
  if(What()==WAFFE) 
   squery += "waffen_steigern s, waffen w where 
               s.schwierigkeit = w.schwierigkeit and w.name = '"+Name()+"'"; 
  strncpy(query,squery.c_str(),sizeof(query));
  exec sql prepare SKM_ein_ from :query;
  exec sql declare SKM_ein cursor for SKM_ein_;
  Transaction tr;
  exec sql open SKM_ein;
  exec sql fetch SKM_ein into :P1,:P2,:P3,:P4,:P5,:P6,:P7,:P8,:P9,
   :P10,:P11,:P12,:P13,:P14,:P15,:P16,:P17,:P18,:P19;
   map_erfolgswert_kosten[1] = P1;
   map_erfolgswert_kosten[2] = P2;
   map_erfolgswert_kosten[3] = P3;
   map_erfolgswert_kosten[4] = P4;
   map_erfolgswert_kosten[5] = P5;
   map_erfolgswert_kosten[6] = P6;
   map_erfolgswert_kosten[7] = P7;
   map_erfolgswert_kosten[8] = P8;
   map_erfolgswert_kosten[9] = P9;
   map_erfolgswert_kosten[10] = P10;
   map_erfolgswert_kosten[11] = P11;
   map_erfolgswert_kosten[12] = P12;
   map_erfolgswert_kosten[13] = P13;
   map_erfolgswert_kosten[14] = P14;
   map_erfolgswert_kosten[15] = P15;
   map_erfolgswert_kosten[16] = P16;
   map_erfolgswert_kosten[17] = P17;
   map_erfolgswert_kosten[18] = P18;
   map_erfolgswert_kosten[19] = P19;
  exec sql close SKM_ein;
  tr.close();
//if(What()==WAFFE) 
//for(std::map<int,int>::const_iterator i=map_erfolgswert_kosten.begin();i!=map_erfolgswert_kosten.end();++i)
// cout <<Name()<<'\t'<<i->first<<'\t'<<i->second<<'\n';
}


void MidgardBasicElement::saveElementliste(const std::list<cH_MidgardBasicElement>& b,
                           const Grundwerte& Werte,
                           const vector<cH_Typen>& Typ,
                           const Ausnahmen& ausnahmen
                           )
{
  if(b.size()==0) return;
/*
    int db_av_bonus,db_sl_bonus;
    char db_region[20];
    char db_wert_str[20];
    char db_magisch[1024];
*/
  exec sql begin declare section;
    char db_name_ch[50], db_version[50];
    char db_fertigkeit[50],db_magisch[100];
    int db_wert;
    char db_what[30];
  exec sql end declare section;
  strncpy(db_name_ch,Werte.Name_Charakter().c_str(),sizeof(db_name_ch));
  strncpy(db_version,Werte.Version().c_str(),sizeof(db_version));
  strncpy(db_what, ((*b.begin())->What_str()).c_str(),sizeof(db_what));
  strncpy(db_magisch, "",sizeof(db_magisch));
   
  for (std::list<cH_MidgardBasicElement>::const_iterator i=b.begin();i!=b.end();++i)
   {
     strncpy(db_fertigkeit, ((*i)->Name()).c_str(),sizeof(db_fertigkeit));
     if ((*b.begin())->What()==ZAUBERWERK)
        strncpy(db_magisch, cH_Zauberwerk(*i)->Art().c_str(),sizeof(db_magisch));
     if ((*b.begin())->What()==FERTIGKEIT && (*i)->Name()=="Landeskunde")
        strncpy(db_magisch, cH_Fertigkeit(*i)->Zusatz().c_str(),sizeof(db_magisch));
     db_wert = (*i)->Erfolgswert();
     exec sql INSERT INTO charaktere_fertigkeiten
         (charakter_name,version,fertigkeit,wert,art,magisch)
       VALUES
         (:db_name_ch,:db_version,:db_fertigkeit,:db_wert,:db_what,:db_magisch);
     SQLerror::test(__FILELINE__);
   }
}

  //////////////////////////////////////////////////////////////////////
  //Steigern von Fertigkeiten  
void MidgardBasicElement::EP_steigern(const std::string fert)
{
#ifndef USE_XML 
  exec sql begin declare section;
   char db_fert[50],db_w[50];
  exec sql end declare section;
  strncpy(db_fert,fert.c_str(),sizeof(db_fert));
  exec sql declare fwein cursor for SELECT ep from steigern_fertigkeiten_mit
      where name = :db_fert;
  Transaction tr;  
  exec sql open fwein;
  SQLerror::test(__FILELINE__);
  int back=0;
  while (true)
   {
     exec sql fetch fwein into :db_w;
     SQLerror::test(__FILELINE__,100);
     if (sqlca.sqlcode) break; 
     std::string w=db_w;
     if(w=="KEP") back+=1;
     if(w=="ZEP") back+=2;  
   }
  exec sql close fwein;
  tr.close();
  steigern_mit_EP=back;
#else // USE_XML
 const Tag *tag=find_Tag("Fertigkeiten","Fertigkeit","Name",fert);
 int back=0;
 const Tag *steigern=0;
 
 if (tag)
    // Fertigkeit gefunden
    steigern=tag->find("EP-Typ");
 else 
    // globale Liste: Ausdauer, Waffen, Zauber
    steigern=find_Tag("verwendbareEP","EP-Typ","Fertigkeit",fert);

 if (steigern)
 {  if (steigern->getAttr("Typ").find("KEP")) back+=1;
    if (steigern->getAttr("Typ").find("ZEP")) back+=2;
 }
 steigern_mit_EP=back;
#endif
}
