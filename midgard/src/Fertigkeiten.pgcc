#include "Fertigkeiten.hh"
#include "midgard_CG.hh"
#include <Aux/SQLerror.h>
#include <Aux/Transaction.h>
#include "Typen.hh"
exec sql include sqlca;

cH_Fertigkeit::cache_t cH_Fertigkeit::cache;

cH_Fertigkeit::cH_Fertigkeit(const std::string& name,int lernpunkte,bool pflicht)
{
 st_index index(name,lernpunkte);
 cH_Fertigkeit *cached(cache.lookup(index));
 if (cached) *this=*cached;
 else
  {
   *this=cH_Fertigkeit(new Fertigkeit(name,lernpunkte,pflicht));  
   cache.Register(index,*this);
  }
}

void Fertigkeit::get_Fertigkeit()
{
  exec sql begin declare section;
   int db_lp,db_anfangswert0,db_anfangswert,db_kosten;
   int db_st,db_ge,db_ko,db_in,db_zt,db_pa,db_au,db_sb,db_rw;
   char query[1024],db_region[10],db_attribut[10],db_voraussetzung[50];
  exec sql end declare section; 
  std::string squery ="select lp,coalesce(anfangswert0,0),
      coalesce(anfangswert,0),coalesce(fp,0),coalesce(region,''),
      coalesce(attribut,''), coalesce(st,0), coalesce(ge,0),
      coalesce(ko,0), coalesce(\"in\",0), coalesce(zt,0),   
      coalesce(au,0), coalesce(pa,0), 
      coalesce(sb,0), coalesce(rw,0), coalesce(v.fertigkeit,'')
      from fertigkeiten f, fertigkeiten_voraussetzung v
      where f.fertigkeit = '"+Name()+"' and f.fertigkeit = v.name";

  strncpy(query,squery.c_str(),sizeof(query));
  Transaction tr;
  exec sql prepare cl_fertigkeit_ein_ from :query ;
  exec sql declare cl_fertigkeit_ein cursor for cl_fertigkeit_ein_ ;

  exec sql open cl_fertigkeit_ein;
  SQLerror::test(__FILELINE__);
  exec sql fetch cl_fertigkeit_ein into :db_lp, 
      :db_anfangswert0, :db_anfangswert, :db_kosten, :db_region,
      :db_attribut, :db_st,:db_ge,:db_ko,:db_in,:db_zt,:db_au,:db_pa,
      :db_sb,:db_rw, :db_voraussetzung;
  SQLerror::test(__FILELINE__);
  if (lernpunkte==0) lernpunkte=db_lp;
  anfangswert0=db_anfangswert0;
  anfangswert=db_anfangswert;
  erfolgswert=anfangswert; //Defaultwert
  kosten=db_kosten;
  region=db_region;
//cout << Name()<<'\t'<<db_region <<' ' <<Region()<<'\n';
  attribut=db_attribut;
  voraussetzung = st_Voraussetzung(db_st,db_ge,db_ko,db_in,db_zt,db_au,db_pa,
                                   db_sb,db_rw,db_voraussetzung);
  exec sql close cl_fertigkeit_ein;
}

bool Fertigkeit::Voraussetzungen(const Grundwerte& Werte) const 
{
 if ( voraussetzung.st<=Werte.St() &&
      voraussetzung.ge<=Werte.Ge() &&
      voraussetzung.ko<=Werte.Ko() &&
      voraussetzung.in<=Werte.In() &&
      voraussetzung.zt<=Werte.Zt() &&
      voraussetzung.au<=Werte.Au() &&
      voraussetzung.pa<=Werte.pA() &&
      voraussetzung.sb<=Werte.Sb() &&  
      voraussetzung.rw<=Werte.RW()
     )   
    return true;
 else return false ;
}


void Fertigkeit::get_Steigern_Kosten_map()
{
  exec sql begin declare section;
   char NAME[50];
   int P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19;
  exec sql end declare section;
  strncpy(NAME,Name().c_str(),sizeof(NAME));
  exec sql select coalesce(p1,0),coalesce(p2,0),coalesce(p3,0),coalesce(p4,0),
   coalesce(p5,0),coalesce(p6,0),coalesce(p7,0),coalesce(p8,0),
   coalesce(p9,0),coalesce(p10,0),coalesce(p11,0),coalesce(p12,0),
   coalesce(p13,0),coalesce(p14,0),coalesce(p15,0),coalesce(p16,0)
   ,coalesce(p17,0),coalesce(p18,0),coalesce(p19,0) 
   into :P1,:P2,:P3,:P4,:P5,:P6,:P7,:P8,:P9,:P10,:P11,:P12,:P13,:P14,:P15,
   :P16,:P17,:P18,:P19
   from steigern_fertigkeiten_werte w, steigern_fertigkeiten s where 
   s.wie = w.name and s.name = :NAME; 
   map_erfolgswert_kosten[1] = P1;
   map_erfolgswert_kosten[2] = P2;
   map_erfolgswert_kosten[3] = P3;
   map_erfolgswert_kosten[4] = P4;
   map_erfolgswert_kosten[5] = P5;
   map_erfolgswert_kosten[6] = P6;
   map_erfolgswert_kosten[7] = P7;
   map_erfolgswert_kosten[8] = P8;
   map_erfolgswert_kosten[9] = P9;
   map_erfolgswert_kosten[10] = P10;
   map_erfolgswert_kosten[11] = P11;
   map_erfolgswert_kosten[12] = P12;
   map_erfolgswert_kosten[13] = P13;
   map_erfolgswert_kosten[14] = P14;
   map_erfolgswert_kosten[15] = P15;
   map_erfolgswert_kosten[16] = P16;
   map_erfolgswert_kosten[17] = P17;
   map_erfolgswert_kosten[18] = P18;
   map_erfolgswert_kosten[19] = P19;
//for(std::map<int,int>::const_iterator i=map_erfolgswert_kosten.begin();i!=map_erfolgswert_kosten.end();++i)
// cout <<Name()<<'\t'<<i->first<<'\t'<<i->second<<'\n';
}



Fertigkeiten_All::Fertigkeiten_All(Gtk::ProgressBar *progressbar)
{
 exec sql begin declare section;
   char db_name[50][100];
   int db_size;
 exec sql end declare section;
 exec sql select count(fertigkeit) into :db_size from fertigkeiten;
 exec sql declare FIein cursor for select distinct fertigkeit from fertigkeiten;
 Transaction tr;
 exec sql open FIein;
 SQLerror::test(__FILELINE__);
 double count=0;  
 while(true)   
  {
//   progressbar->set_percentage(count/db_size);
//   while(Gtk::Main::events_pending()) Gtk::Main::iteration() ;
   exec sql fetch 50 in FIein into :db_name;
   SQLerror::test(__FILELINE__,100);  
//   if (sqlca.sqlcode) break;
   int j=sqlca.sqlerrd[2];
   for (int i=0;i<j;++i)
    {
      progressbar->set_percentage(count/db_size);
      while(Gtk::Main::events_pending()) Gtk::Main::iteration() ;
      list_All.push_back(new Fertigkeit(db_name[i]));
      ++count;
    }
   if(j<50) break;
  }
 exec sql close FIein;
 tr.close();
 progressbar->set_percentage(1);
}  
