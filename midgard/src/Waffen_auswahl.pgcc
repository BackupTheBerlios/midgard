/*  Midgard Character Generator
 *  Copyright (C) 2001 Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

// generated 2001/2/10 15:15:14 CET by thoma@ig23.
// using glademm V0.5_11c
//
// newer (non customized) versions of this file go to Waffen_auswahl.cc_new

// This file is for your program, I won't touch it again!

#include "Waffen_auswahl.hh"
#include <Aux/Transaction.h>
#include <Aux/SQLerror.h>
exec sql include sqlca;
#include "midgard_CG.hh"
#include <cstring>
#include <Gtk_OStream.h>


Waffen_auswahl::Waffen_auswahl(midgard_CG* h,const std::string& typ, const std::string& typ_2,
   int lernpunkte, const Grundwerte& Werte)
{
  hauptfenster=h;
  std::vector<string> vorteile=hauptfenster->Berufs_Vorteile();
  maxpunkte = lernpunkte;
  waffen_auswahl_lernpunkte->set_text(itos(maxpunkte));
  exec sql begin declare section;
   char db_art[100];
   int db_lernpunkte;
   char db_fertigkeiten[100];
   int db_erfolgswert;
   char db_grund[100];
   char db_zusatz[50];
   char db_region[10];
   char query[1024];
  exec sql end declare section;
   
   std::string squery = "select fertigkeit, l.art, max(wert), min(lernpunkte),
      grundkenntnisse, \
      coalesce(zusatz,''), coalesce(w.region,'') \
      from lernschema l, waffen w where ";
   if (typ_2!="") squery += " (typ = '"+typ+"' or typ = '"+typ_2+"') ";
   else           squery += "  typ = '"+typ+"' ";
   squery += " and l.art = 'Waffe' and w.name = l.fertigkeit \
      and  fertigkeit not in  \
         (select verboten from pflicht_lernen where typ='"+Werte.Spezies()+"' and verboten is not null) \
      and  grundkenntnisse not in  \
         (select verboten from pflicht_lernen where typ='"+Werte.Spezies()+"' and verboten is not null) \
      group by fertigkeit, l.art, grundkenntnisse, zusatz, w.region
      order by min(lernpunkte) ";

   strncpy(query,squery.c_str(),sizeof(query));
   Transaction tr;
    exec sql prepare swaffen from :query;
    exec sql declare waffen cursor for swaffen;


    exec sql open waffen;
    SQLerror::test(__FILELINE__);
    while (true)
      {
         exec sql fetch waffen into :db_fertigkeiten, :db_art,
            :db_erfolgswert, :db_lernpunkte, :db_grund, 
            :db_zusatz, :db_region;
         SQLerror::test(__FILELINE__,100);
         if (sqlca.sqlcode) break;
         if (hauptfenster->region_check(db_region))
            vec_Waffen.push_back(new Data_waffen(db_fertigkeiten,db_erfolgswert,db_lernpunkte,db_grund,db_zusatz));
      }
    exec sql close waffen;
    Gtk::OStream os(waffen_clist_auswahl);
    for(std::vector<H_Data_waffen>::iterator i=vec_Waffen.begin();i!=vec_Waffen.end();++i)
      {
        for (std::vector<string>::const_iterator j=vorteile.begin();
               j!=vorteile.end();++j)
           if ((*j)==(*i)->Name()) (*i)->set_Lernpunkte((*i)->Lernpunkte()-1);
        if (hauptfenster->Waffen_Voraussetzung((*i)->Name()))
         {
            os << (*i)->Lernpunkte() <<"\t"<<(*i)->Voraussetzung()<<"\t"
               << (*i)->Name() <<"\t"
               << (*i)->Erfolgswert() <<"\t"<<(*i)->Grundkenntnisse()<<"\n";
            os.flush(&*i);
         }
      }
    for (unsigned int i=0;i<waffen_clist_auswahl->columns().size();++i)
      waffen_clist_auswahl->set_column_auto_resize(i,true);

    waffen_clist_auswahl->set_selection_mode(GTK_SELECTION_MULTIPLE);
    waffen_clist_auswahl->set_reorderable(true);

}

void Waffen_auswahl::on_waffen_clist_auswahl_select_row(gint row, gint column, GdkEvent *event)
{   
   if (maxpunkte < atoi(waffen_clist_auswahl->get_text(row,0).c_str() ))
      {
         waffen_clist_auswahl->row(row).unselect();
      }
   maxpunkte -= atoi(waffen_clist_auswahl->get_text(row,0).c_str());
   waffen_auswahl_lernpunkte->set_text(itos(maxpunkte));
   std::string grund = waffen_clist_auswahl->get_text(row,4);
   waffen_grundkenntnisse[grund] = "X";
}

void Waffen_auswahl::on_waffen_clist_auswahl_unselect_row(gint row, gint column, GdkEvent *event)
{   
   maxpunkte += atoi(waffen_clist_auswahl->get_text(row,0).c_str());
   waffen_auswahl_lernpunkte->set_text(itos(maxpunkte));
}

void Waffen_auswahl::on_close_waffen_clicked()
{   
   std::vector<H_Data_waffen> saw;
   for (Gtk::CList::SelectionList::iterator i=waffen_clist_auswahl->selection().begin();
         i!=waffen_clist_auswahl->selection().end();++i)
     {  
      H_Data_waffen *ptr = static_cast<H_Data_waffen*>(i->get_data());
         // ptr=&fert[i->get_row_num()];
//       std::cout << ptr ->waffe << ' ' << ptr -> erfolgswert << '\n';
       saw.push_back(new Data_waffen((*ptr)->Name(),(*ptr)->Erfolgswert(),"" ));
     }
  hauptfenster->waffen_uebernehmen(saw,waffen_grundkenntnisse);
  destroy();

}
