/*  Midgard Character Generator
 *  Copyright (C) 2001 Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

// generated 2001/2/11 14:16:06 CET by thoma@ig23.
// using glademm V0.5_11c
//

// This file is for your program, I won't touch it again!

#include <Aux/Transaction.h>
#include <Aux/SQLerror.h>
exec sql include sqlca;
#include "Schrift.hh"
#include "Sprache.hh"
#include <cstring>
#include <Gtk_OStream.h>
#include "itos.h"
#include <gtk--/main.h>


cH_Schrift::cache_t cH_Schrift::cache;

cH_Schrift::cH_Schrift(const std::string& name)
{
 cH_Schrift *cached(cache.lookup(name));
 if (cached) *this=*cached;
 else
  {
   *this=cH_Schrift(new Schrift(name));
   cache.Register(name,*this);
  }
}

void Schrift::get_Schrift()
{
  exec sql begin declare section;
   char db_name[50],db_art[50],db_region[50];
   int db_fp;
  exec sql end declare section;

  strncpy(db_name,Name().c_str(),sizeof(db_name));
  exec sql select typ,kosten,coalesce(region,'')
       into :db_art,:db_fp,:db_region
       from schrift where name = :db_name;
  SQLerror::test(__FILELINE__);
  art_der_schrift=db_art;
  region=db_region;
  kosten=db_fp;
}

bool Schrift::kann_Sprache(const std::list<cH_MidgardBasicElement>& sprache) const
{
 for(std::list<cH_MidgardBasicElement>::const_iterator i=sprache.begin();i!=sprache.end();++i)
  {
   if(cH_Sprache((*i))->Urschrift() == Name())  return true;

   std::string::size_type i1=Name().find_last_of("(");
   if(i1!=std::string::npos) 
     { std::string schrift=Name().substr(0,i1);
       if(schrift == cH_Sprache((*i))->Urschrift() ) return true;
     }
  }  
 return false;
}


Schriften_All::Schriften_All(Gtk::ProgressBar *progressbar)
{
 exec sql begin declare section;
   char db_name[100];
   int db_size;
 exec sql end declare section;
 exec sql select count(name) into :db_size from schrift;
 exec sql declare SCIein cursor for select distinct name from schrift;
 Transaction tr;
 exec sql open SCIein; 
 SQLerror::test(__FILELINE__);
 double count=0;  
 while(true)
  {
   progressbar->set_percentage(count/db_size);
   while(Gtk::Main::events_pending()) Gtk::Main::iteration() ;
   exec sql fetch SCIein into :db_name;
   SQLerror::test(__FILELINE__,100);
   if (sqlca.sqlcode) break;
   list_All.push_back(&*(cH_Schrift(db_name)));
   ++count;
  }
 exec sql close SCIein;
 tr.close();
 progressbar->set_percentage(1);
}  
