// $Id: waffen_exp.pgcc,v 1.3 2001/11/19 13:09:14 christof Exp $
/*  Midgard Roleplaying Character Generator
 *  Copyright (C) 2001 Christof Petig
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include <fstream>
#include <Aux/Transaction.h>
#include <Aux/dbconnect.h>
exec sql include sqlca;
#include "export_common.h"

// wegen eines bugs in epcg <=V6.1
#define GARNIX 

void waffen_speichern(std::ostream &o)
{  
   o << "<MidgardCG-data>\n";
   o << " <Rüstungen>\n";

   Transaction t;
   exec sql allocate descriptor spalten;
   
   exec sql declare ruestung_curs cursor for
   	select ruestung, region, ruestung_s, lp_verlust,
   		min_staerke,rw_verlust,b_verlust
   	from ruestung
   	order by coalesce(region,''),lp_verlust;
   exec sql open ruestung_curs;
   SQLerror::test(__FILELINE__);
  while (true)
  {exec sql fetch ruestung_curs into sql descriptor spalten;
   SQLerror::test(__FILELINE__,100);
   if (sqlca.sqlcode) break;
   FetchIStream is("spalten");
   o << "  <Rüstung";
   fetch_and_write_string_attrib(is, o, "Name");
   fetch_and_write_string_attrib(is, o, "Region");
   fetch_and_write_string_attrib(is, o, "Abkürzung");
   fetch_and_write_int_attrib(is, o, "schütztLP");
   fetch_and_write_int_attrib(is, o, "minimaleStärke");
   fetch_and_write_int_attrib(is, o, "RW-Verlust");
   fetch_and_write_int_attrib(is, o, "B-Verlust");
   o << "/>\n";
  }
   exec sql close ruestung_curs;
   SQLerror::test(__FILELINE__);
   o << " </Rüstungen>\n";

//******************************************************************

   exec sql declare waffen_curs cursor for
   	select name, region, grundkenntnisse, schwierigkeit,
   		art, art_2, schaden, schaden_b, zusatz, angriffsrangmod,
   		wm_abwehr_leicht, wm_abwehr_schwer, 
   		st, ge, reichweite_0, reichweite_n,
   		reichweite_m, reichweite_f
   	from waffen
   	order by coalesce(region,''),art,name;
   exec sql open waffen_curs;
   SQLerror::test(__FILELINE__);
  while (true)
  {exec sql fetch waffen_curs into sql descriptor spalten;
   SQLerror::test(__FILELINE__,100);
   if (sqlca.sqlcode) break;
   FetchIStream is("spalten");
   o << "  <Waffe";
   fetch_and_write_string_attrib(is, o, "Name");
   fetch_and_write_string_attrib(is, o, "Region");
   fetch_and_write_string_attrib(is, o, "Grundkenntnisse");
   fetch_and_write_int_attrib(is, o, "Schwierigkeit");
   fetch_and_write_string_attrib(is, o, "Kategorie");
   fetch_and_write_string_attrib(is, o, "Klasse");
   fetch_and_write_string_attrib(is, o, "Schaden");
   fetch_and_write_int_attrib(is, o, "Schadensbonus");
   fetch_and_write_string_attrib(is, o, "erfordert");
   o << ">\n    <Modifikationen";
   fetch_and_write_string_attrib(is, o, "Angriffsrang");
   fetch_and_write_string_attrib(is, o, "Abwehr:leicht");
   fetch_and_write_string_attrib(is, o, "Abwehr:schwer");
   o << "/><Voraussetzungen";
   fetch_and_write_int_attrib(is, o, "St");
   fetch_and_write_int_attrib(is, o, "Ge");
   o << "/><Reichweite";
   fetch_and_write_int_attrib(is, o, "null");
   fetch_and_write_int_attrib(is, o, "nah");
   fetch_and_write_int_attrib(is, o, "mittel");
   fetch_and_write_int_attrib(is, o, "fern");
   o << "/>\n";
   
   o << "  </Waffe>\n";
  }
   exec sql close waffen_curs;
   SQLerror::test(__FILELINE__);
   o << " </Rüstungen>\n";

//******************************************************************
   o << "</MidgardCG-data>\n";
   
   exec sql deallocate descriptor spalten;
}

int main(int argc, char *argv[])
{  
   try{
      Petig::Connection conn;
      conn.setDbase("midgard");
      Petig::dbconnect(conn);

   std::cout << "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n\n";
   waffen_speichern(std::cout);
   Petig::dbdisconnect();
   } catch (SQLerror &e)
   {  std::cerr << e << '\n';
   }
   return 0;
}
