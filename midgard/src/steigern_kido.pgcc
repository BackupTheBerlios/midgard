/*  Midgard Character Generator
 *  Copyright (C) 2001 Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include "midgard_CG.hh"
#include <Aux/Transaction.h>
#include <Aux/SQLerror.h>
exec sql include sqlca;
//#include <cstring>
//#include <strstream>
#include "WindowInfo.hh"
//#include <Aux/EntryValueIntString.h>
//#include <Aux/EntryValueEmptyInt.h> 
#include "class_kido.hh"

#ifdef __MINGW32__
extern "C" { int snprintf(char *str, size_t size, const  char  *format, ...); }
#endif


void midgard_CG::on_kido_laden_clicked()
{   
  list_Kido_neu.clear();
  exec sql begin declare section;
   char db_hoho[50];
   char query[1024];
  exec sql end declare section;
  std::string stufe_constraint ="";

  // Stufe
  int erfolgswert_kido = KiDo::get_erfolgswert_kido(list_Fertigkeiten);
  if (Werte.Grad()<4 || erfolgswert_kido+Werte.bo_Za() <15)
      stufe_constraint += " and stufe != 'Eingeweihter' ";
  if (Werte.Grad()<6 || erfolgswert_kido+Werte.bo_Za() <18)
      stufe_constraint += " and stufe != 'Meister' ";
  // Stil
  if (Werte.Spezialisierung()=="Harte Techniken")
      stufe_constraint += " and stil != 'Sanfte Techniken' ";
  if (Werte.Spezialisierung()=="Sanfte Techniken")
      stufe_constraint += " and stil != 'Harte Techniken' ";
  std::string squery = "SELECT name_orig from kido \
   where name_orig not in (SELECT fertigkeit FROM charaktere_fertigkeiten \
   WHERE charakter_name = '"+Werte.Name_Charakter()+"' AND version = '"+
   Werte.Version()+"') "+stufe_constraint+"order by 1";

  snprintf(query,sizeof(query),squery.c_str());
  Transaction tr;
  exec sql prepare kido_ein_ from :query ;
  exec sql declare kido_ein cursor for kido_ein_ ;
  exec sql open kido_ein;
  SQLerror::test(__FILELINE__);
  int count=0;
  laden_label->show();
  while (true)
    {
       exec sql fetch kido_ein into :db_hoho;
       SQLerror::test(__FILELINE__,100);  
       if (sqlca.sqlcode) break;
       laden_label->set_text(itos(++count)+" Zauber geladen");
       list_Kido_neu.push_back(cH_KiDo(db_hoho,Typ,Ausnahmen(Werte,Typ,vec_Beruf)));
    }
 laden_label->hide();
 exec sql close kido_ein;
 tr.commit();
 kido_zeigen();
}

void midgard_CG::kido_zeigen()
{
 zeige_werte(Werte);
 on_speichern_clicked();
 show_alte_kido();
 show_neue_kido();
}

void midgard_CG::on_leaf_selected_alte_kido(cH_RowDataBase d)
{  
   const Data_kido *dt=dynamic_cast<const Data_kido*>(&*d);
   if (steigern_bool) desteigern(dt->Kosten());
   Werte.add_GFP(-dt->Kosten());
   move_kido(list_Kido,list_Kido_neu,dt->Hoho());
}



void midgard_CG::on_leaf_selected_neue_kido(cH_RowDataBase d)
{  
  const Data_kido *dt=dynamic_cast<const Data_kido*>(&*d);
  if (!steigern(dt->Kosten(),"KiDo")) return;
  Werte.add_GFP(dt->Kosten());
  move_kido(list_Kido_neu,list_Kido,dt->Hoho());
}


void midgard_CG::on_button_kido_sort_clicked()
{
  std::deque<guint> seq = alte_kido_tree->get_seq();
  switch((Data_kido::Spalten_A)seq[0]) {
      case Data_kido::HOHOa  : list_Kido.sort(KiDo_sort_hoho()); ;break;
      case Data_kido::NAMEa  : list_Kido.sort(KiDo_sort_name()); ;break;
      case Data_kido::STUFEa : list_Kido.sort(KiDo_sort_stufe()); ;break;
      case Data_kido::APa    : list_Kido.sort(KiDo_sort_ap()); ;break;
      case Data_kido::STILa  : list_Kido.sort(KiDo_sort_stil()); ;break;
      default : manage(new WindowInfo("Sortieren nach diesem Parameter\n ist nicht möglich"));
   }
}

void midgard_CG::show_alte_kido()
{
   std::vector<cH_RowDataBase> datavec;
   for (std::list<cH_KiDo>::iterator i=list_Kido.begin(); i!=list_Kido.end();++i)
      datavec.push_back(new Data_kido((*i)->Hoho(),(*i)->Name(),(*i)->Stufe(),(*i)->Ap(),(*i)->Kosten(),(*i)->Stil()));
   alte_kido_tree->setDataVec(datavec);
}

void midgard_CG::show_neue_kido()
{
  std::vector<cH_RowDataBase> datavec;
  bool gem_technik = (Werte.Spezialisierung()=="Gemischte Techniken");
  for (std::list<cH_KiDo>::iterator i=list_Kido_neu.begin();i!=list_Kido_neu.end();++i)
   {
    if(((*i)->Stufe()=="Schüler"     && gem_technik && maxkidostil("Schüler")<11)||
       ((*i)->Stufe()=="Schüler"     &&!gem_technik && maxkidostil("Schüler")<12)||
       ((*i)->Stufe()=="Eingeweihter"&& gem_technik && maxkidostil("Eingeweihter")< 6)||
       ((*i)->Stufe()=="Eingeweihter"&&!gem_technik && maxkidostil("Eingeweihter")< 7)||
       ((*i)->Stufe()=="Meister"     && gem_technik && maxkidostil("Meister")< 2)||
       ((*i)->Stufe()=="Meister"     &&!gem_technik && maxkidostil("Meister")< 3))
      datavec.push_back(new Data_kido((*i)->Hoho(),(*i)->Name(),(*i)->Stufe(),(*i)->Ap(),(*i)->Kosten(),(*i)->Stil()));
   }
  neue_kido_tree->setDataVec(datavec);
}




void midgard_CG::move_kido(std::list<cH_KiDo>& von,std::list<cH_KiDo>& nach,const std::string& name)
{
 for (std::list<cH_KiDo>::iterator i=von.begin();i!= von.end();++i)
     if ((*i)->Hoho()==name) 
       {nach.splice(nach.begin(),von,i);break;}
 kido_zeigen();
}

int midgard_CG::maxkidostil(const std::string& stufe)
{
  int count=0;
  for (std::list<cH_KiDo>::const_iterator i=list_Kido.begin();i!=list_Kido.end();++i)
     if ((*i)->Stufe()==stufe) ++count;
  return count;
}
