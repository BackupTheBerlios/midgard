// generated 2002/12/19 19:05:37 CET by christof@puck.petig-baender.de
// using glademm V1.1.3c
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- midgard.glade
// for gtk 2.0.9 and gtkmm 2.0.2
//
// Please modify the corresponding derived classes in ./src/table_zufall.cc

#include "config.h"
#include "table_zufall_glade.hh"
#include <gtkmm/entry.h>
#include <gtkmm/label.h>
#include <gtkmm/treeview.h>
#include <gtkmm/adjustment.h>
#include <gtkmm/table.h>
#include <gtkmm/image.h>
#include "../pixmaps/Vorgabe-32.xpm"
#include <gtkmm/box.h>
#include "../pixmaps/ZF_G1-Char-32.xpm"
#include <gtkmm/frame.h>
#include "../pixmaps/Anpass-trans-50.xpm"
#include <gtkmm/button.h>
#include <gtkmm/scrolledwindow.h>
#include <gtkmm/eventbox.h>
#include <gtkmm/separator.h>
#include "../pixmaps/Modify-32.xpm"

table_zufall_glade::table_zufall_glade(GlademmData *_data
) : Gtk::Table(2, 2, false)
{  table_zufall = this;
   checkbutton_spezies = Gtk::manage(new class Gtk::CheckButton("Spezies"));
   checkbutton_herkunft = Gtk::manage(new class Gtk::CheckButton("Herkunft"));
   checkbutton_typ = Gtk::manage(new class Gtk::CheckButton("Typ"));
   checkbutton_ange_fert = Gtk::manage(new class Gtk::CheckButton("angeb. Fert."));
   combo_spezies = Gtk::manage(new class Gtk::Combo());
   combo_typ = Gtk::manage(new class Gtk::Combo());
   combo_herkunft = Gtk::manage(new class Gtk::Combo());
   checkbutton_werte = Gtk::manage(new class Gtk::CheckButton("Werte"));
   checkbutton_st = Gtk::manage(new class Gtk::CheckButton("St"));
   checkbutton_gs = Gtk::manage(new class Gtk::CheckButton("Gs"));
   checkbutton_gw = Gtk::manage(new class Gtk::CheckButton("Gw"));
   checkbutton_ko = Gtk::manage(new class Gtk::CheckButton("Ko"));
   checkbutton_in = Gtk::manage(new class Gtk::CheckButton("In"));
   checkbutton_zt = Gtk::manage(new class Gtk::CheckButton("Zt"));
   checkbutton_au = Gtk::manage(new class Gtk::CheckButton("Au"));
   checkbutton_pa = Gtk::manage(new class Gtk::CheckButton("pA"));
   checkbutton_wk = Gtk::manage(new class Gtk::CheckButton("Wk"));
   checkbutton_sb = Gtk::manage(new class Gtk::CheckButton("Sb"));
   checkbutton_b = Gtk::manage(new class Gtk::CheckButton("B"));
   
   Gtk::Adjustment *spinbutton_st_adj = Gtk::manage(new class Gtk::Adjustment(1, 1, 100, 1, 10, 10));
   spinbutton_st = Gtk::manage(new class Gtk::SpinButton(*spinbutton_st_adj, 1, 0));
   
   Gtk::Adjustment *spinbutton_au_adj = Gtk::manage(new class Gtk::Adjustment(1, 1, 100, 1, 10, 10));
   spinbutton_au = Gtk::manage(new class Gtk::SpinButton(*spinbutton_au_adj, 1, 0));
   
   Gtk::Adjustment *spinbutton_pa_adj = Gtk::manage(new class Gtk::Adjustment(1, 1, 100, 1, 10, 10));
   spinbutton_pa = Gtk::manage(new class Gtk::SpinButton(*spinbutton_pa_adj, 1, 0));
   
   Gtk::Adjustment *spinbutton_wk_adj = Gtk::manage(new class Gtk::Adjustment(1, 1, 100, 1, 10, 10));
   spinbutton_wk = Gtk::manage(new class Gtk::SpinButton(*spinbutton_wk_adj, 1, 0));
   
   Gtk::Adjustment *spinbutton_sb_adj = Gtk::manage(new class Gtk::Adjustment(1, 1, 100, 1, 10, 10));
   spinbutton_sb = Gtk::manage(new class Gtk::SpinButton(*spinbutton_sb_adj, 1, 0));
   
   Gtk::Adjustment *spinbutton_b_adj = Gtk::manage(new class Gtk::Adjustment(1, 1, 100, 1, 10, 10));
   spinbutton_b = Gtk::manage(new class Gtk::SpinButton(*spinbutton_b_adj, 1, 0));
   
   Gtk::Adjustment *spinbutton_gs_adj = Gtk::manage(new class Gtk::Adjustment(1, 1, 100, 1, 10, 10));
   spinbutton_gs = Gtk::manage(new class Gtk::SpinButton(*spinbutton_gs_adj, 1, 0));
   
   Gtk::Adjustment *spinbutton_gw_adj = Gtk::manage(new class Gtk::Adjustment(1, 1, 100, 1, 10, 10));
   spinbutton_gw = Gtk::manage(new class Gtk::SpinButton(*spinbutton_gw_adj, 1, 0));
   
   Gtk::Adjustment *spinbutton_ko_adj = Gtk::manage(new class Gtk::Adjustment(1, 1, 100, 1, 10, 10));
   spinbutton_ko = Gtk::manage(new class Gtk::SpinButton(*spinbutton_ko_adj, 1, 0));
   
   Gtk::Adjustment *spinbutton_in_adj = Gtk::manage(new class Gtk::Adjustment(1, 1, 100, 1, 10, 10));
   spinbutton_in = Gtk::manage(new class Gtk::SpinButton(*spinbutton_in_adj, 1, 0));
   
   Gtk::Adjustment *spinbutton_zt_adj = Gtk::manage(new class Gtk::Adjustment(1, 1, 100, 1, 10, 10));
   spinbutton_zt = Gtk::manage(new class Gtk::SpinButton(*spinbutton_zt_adj, 1, 0));
   
   Gtk::Table *table168 = Gtk::manage(new class Gtk::Table(2, 2, false));
   frame_werte_vorgaben = Gtk::manage(new class Gtk::Frame());
   
   Gtk::Table *table166 = Gtk::manage(new class Gtk::Table(2, 2, false));
   Gtk::Label *label683 = Gtk::manage(new class Gtk::Label("Vorgaben"));
   frame_vorgaben = Gtk::manage(new class Gtk::Frame());
   
   Glib::RefPtr<Gdk::Bitmap> _pixmap172_mask;
   Glib::RefPtr<Gdk::Pixmap> _pixmap172_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _pixmap172_mask, Vorgabe_32_xpm);
   Gtk::Image *pixmap172 = Gtk::manage(new class Gtk::Image(_pixmap172_pixmap, _pixmap172_mask));
   Gtk::Label *label620 = Gtk::manage(new class Gtk::Label("Vorgaben\n"
		"machen"));
   Gtk::HBox *hbox93 = Gtk::manage(new class Gtk::HBox(false, 0));
   togglebutton_vorgaben = Gtk::manage(new class Gtk::ToggleButton());
   
   Glib::RefPtr<Gdk::Bitmap> _pixmap171_mask;
   Glib::RefPtr<Gdk::Pixmap> _pixmap171_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _pixmap171_mask, ZF_G1_Char_32_xpm);
   Gtk::Image *pixmap171 = Gtk::manage(new class Gtk::Image(_pixmap171_pixmap, _pixmap171_mask));
   Gtk::Label *label619 = Gtk::manage(new class Gtk::Label("Zufallsabenteurer\n"
		"Grad 1 erzeugen"));
   Gtk::HBox *hbox92 = Gtk::manage(new class Gtk::HBox(false, 0));
   button_zufall_voll = Gtk::manage(new class Gtk::Button());
   
   Gtk::Table *table170 = Gtk::manage(new class Gtk::Table(2, 2, false));
   Gtk::Label *label682 = Gtk::manage(new class Gtk::Label("Abenteurer erzeugen"));
   Gtk::Frame *frame110 = Gtk::manage(new class Gtk::Frame());
   Glib::RefPtr<Gdk::Bitmap> _pixmap173_mask;
   Glib::RefPtr<Gdk::Pixmap> _pixmap173_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _pixmap173_mask, Anpass_trans_50_xpm);
   Gtk::Image *pixmap173 = Gtk::manage(new class Gtk::Image(_pixmap173_pixmap, _pixmap173_mask));
   Gtk::Label *label621 = Gtk::manage(new class Gtk::Label("Steigern"));
   Gtk::HBox *hbox94 = Gtk::manage(new class Gtk::HBox(false, 0));
   Gtk::Button *button_steigern = Gtk::manage(new class Gtk::Button());
   Gtk::RadioButton::Group _RadioBGroup_radiobutton_proto_verteilen;
   radiobutton_proto_verteilen = Gtk::manage(new class Gtk::RadioButton(_RadioBGroup_radiobutton_proto_verteilen, "Verteile"));
   radiobutton_proto_spezialisieren = Gtk::manage(new class Gtk::RadioButton(_RadioBGroup_radiobutton_proto_verteilen, "Spezialisieren"));
   
   Gtk::Table *table174 = Gtk::manage(new class Gtk::Table(2, 2, false));
   Gtk::Frame *frame116 = Gtk::manage(new class Gtk::Frame());
   Gtk::Label *label627 = Gtk::manage(new class Gtk::Label("Ausnahmekenntnisse"));
   Gtk::Label *label625 = Gtk::manage(new class Gtk::Label("Grundkenntnisse"));
   Gtk::Label *label626 = Gtk::manage(new class Gtk::Label("Standardkenntnisse"));
   Gtk::Adjustment *spinbutton_ausnahme_adj = Gtk::manage(new class Gtk::Adjustment(1, 0, 100, 1, 10, 10));
   spinbutton_ausnahme = Gtk::manage(new class Gtk::SpinButton(*spinbutton_ausnahme_adj, 1, 0));
   
   Gtk::Adjustment *spinbutton_standard_adj = Gtk::manage(new class Gtk::Adjustment(1, 0, 100, 1, 10, 10));
   spinbutton_standard = Gtk::manage(new class Gtk::SpinButton(*spinbutton_standard_adj, 1, 0));
   
   Gtk::Adjustment *spinbutton_grund_adj = Gtk::manage(new class Gtk::Adjustment(1, 0, 100, 1, 10, 10));
   spinbutton_grund = Gtk::manage(new class Gtk::SpinButton(*spinbutton_grund_adj, 1, 0));
   
   Gtk::Table *table173 = Gtk::manage(new class Gtk::Table(2, 2, false));
   Gtk::Label *label685 = Gtk::manage(new class Gtk::Label("Verteilung auf"));
   frame_verteilung_auf = Gtk::manage(new class Gtk::Frame());
   tree_prototyp = new class SimpleTree(4);
   
   Gtk::ScrolledWindow *scrolledwindow_prototyp = Gtk::manage(new class Gtk::ScrolledWindow());
   Gtk::Label *label686 = Gtk::manage(new class Gtk::Label("Spezialisieren auf einen oder mehrere Spezialisierungs-Typen"));
   frame_spezialist_typen = Gtk::manage(new class Gtk::Frame());
   
   Gtk::Table *table176 = Gtk::manage(new class Gtk::Table(2, 2, false));
   Gtk::EventBox *eventbox23 = Gtk::manage(new class Gtk::EventBox());
   Gtk::Adjustment *spinbutton_zauberwerk_adj = Gtk::manage(new class Gtk::Adjustment(1, 0, 100, 1, 10, 10));
   spinbutton_zauberwerk = Gtk::manage(new class Gtk::SpinButton(*spinbutton_zauberwerk_adj, 1, 0));
   
   Gtk::Label *label612 = Gtk::manage(new class Gtk::Label("Fertig-\n"
		"keiten"));
   Gtk::Label *label613 = Gtk::manage(new class Gtk::Label("Waffen"));
   Gtk::Label *label614 = Gtk::manage(new class Gtk::Label("Waffen-\n"
		"Grund."));
   Gtk::Label *label615 = Gtk::manage(new class Gtk::Label("Zauber"));
   Gtk::Label *label616 = Gtk::manage(new class Gtk::Label("Zauber-\n"
		"werk"));
   Gtk::Label *label617 = Gtk::manage(new class Gtk::Label("Sprachen"));
   Gtk::Label *label618 = Gtk::manage(new class Gtk::Label("Schriften"));
   Gtk::Button *button_check100 = Gtk::manage(new class Gtk::Button("Eingestellte Werte\n"
		"Ã¼bernehmen und testen"));
   Gtk::Label *label610 = Gtk::manage(new class Gtk::Label("Gebildeter (neu lernen)"));
   Gtk::Label *label609 = Gtk::manage(new class Gtk::Label("Spezialist (steigern)"));
   scale_fert = new class MyScale();
   scale_waffen = new class MyScale();
   scale_sprachen = new class MyScale();
   scale_schriften = new class MyScale();
   
   Gtk::HSeparator *hseparator21 = Gtk::manage(new class Gtk::HSeparator());
   Gtk::Adjustment *spinbutton_fertigkeit_adj = Gtk::manage(new class Gtk::Adjustment(1, 0, 100, 1, 10, 10));
   spinbutton_fertigkeit = Gtk::manage(new class Gtk::SpinButton(*spinbutton_fertigkeit_adj, 1, 0));
   
   Gtk::Adjustment *spinbutton_waffen_adj = Gtk::manage(new class Gtk::Adjustment(1, 0, 100, 1, 10, 10));
   spinbutton_waffen = Gtk::manage(new class Gtk::SpinButton(*spinbutton_waffen_adj, 1, 0));
   
   Gtk::Adjustment *spinbutton_waffen_grund_adj = Gtk::manage(new class Gtk::Adjustment(1, 0, 100, 1, 10, 10));
   spinbutton_waffen_grund = Gtk::manage(new class Gtk::SpinButton(*spinbutton_waffen_grund_adj, 1, 0));
   
   Gtk::Adjustment *spinbutton_zauber_adj = Gtk::manage(new class Gtk::Adjustment(1, 0, 100, 1, 10, 10));
   spinbutton_zauber = Gtk::manage(new class Gtk::SpinButton(*spinbutton_zauber_adj, 1, 0));
   
   Gtk::Adjustment *spinbutton_sprachen_adj = Gtk::manage(new class Gtk::Adjustment(1, 0, 100, 1, 10, 10));
   spinbutton_sprachen = Gtk::manage(new class Gtk::SpinButton(*spinbutton_sprachen_adj, 1, 0));
   
   Gtk::Adjustment *spinbutton_schriften_adj = Gtk::manage(new class Gtk::Adjustment(1, 0, 100, 1, 10, 10));
   spinbutton_schriften = Gtk::manage(new class Gtk::SpinButton(*spinbutton_schriften_adj, 1, 0));
   
   Gtk::Table *table172 = Gtk::manage(new class Gtk::Table(2, 2, false));
   Gtk::EventBox *eventbox21 = Gtk::manage(new class Gtk::EventBox());
   Gtk::Table *table175 = Gtk::manage(new class Gtk::Table(2, 2, false));
   frame_prototyp_mod = Gtk::manage(new class Gtk::Frame());
   
   Gtk::RadioButton::Group _RadioBGroup_radiobutton_steigern_gfp;
   radiobutton_steigern_gfp = Gtk::manage(new class Gtk::RadioButton(_RadioBGroup_radiobutton_steigern_gfp, "GFP"));
   
   Gtk::Adjustment *spinbutton_grad_adj = Gtk::manage(new class Gtk::Adjustment(1, 0, 15, 1, 10, 10));
   spinbutton_grad = Gtk::manage(new class Gtk::SpinButton(*spinbutton_grad_adj, 1, 0));
   
   Gtk::Adjustment *spinbutton_gfp_adj = Gtk::manage(new class Gtk::Adjustment(1, 0, 1e+07, 1, 10, 10));
   spinbutton_gfp = Gtk::manage(new class Gtk::SpinButton(*spinbutton_gfp_adj, 1, 0));
   radiobutton_steigern_grad = Gtk::manage(new class Gtk::RadioButton(_RadioBGroup_radiobutton_steigern_gfp, "Grad"));
   
   Gtk::Table *table169 = Gtk::manage(new class Gtk::Table(2, 2, false));
   Gtk::EventBox *eventbox22 = Gtk::manage(new class Gtk::EventBox());
   Gtk::Frame *frame113 = Gtk::manage(new class Gtk::Frame());
   combo_prototyp = Gtk::manage(new class Gtk::Combo());
   
   Glib::RefPtr<Gdk::Bitmap> _pixmap174_mask;
   Glib::RefPtr<Gdk::Pixmap> _pixmap174_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _pixmap174_mask, Modify_32_xpm);
   Gtk::Image *pixmap174 = Gtk::manage(new class Gtk::Image(_pixmap174_pixmap, _pixmap174_mask));
   Gtk::Label *label622 = Gtk::manage(new class Gtk::Label("Modifizieren"));
   Gtk::HBox *hbox95 = Gtk::manage(new class Gtk::HBox(false, 0));
   togglebutton_prototyp = Gtk::manage(new class Gtk::ToggleButton());
   
   Gtk::HBox *hbox91 = Gtk::manage(new class Gtk::HBox(false, 0));
   Gtk::Label *label687 = Gtk::manage(new class Gtk::Label("Prototyp"));
   Gtk::Frame *frame112 = Gtk::manage(new class Gtk::Frame());
   Gtk::Table *table165 = Gtk::manage(new class Gtk::Table(2, 2, false));
   Gtk::Label *label684 = Gtk::manage(new class Gtk::Label("Abenteurer steigern"));
   Gtk::Frame *frame111 = Gtk::manage(new class Gtk::Frame());
   checkbutton_spezies->set_flags(Gtk::CAN_FOCUS);
   checkbutton_spezies->set_relief(Gtk::RELIEF_NORMAL);
   checkbutton_spezies->set_mode(true);
   checkbutton_spezies->set_active(false);
   checkbutton_herkunft->set_flags(Gtk::CAN_FOCUS);
   checkbutton_herkunft->set_relief(Gtk::RELIEF_NORMAL);
   checkbutton_herkunft->set_mode(true);
   checkbutton_herkunft->set_active(false);
   checkbutton_typ->set_flags(Gtk::CAN_FOCUS);
   checkbutton_typ->set_relief(Gtk::RELIEF_NORMAL);
   checkbutton_typ->set_mode(true);
   checkbutton_typ->set_active(false);
   checkbutton_ange_fert->set_flags(Gtk::CAN_FOCUS);
   checkbutton_ange_fert->set_relief(Gtk::RELIEF_NORMAL);
   checkbutton_ange_fert->set_mode(true);
   checkbutton_ange_fert->set_active(false);
   combo_spezies->get_entry()->set_flags(Gtk::CAN_FOCUS);
   combo_spezies->get_entry()->set_editable(true);
   combo_spezies->get_entry()->set_max_length(0);
   combo_spezies->get_entry()->set_text("");
   combo_spezies->set_sensitive(false);
   combo_spezies->set_case_sensitive(false);
   {  
      
      const char * const items[] = { "", 0 };
      combo_spezies->set_popdown_strings(items);
   }
   combo_spezies->get_entry()->set_text("");
   combo_typ->get_entry()->set_flags(Gtk::CAN_FOCUS);
   combo_typ->get_entry()->set_editable(true);
   combo_typ->get_entry()->set_max_length(0);
   combo_typ->get_entry()->set_text("");
   combo_typ->set_sensitive(false);
   combo_typ->set_case_sensitive(false);
   {  
      
      const char * const items[] = { "", 0 };
      combo_typ->set_popdown_strings(items);
   }
   combo_typ->get_entry()->set_text("");
   combo_herkunft->get_entry()->set_flags(Gtk::CAN_FOCUS);
   combo_herkunft->get_entry()->set_editable(true);
   combo_herkunft->get_entry()->set_max_length(0);
   combo_herkunft->get_entry()->set_text("");
   combo_herkunft->set_sensitive(false);
   combo_herkunft->set_case_sensitive(false);
   {  
      
      const char * const items[] = { "", 0 };
      combo_herkunft->set_popdown_strings(items);
   }
   combo_herkunft->get_entry()->set_text("");
   checkbutton_werte->set_flags(Gtk::CAN_FOCUS);
   checkbutton_werte->set_relief(Gtk::RELIEF_NORMAL);
   checkbutton_werte->set_mode(true);
   checkbutton_werte->set_active(false);
   checkbutton_st->set_flags(Gtk::CAN_FOCUS);
   checkbutton_st->set_relief(Gtk::RELIEF_NORMAL);
   checkbutton_st->set_mode(true);
   checkbutton_st->set_active(false);
   checkbutton_gs->set_flags(Gtk::CAN_FOCUS);
   checkbutton_gs->set_relief(Gtk::RELIEF_NORMAL);
   checkbutton_gs->set_mode(true);
   checkbutton_gs->set_active(false);
   checkbutton_gw->set_flags(Gtk::CAN_FOCUS);
   checkbutton_gw->set_relief(Gtk::RELIEF_NORMAL);
   checkbutton_gw->set_mode(true);
   checkbutton_gw->set_active(false);
   checkbutton_ko->set_flags(Gtk::CAN_FOCUS);
   checkbutton_ko->set_relief(Gtk::RELIEF_NORMAL);
   checkbutton_ko->set_mode(true);
   checkbutton_ko->set_active(false);
   checkbutton_in->set_flags(Gtk::CAN_FOCUS);
   checkbutton_in->set_relief(Gtk::RELIEF_NORMAL);
   checkbutton_in->set_mode(true);
   checkbutton_in->set_active(false);
   checkbutton_zt->set_flags(Gtk::CAN_FOCUS);
   checkbutton_zt->set_relief(Gtk::RELIEF_NORMAL);
   checkbutton_zt->set_mode(true);
   checkbutton_zt->set_active(false);
   checkbutton_au->set_flags(Gtk::CAN_FOCUS);
   checkbutton_au->set_relief(Gtk::RELIEF_NORMAL);
   checkbutton_au->set_mode(true);
   checkbutton_au->set_active(false);
   checkbutton_pa->set_flags(Gtk::CAN_FOCUS);
   checkbutton_pa->set_relief(Gtk::RELIEF_NORMAL);
   checkbutton_pa->set_mode(true);
   checkbutton_pa->set_active(false);
   checkbutton_wk->set_flags(Gtk::CAN_FOCUS);
   checkbutton_wk->set_relief(Gtk::RELIEF_NORMAL);
   checkbutton_wk->set_mode(true);
   checkbutton_wk->set_active(false);
   checkbutton_sb->set_flags(Gtk::CAN_FOCUS);
   checkbutton_sb->set_relief(Gtk::RELIEF_NORMAL);
   checkbutton_sb->set_mode(true);
   checkbutton_sb->set_active(false);
   checkbutton_b->set_flags(Gtk::CAN_FOCUS);
   checkbutton_b->set_relief(Gtk::RELIEF_NORMAL);
   checkbutton_b->set_mode(true);
   checkbutton_b->set_active(false);
   spinbutton_st->set_sensitive(false);
   spinbutton_st->set_flags(Gtk::CAN_FOCUS);
   spinbutton_st->set_update_policy(Gtk::UPDATE_ALWAYS);
   spinbutton_st->set_numeric(false);
   spinbutton_st->set_digits(0);
   spinbutton_st->set_wrap(false);
   spinbutton_au->set_sensitive(false);
   spinbutton_au->set_flags(Gtk::CAN_FOCUS);
   spinbutton_au->set_update_policy(Gtk::UPDATE_ALWAYS);
   spinbutton_au->set_numeric(false);
   spinbutton_au->set_digits(0);
   spinbutton_au->set_wrap(false);
   spinbutton_pa->set_sensitive(false);
   spinbutton_pa->set_flags(Gtk::CAN_FOCUS);
   spinbutton_pa->set_update_policy(Gtk::UPDATE_ALWAYS);
   spinbutton_pa->set_numeric(false);
   spinbutton_pa->set_digits(0);
   spinbutton_pa->set_wrap(false);
   spinbutton_wk->set_sensitive(false);
   spinbutton_wk->set_flags(Gtk::CAN_FOCUS);
   spinbutton_wk->set_update_policy(Gtk::UPDATE_ALWAYS);
   spinbutton_wk->set_numeric(false);
   spinbutton_wk->set_digits(0);
   spinbutton_wk->set_wrap(false);
   spinbutton_sb->set_sensitive(false);
   spinbutton_sb->set_flags(Gtk::CAN_FOCUS);
   spinbutton_sb->set_update_policy(Gtk::UPDATE_ALWAYS);
   spinbutton_sb->set_numeric(false);
   spinbutton_sb->set_digits(0);
   spinbutton_sb->set_wrap(false);
   spinbutton_b->set_sensitive(false);
   spinbutton_b->set_flags(Gtk::CAN_FOCUS);
   spinbutton_b->set_update_policy(Gtk::UPDATE_ALWAYS);
   spinbutton_b->set_numeric(false);
   spinbutton_b->set_digits(0);
   spinbutton_b->set_wrap(false);
   spinbutton_gs->set_sensitive(false);
   spinbutton_gs->set_flags(Gtk::CAN_FOCUS);
   spinbutton_gs->set_update_policy(Gtk::UPDATE_ALWAYS);
   spinbutton_gs->set_numeric(false);
   spinbutton_gs->set_digits(0);
   spinbutton_gs->set_wrap(false);
   spinbutton_gw->set_sensitive(false);
   spinbutton_gw->set_flags(Gtk::CAN_FOCUS);
   spinbutton_gw->set_update_policy(Gtk::UPDATE_ALWAYS);
   spinbutton_gw->set_numeric(false);
   spinbutton_gw->set_digits(0);
   spinbutton_gw->set_wrap(false);
   spinbutton_ko->set_sensitive(false);
   spinbutton_ko->set_flags(Gtk::CAN_FOCUS);
   spinbutton_ko->set_update_policy(Gtk::UPDATE_ALWAYS);
   spinbutton_ko->set_numeric(false);
   spinbutton_ko->set_digits(0);
   spinbutton_ko->set_wrap(false);
   spinbutton_in->set_sensitive(false);
   spinbutton_in->set_flags(Gtk::CAN_FOCUS);
   spinbutton_in->set_update_policy(Gtk::UPDATE_ALWAYS);
   spinbutton_in->set_numeric(false);
   spinbutton_in->set_digits(0);
   spinbutton_in->set_wrap(false);
   spinbutton_zt->set_sensitive(false);
   spinbutton_zt->set_flags(Gtk::CAN_FOCUS);
   spinbutton_zt->set_update_policy(Gtk::UPDATE_ALWAYS);
   spinbutton_zt->set_numeric(false);
   spinbutton_zt->set_digits(0);
   spinbutton_zt->set_wrap(false);
   table168->set_row_spacings(0);
   table168->set_col_spacings(0);
   table168->attach(*checkbutton_st, 0, 1, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table168->attach(*checkbutton_gs, 0, 1, 1, 2, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table168->attach(*checkbutton_gw, 0, 1, 2, 3, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table168->attach(*checkbutton_ko, 0, 1, 3, 4, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table168->attach(*checkbutton_in, 0, 1, 4, 5, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table168->attach(*checkbutton_zt, 0, 1, 5, 6, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table168->attach(*checkbutton_au, 2, 3, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table168->attach(*checkbutton_pa, 2, 3, 1, 2, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table168->attach(*checkbutton_wk, 2, 3, 2, 3, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table168->attach(*checkbutton_sb, 2, 3, 3, 4, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table168->attach(*checkbutton_b, 2, 3, 4, 5, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table168->attach(*spinbutton_st, 1, 2, 0, 1, Gtk::AttachOptions(), Gtk::AttachOptions(), 0, 0);
   table168->attach(*spinbutton_au, 3, 4, 0, 1, Gtk::AttachOptions(), Gtk::AttachOptions(), 0, 0);
   table168->attach(*spinbutton_pa, 3, 4, 1, 2, Gtk::AttachOptions(), Gtk::AttachOptions(), 0, 0);
   table168->attach(*spinbutton_wk, 3, 4, 2, 3, Gtk::AttachOptions(), Gtk::AttachOptions(), 0, 0);
   table168->attach(*spinbutton_sb, 3, 4, 3, 4, Gtk::AttachOptions(), Gtk::AttachOptions(), 0, 0);
   table168->attach(*spinbutton_b, 3, 4, 4, 5, Gtk::AttachOptions(), Gtk::AttachOptions(), 0, 0);
   table168->attach(*spinbutton_gs, 1, 2, 1, 2, Gtk::AttachOptions(), Gtk::AttachOptions(), 0, 0);
   table168->attach(*spinbutton_gw, 1, 2, 2, 3, Gtk::AttachOptions(), Gtk::AttachOptions(), 0, 0);
   table168->attach(*spinbutton_ko, 1, 2, 3, 4, Gtk::AttachOptions(), Gtk::AttachOptions(), 0, 0);
   table168->attach(*spinbutton_in, 1, 2, 4, 5, Gtk::AttachOptions(), Gtk::AttachOptions(), 0, 0);
   table168->attach(*spinbutton_zt, 1, 2, 5, 6, Gtk::AttachOptions(), Gtk::AttachOptions(), 0, 0);
   frame_werte_vorgaben->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame_werte_vorgaben->set_label_align(0,0.5);
   frame_werte_vorgaben->add(*table168);
   table166->set_row_spacings(0);
   table166->set_col_spacings(0);
   table166->attach(*checkbutton_spezies, 0, 1, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table166->attach(*checkbutton_herkunft, 0, 1, 2, 3, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table166->attach(*checkbutton_typ, 0, 1, 1, 2, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table166->attach(*checkbutton_ange_fert, 0, 1, 3, 4, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table166->attach(*combo_spezies, 1, 2, 0, 1, Gtk::AttachOptions(), Gtk::AttachOptions(), 0, 0);
   table166->attach(*combo_typ, 1, 2, 1, 2, Gtk::AttachOptions(), Gtk::AttachOptions(), 0, 0);
   table166->attach(*combo_herkunft, 1, 2, 2, 3, Gtk::AttachOptions(), Gtk::AttachOptions(), 0, 0);
   table166->attach(*checkbutton_werte, 0, 1, 4, 5, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table166->attach(*frame_werte_vorgaben, 0, 2, 5, 6, Gtk::SHRINK|Gtk::FILL, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, 0, 0);
   label683->set_alignment(0.5,0.5);
   label683->set_padding(0,0);
   label683->set_justify(Gtk::JUSTIFY_LEFT);
   label683->set_line_wrap(false);
   label683->set_use_markup(false);
   frame_vorgaben->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame_vorgaben->set_label_align(0,0.5);
   frame_vorgaben->add(*table166);
   frame_vorgaben->set_label_widget(*label683);
   pixmap172->set_alignment(0.5,0.5);
   pixmap172->set_padding(0,0);
   label620->set_alignment(0.5,0.5);
   label620->set_padding(0,0);
   label620->set_justify(Gtk::JUSTIFY_CENTER);
   label620->set_line_wrap(false);
   label620->set_use_markup(false);
   hbox93->pack_start(*pixmap172, Gtk::PACK_SHRINK, 0);
   hbox93->pack_start(*label620, Gtk::PACK_SHRINK, 0);
   togglebutton_vorgaben->set_flags(Gtk::CAN_FOCUS);
   togglebutton_vorgaben->set_relief(Gtk::RELIEF_NORMAL);
   togglebutton_vorgaben->set_active(false);
   togglebutton_vorgaben->add(*hbox93);
   pixmap171->set_alignment(0.5,0.5);
   pixmap171->set_padding(0,0);
   label619->set_alignment(0.5,0.5);
   label619->set_padding(0,0);
   label619->set_justify(Gtk::JUSTIFY_CENTER);
   label619->set_line_wrap(false);
   label619->set_use_markup(false);
   hbox92->pack_start(*pixmap171);
   hbox92->pack_start(*label619, Gtk::PACK_SHRINK, 0);
   button_zufall_voll->set_flags(Gtk::CAN_FOCUS);
   button_zufall_voll->set_relief(Gtk::RELIEF_NORMAL);
   button_zufall_voll->add(*hbox92);
   table170->set_row_spacings(0);
   table170->set_col_spacings(0);
   table170->attach(*frame_vorgaben, 0, 2, 1, 2, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, 0, 0);
   table170->attach(*togglebutton_vorgaben, 1, 2, 0, 1, Gtk::SHRINK, Gtk::SHRINK, 0, 0);
   table170->attach(*button_zufall_voll, 0, 1, 0, 1, Gtk::SHRINK, Gtk::SHRINK, 0, 0);
   label682->set_alignment(0.5,0.5);
   label682->set_padding(0,0);
   label682->set_justify(Gtk::JUSTIFY_LEFT);
   label682->set_line_wrap(false);
   label682->set_use_markup(false);
   frame110->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame110->set_label_align(0,0.5);
   frame110->add(*table170);
   frame110->set_label_widget(*label682);
   pixmap173->set_alignment(0.5,0.5);
   pixmap173->set_padding(0,0);
   label621->set_alignment(0.5,0.5);
   label621->set_padding(0,0);
   label621->set_justify(Gtk::JUSTIFY_CENTER);
   label621->set_line_wrap(false);
   label621->set_use_markup(false);
   hbox94->pack_start(*pixmap173, Gtk::PACK_SHRINK, 0);
   hbox94->pack_start(*label621, Gtk::PACK_SHRINK, 0);
   button_steigern->set_flags(Gtk::CAN_FOCUS);
   button_steigern->set_relief(Gtk::RELIEF_NORMAL);
   button_steigern->add(*hbox94);
   radiobutton_proto_verteilen->set_flags(Gtk::CAN_FOCUS);
   radiobutton_proto_verteilen->set_relief(Gtk::RELIEF_NORMAL);
   radiobutton_proto_verteilen->set_mode(true);
   radiobutton_proto_verteilen->set_active(false);
   radiobutton_proto_spezialisieren->set_flags(Gtk::CAN_FOCUS);
   radiobutton_proto_spezialisieren->set_relief(Gtk::RELIEF_NORMAL);
   radiobutton_proto_spezialisieren->set_mode(true);
   radiobutton_proto_spezialisieren->set_active(false);
   table174->set_row_spacings(0);
   table174->set_col_spacings(0);
   table174->attach(*radiobutton_proto_verteilen, 0, 1, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table174->attach(*radiobutton_proto_spezialisieren, 0, 1, 1, 2, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   frame116->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame116->set_label_align(0,0.5);
   frame116->add(*table174);
   label627->set_alignment(0,0.5);
   label627->set_padding(0,0);
   label627->set_justify(Gtk::JUSTIFY_CENTER);
   label627->set_line_wrap(false);
   label627->set_use_markup(false);
   label625->set_alignment(0,0.5);
   label625->set_padding(0,0);
   label625->set_justify(Gtk::JUSTIFY_CENTER);
   label625->set_line_wrap(false);
   label625->set_use_markup(false);
   label626->set_alignment(0,0.5);
   label626->set_padding(0,0);
   label626->set_justify(Gtk::JUSTIFY_CENTER);
   label626->set_line_wrap(false);
   label626->set_use_markup(false);
   spinbutton_ausnahme->set_flags(Gtk::CAN_FOCUS);
   spinbutton_ausnahme->set_update_policy(Gtk::UPDATE_ALWAYS);
   spinbutton_ausnahme->set_numeric(false);
   spinbutton_ausnahme->set_digits(0);
   spinbutton_ausnahme->set_wrap(false);
   spinbutton_standard->set_flags(Gtk::CAN_FOCUS);
   spinbutton_standard->set_update_policy(Gtk::UPDATE_ALWAYS);
   spinbutton_standard->set_numeric(false);
   spinbutton_standard->set_digits(0);
   spinbutton_standard->set_wrap(false);
   spinbutton_grund->set_flags(Gtk::CAN_FOCUS);
   spinbutton_grund->set_update_policy(Gtk::UPDATE_ALWAYS);
   spinbutton_grund->set_numeric(false);
   spinbutton_grund->set_digits(0);
   spinbutton_grund->set_wrap(false);
   table173->set_row_spacings(0);
   table173->set_col_spacings(3);
   table173->attach(*label627, 4, 6, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table173->attach(*label625, 0, 2, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table173->attach(*label626, 2, 4, 0, 1, Gtk::SHRINK|Gtk::FILL, Gtk::SHRINK|Gtk::FILL, 0, 0);
   table173->attach(*spinbutton_ausnahme, 4, 5, 1, 2, Gtk::SHRINK|Gtk::FILL, Gtk::SHRINK, 0, 0);
   table173->attach(*spinbutton_standard, 2, 3, 1, 2, Gtk::SHRINK|Gtk::FILL, Gtk::SHRINK, 0, 0);
   table173->attach(*spinbutton_grund, 0, 1, 1, 2, Gtk::SHRINK|Gtk::FILL, Gtk::SHRINK, 0, 0);
   label685->set_alignment(0.5,0.5);
   label685->set_padding(0,0);
   label685->set_justify(Gtk::JUSTIFY_LEFT);
   label685->set_line_wrap(false);
   label685->set_use_markup(false);
   frame_verteilung_auf->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame_verteilung_auf->set_label_align(0,0.5);
   frame_verteilung_auf->add(*table173);
   frame_verteilung_auf->set_label_widget(*label685);
   scrolledwindow_prototyp->set_shadow_type(Gtk::SHADOW_NONE);
   scrolledwindow_prototyp->set_policy(Gtk::POLICY_AUTOMATIC, Gtk::POLICY_AUTOMATIC);
   scrolledwindow_prototyp->property_window_placement().set_value(Gtk::CORNER_TOP_LEFT);
   scrolledwindow_prototyp->add(*tree_prototyp);
   label686->set_alignment(0.5,0.5);
   label686->set_padding(0,0);
   label686->set_justify(Gtk::JUSTIFY_LEFT);
   label686->set_line_wrap(false);
   label686->set_use_markup(false);
   frame_spezialist_typen->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame_spezialist_typen->set_label_align(0,0.5);
   frame_spezialist_typen->add(*scrolledwindow_prototyp);
   frame_spezialist_typen->set_label_widget(*label686);
   table176->set_row_spacings(0);
   table176->set_col_spacings(0);
   table176->attach(*frame116, 0, 1, 0, 2, Gtk::EXPAND|Gtk::FILL, Gtk::EXPAND|Gtk::FILL, 0, 0);
   table176->attach(*frame_verteilung_auf, 1, 2, 0, 1, Gtk::EXPAND|Gtk::FILL, Gtk::FILL, 0, 0);
   table176->attach(*frame_spezialist_typen, 1, 2, 1, 2, Gtk::FILL, Gtk::FILL, 0, 0);
   eventbox23->add(*table176);
   spinbutton_zauberwerk->set_flags(Gtk::CAN_FOCUS);
   spinbutton_zauberwerk->set_update_policy(Gtk::UPDATE_ALWAYS);
   spinbutton_zauberwerk->set_numeric(false);
   spinbutton_zauberwerk->set_digits(0);
   spinbutton_zauberwerk->set_wrap(false);
   label612->set_alignment(0,0.5);
   label612->set_padding(0,0);
   label612->set_justify(Gtk::JUSTIFY_LEFT);
   label612->set_line_wrap(false);
   label612->set_use_markup(false);
   label613->set_alignment(0,0.5);
   label613->set_padding(0,0);
   label613->set_justify(Gtk::JUSTIFY_CENTER);
   label613->set_line_wrap(false);
   label613->set_use_markup(false);
   label614->set_alignment(0,0.5);
   label614->set_padding(0,0);
   label614->set_justify(Gtk::JUSTIFY_CENTER);
   label614->set_line_wrap(false);
   label614->set_use_markup(false);
   label615->set_alignment(0,0.5);
   label615->set_padding(0,0);
   label615->set_justify(Gtk::JUSTIFY_CENTER);
   label615->set_line_wrap(false);
   label615->set_use_markup(false);
   label616->set_alignment(0,0);
   label616->set_padding(0,0);
   label616->set_justify(Gtk::JUSTIFY_LEFT);
   label616->set_line_wrap(false);
   label616->set_use_markup(false);
   label617->set_alignment(0,0.5);
   label617->set_padding(0,0);
   label617->set_justify(Gtk::JUSTIFY_CENTER);
   label617->set_line_wrap(false);
   label617->set_use_markup(false);
   label618->set_alignment(0,0.5);
   label618->set_padding(0,0);
   label618->set_justify(Gtk::JUSTIFY_CENTER);
   label618->set_line_wrap(false);
   label618->set_use_markup(false);
   button_check100->set_flags(Gtk::CAN_FOCUS);
   button_check100->set_relief(Gtk::RELIEF_NORMAL);
   label610->set_alignment(0.999999,0.5);
   label610->set_padding(0,0);
   label610->set_justify(Gtk::JUSTIFY_CENTER);
   label610->set_line_wrap(false);
   label610->set_use_markup(false);
   label609->set_alignment(1,0.5);
   label609->set_padding(0,0);
   label609->set_justify(Gtk::JUSTIFY_CENTER);
   label609->set_line_wrap(false);
   label609->set_use_markup(false);
   spinbutton_fertigkeit->set_flags(Gtk::CAN_FOCUS);
   spinbutton_fertigkeit->set_update_policy(Gtk::UPDATE_ALWAYS);
   spinbutton_fertigkeit->set_numeric(false);
   spinbutton_fertigkeit->set_digits(0);
   spinbutton_fertigkeit->set_wrap(false);
   spinbutton_waffen->set_flags(Gtk::CAN_FOCUS);
   spinbutton_waffen->set_update_policy(Gtk::UPDATE_ALWAYS);
   spinbutton_waffen->set_numeric(false);
   spinbutton_waffen->set_digits(0);
   spinbutton_waffen->set_wrap(false);
   spinbutton_waffen_grund->set_flags(Gtk::CAN_FOCUS);
   spinbutton_waffen_grund->set_update_policy(Gtk::UPDATE_ALWAYS);
   spinbutton_waffen_grund->set_numeric(false);
   spinbutton_waffen_grund->set_digits(0);
   spinbutton_waffen_grund->set_wrap(false);
   spinbutton_zauber->set_flags(Gtk::CAN_FOCUS);
   spinbutton_zauber->set_update_policy(Gtk::UPDATE_ALWAYS);
   spinbutton_zauber->set_numeric(false);
   spinbutton_zauber->set_digits(0);
   spinbutton_zauber->set_wrap(false);
   spinbutton_sprachen->set_flags(Gtk::CAN_FOCUS);
   spinbutton_sprachen->set_update_policy(Gtk::UPDATE_ALWAYS);
   spinbutton_sprachen->set_numeric(false);
   spinbutton_sprachen->set_digits(0);
   spinbutton_sprachen->set_wrap(false);
   spinbutton_schriften->set_flags(Gtk::CAN_FOCUS);
   spinbutton_schriften->set_update_policy(Gtk::UPDATE_ALWAYS);
   spinbutton_schriften->set_numeric(false);
   spinbutton_schriften->set_digits(0);
   spinbutton_schriften->set_wrap(false);
   table172->set_row_spacings(0);
   table172->set_col_spacings(0);
   table172->attach(*spinbutton_zauberwerk, 5, 6, 1, 2, Gtk::EXPAND|Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table172->attach(*label612, 1, 2, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table172->attach(*label613, 2, 3, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table172->attach(*label614, 3, 4, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table172->attach(*label615, 4, 5, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table172->attach(*label616, 5, 6, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table172->attach(*label617, 6, 7, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table172->attach(*label618, 7, 8, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table172->attach(*button_check100, 0, 1, 0, 2, Gtk::SHRINK|Gtk::FILL, Gtk::SHRINK, 0, 0);
   table172->attach(*label610, 0, 1, 2, 3, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table172->attach(*label609, 0, 1, 4, 5, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table172->attach(*scale_fert, 1, 2, 2, 5, Gtk::FILL, Gtk::FILL, 0, 0);
   table172->attach(*scale_waffen, 2, 3, 2, 5, Gtk::FILL, Gtk::FILL, 0, 0);
   table172->attach(*scale_sprachen, 6, 7, 2, 5, Gtk::FILL, Gtk::FILL, 0, 0);
   table172->attach(*scale_schriften, 7, 8, 2, 5, Gtk::FILL, Gtk::FILL, 0, 0);
   table172->attach(*hseparator21, 0, 8, 5, 6, Gtk::SHRINK|Gtk::FILL, Gtk::SHRINK|Gtk::FILL, 0, 0);
   table172->attach(*spinbutton_fertigkeit, 1, 2, 1, 2, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, Gtk::SHRINK, 0, 0);
   table172->attach(*spinbutton_waffen, 2, 3, 1, 2, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, Gtk::SHRINK, 0, 0);
   table172->attach(*spinbutton_waffen_grund, 3, 4, 1, 2, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, Gtk::SHRINK, 0, 0);
   table172->attach(*spinbutton_zauber, 4, 5, 1, 2, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, Gtk::SHRINK, 0, 0);
   table172->attach(*spinbutton_sprachen, 6, 7, 1, 2, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, Gtk::SHRINK, 0, 0);
   table172->attach(*spinbutton_schriften, 7, 8, 1, 2, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, Gtk::SHRINK, 0, 0);
   _tooltips.set_tip(*eventbox21, "Verteilung der GFP auf unterschiedliche Bereiche. Ein 'Spezialist' steigert seine bereits gelernten Fertigkeiten, ein 'Gebildeter' lernt bevorzugt neue Fertigkeiten.", "");
   eventbox21->add(*table172);
   table175->set_row_spacings(0);
   table175->set_col_spacings(0);
   table175->attach(*eventbox23, 0, 1, 1, 2, Gtk::SHRINK, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, 0, 0);
   table175->attach(*eventbox21, 0, 1, 0, 1, Gtk::EXPAND|Gtk::SHRINK, Gtk::SHRINK|Gtk::FILL, 0, 0);
   frame_prototyp_mod->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame_prototyp_mod->set_label_align(0,0.5);
   frame_prototyp_mod->add(*table175);
   radiobutton_steigern_gfp->set_flags(Gtk::CAN_FOCUS);
   radiobutton_steigern_gfp->set_relief(Gtk::RELIEF_NORMAL);
   radiobutton_steigern_gfp->set_mode(true);
   radiobutton_steigern_gfp->set_active(false);
   spinbutton_grad->set_flags(Gtk::CAN_FOCUS);
   spinbutton_grad->set_update_policy(Gtk::UPDATE_ALWAYS);
   spinbutton_grad->set_numeric(false);
   spinbutton_grad->set_digits(0);
   spinbutton_grad->set_wrap(false);
   spinbutton_gfp->set_sensitive(false);
   spinbutton_gfp->set_flags(Gtk::CAN_FOCUS);
   spinbutton_gfp->set_update_policy(Gtk::UPDATE_ALWAYS);
   spinbutton_gfp->set_numeric(false);
   spinbutton_gfp->set_digits(0);
   spinbutton_gfp->set_wrap(false);
   radiobutton_steigern_grad->set_flags(Gtk::CAN_FOCUS);
   radiobutton_steigern_grad->set_relief(Gtk::RELIEF_NORMAL);
   radiobutton_steigern_grad->set_mode(true);
   radiobutton_steigern_grad->set_active(true);
   table169->set_row_spacings(0);
   table169->set_col_spacings(0);
   table169->attach(*radiobutton_steigern_gfp, 0, 1, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table169->attach(*spinbutton_grad, 1, 2, 1, 2, Gtk::AttachOptions(), Gtk::AttachOptions(), 0, 0);
   table169->attach(*spinbutton_gfp, 1, 2, 0, 1, Gtk::EXPAND|Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table169->attach(*radiobutton_steigern_grad, 0, 1, 1, 2, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   _tooltips.set_tip(*eventbox22, "'GFP': Vorgabe wieviel fÃ¼r GFP der Abenteurer lernen soll. 'Grad': Vorgabe in welchem Grad sich der Abenteurer nach dem Steigern befinden soll.", "");
   eventbox22->add(*table169);
   frame113->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame113->set_label_align(0,0.5);
   frame113->add(*eventbox22);
   combo_prototyp->get_entry()->set_flags(Gtk::CAN_FOCUS);
   combo_prototyp->get_entry()->set_editable(true);
   combo_prototyp->get_entry()->set_max_length(0);
   combo_prototyp->get_entry()->set_text("");
   combo_prototyp->set_case_sensitive(false);
   {  
      
      const char * const items[] = { "", 0 };
      combo_prototyp->set_popdown_strings(items);
   }
   combo_prototyp->get_entry()->set_text("");
   pixmap174->set_alignment(0.5,0.5);
   pixmap174->set_padding(0,0);
   label622->set_alignment(0.5,0.5);
   label622->set_padding(0,0);
   label622->set_justify(Gtk::JUSTIFY_CENTER);
   label622->set_line_wrap(false);
   label622->set_use_markup(false);
   hbox95->pack_start(*pixmap174, Gtk::PACK_SHRINK, 0);
   hbox95->pack_start(*label622, Gtk::PACK_SHRINK, 0);
   togglebutton_prototyp->set_flags(Gtk::CAN_FOCUS);
   togglebutton_prototyp->set_relief(Gtk::RELIEF_NORMAL);
   togglebutton_prototyp->set_active(false);
   togglebutton_prototyp->add(*hbox95);
   hbox91->pack_start(*combo_prototyp);
   hbox91->pack_start(*togglebutton_prototyp, Gtk::PACK_SHRINK, 0);
   label687->set_alignment(0.5,0.5);
   label687->set_padding(0,0);
   label687->set_justify(Gtk::JUSTIFY_LEFT);
   label687->set_line_wrap(false);
   label687->set_use_markup(false);
   frame112->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame112->set_label_align(0,0.5);
   frame112->add(*hbox91);
   frame112->set_label_widget(*label687);
   table165->set_row_spacings(0);
   table165->set_col_spacings(0);
   table165->attach(*button_steigern, 0, 1, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table165->attach(*frame_prototyp_mod, 0, 3, 2, 3, Gtk::SHRINK|Gtk::FILL, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, 0, 0);
   table165->attach(*frame113, 2, 3, 0, 2, Gtk::SHRINK, Gtk::SHRINK|Gtk::FILL, 0, 0);
   table165->attach(*frame112, 1, 2, 0, 2, Gtk::SHRINK, Gtk::SHRINK|Gtk::FILL, 0, 0);
   label684->set_alignment(0.5,0.5);
   label684->set_padding(0,0);
   label684->set_justify(Gtk::JUSTIFY_LEFT);
   label684->set_line_wrap(false);
   label684->set_use_markup(false);
   frame111->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame111->set_label_align(0,0.5);
   frame111->add(*table165);
   frame111->set_label_widget(*label684);
   table_zufall->set_row_spacings(0);
   table_zufall->set_col_spacings(0);
   table_zufall->attach(*frame110, 0, 1, 0, 1, Gtk::SHRINK, Gtk::SHRINK|Gtk::FILL, 0, 0);
   table_zufall->attach(*frame111, 1, 2, 0, 1, Gtk::SHRINK, Gtk::SHRINK|Gtk::FILL, 0, 0);
   checkbutton_spezies->show();
   checkbutton_herkunft->show();
   checkbutton_typ->show();
   checkbutton_ange_fert->show();
   combo_spezies->show();
   combo_typ->show();
   combo_herkunft->show();
   checkbutton_werte->show();
   checkbutton_st->show();
   checkbutton_gs->show();
   checkbutton_gw->show();
   checkbutton_ko->show();
   checkbutton_in->show();
   checkbutton_zt->show();
   checkbutton_au->show();
   checkbutton_pa->show();
   checkbutton_wk->show();
   checkbutton_sb->show();
   checkbutton_b->show();
   spinbutton_st->show();
   spinbutton_au->show();
   spinbutton_pa->show();
   spinbutton_wk->show();
   spinbutton_sb->show();
   spinbutton_b->show();
   spinbutton_gs->show();
   spinbutton_gw->show();
   spinbutton_ko->show();
   spinbutton_in->show();
   spinbutton_zt->show();
   table168->show();
   frame_werte_vorgaben->show();
   table166->show();
   label683->show();
   frame_vorgaben->show();
   pixmap172->show();
   label620->show();
   hbox93->show();
   togglebutton_vorgaben->show();
   pixmap171->show();
   label619->show();
   hbox92->show();
   button_zufall_voll->show();
   table170->show();
   label682->show();
   frame110->show();
   pixmap173->show();
   label621->show();
   hbox94->show();
   button_steigern->show();
   radiobutton_proto_verteilen->show();
   radiobutton_proto_spezialisieren->show();
   table174->show();
   frame116->show();
   label627->show();
   label625->show();
   label626->show();
   spinbutton_ausnahme->show();
   spinbutton_standard->show();
   spinbutton_grund->show();
   table173->show();
   label685->show();
   frame_verteilung_auf->show();
   tree_prototyp->show();
   scrolledwindow_prototyp->show();
   label686->show();
   frame_spezialist_typen->show();
   table176->show();
   eventbox23->show();
   spinbutton_zauberwerk->show();
   label612->show();
   label613->show();
   label614->show();
   label615->show();
   label616->show();
   label617->show();
   label618->show();
   button_check100->show();
   label610->show();
   label609->show();
   scale_fert->show();
   scale_waffen->show();
   scale_sprachen->show();
   scale_schriften->show();
   hseparator21->show();
   spinbutton_fertigkeit->show();
   spinbutton_waffen->show();
   spinbutton_waffen_grund->show();
   spinbutton_zauber->show();
   spinbutton_sprachen->show();
   spinbutton_schriften->show();
   table172->show();
   eventbox21->show();
   table175->show();
   frame_prototyp_mod->show();
   radiobutton_steigern_gfp->show();
   spinbutton_grad->show();
   spinbutton_gfp->show();
   radiobutton_steigern_grad->show();
   table169->show();
   eventbox22->show();
   frame113->show();
   combo_prototyp->show();
   pixmap174->show();
   label622->show();
   hbox95->show();
   togglebutton_prototyp->show();
   hbox91->show();
   label687->show();
   frame112->show();
   table165->show();
   label684->show();
   frame111->show();
   table_zufall->show();
   checkbutton_spezies->signal_toggled().connect(SigC::slot(*this, &table_zufall_glade::on_checkbutton_spezies_toggled));
   checkbutton_herkunft->signal_toggled().connect(SigC::slot(*this, &table_zufall_glade::on_checkbutton_herkunft_toggled));
   checkbutton_typ->signal_toggled().connect(SigC::slot(*this, &table_zufall_glade::on_checkbutton_typ_toggled));
   combo_spezies->get_entry()->signal_activate().connect(SigC::slot(*this, &table_zufall_glade::on_combo_spezies_activate));
   combo_spezies->get_entry()->signal_focus_out_event().connect(SigC::slot(*this, &table_zufall_glade::on_combo_spezies_focus_out_event));
   combo_spezies->get_entry()->signal_changed().connect(SigC::slot(*this, &table_zufall_glade::on_combo_spezies_changed));
   combo_typ->get_entry()->signal_activate().connect(SigC::slot(*this, &table_zufall_glade::on_combo_typ_activate));
   combo_typ->get_entry()->signal_focus_out_event().connect(SigC::slot(*this, &table_zufall_glade::on_combo_typ__focus_out_event));
   combo_typ->get_entry()->signal_changed().connect(SigC::slot(*this, &table_zufall_glade::on_combo_typ__changed));
   combo_herkunft->get_entry()->signal_activate().connect(SigC::slot(*this, &table_zufall_glade::on_combo_typ_activate));
   combo_herkunft->get_entry()->signal_focus_out_event().connect(SigC::slot(*this, &table_zufall_glade::on_combo_typ__focus_out_event));
   combo_herkunft->get_entry()->signal_changed().connect(SigC::slot(*this, &table_zufall_glade::on_combo_typ__changed));
   checkbutton_werte->signal_toggled().connect(SigC::slot(*this, &table_zufall_glade::on_checkbutton_werte_toggled));
   checkbutton_st->signal_toggled().connect(SigC::slot(*this, &table_zufall_glade::on_checkbutton_st_toggled));
   checkbutton_gs->signal_toggled().connect(SigC::slot(*this, &table_zufall_glade::on_checkbutton_gs_toggled));
   checkbutton_gw->signal_toggled().connect(SigC::slot(*this, &table_zufall_glade::on_checkbutton_gw_toggled));
   checkbutton_ko->signal_toggled().connect(SigC::slot(*this, &table_zufall_glade::on_checkbutton_ko_toggled));
   checkbutton_in->signal_toggled().connect(SigC::slot(*this, &table_zufall_glade::on_checkbutton_in_toggled));
   checkbutton_zt->signal_toggled().connect(SigC::slot(*this, &table_zufall_glade::on_checkbutton_zt_toggled));
   checkbutton_au->signal_toggled().connect(SigC::slot(*this, &table_zufall_glade::on_checkbutton_au_toggled));
   checkbutton_pa->signal_toggled().connect(SigC::slot(*this, &table_zufall_glade::on_checkbutton_pa_toggled));
   checkbutton_wk->signal_toggled().connect(SigC::slot(*this, &table_zufall_glade::on_checkbutton_wk_toggled));
   checkbutton_sb->signal_toggled().connect(SigC::slot(*this, &table_zufall_glade::on_checkbutton_sb_toggled));
   checkbutton_b->signal_toggled().connect(SigC::slot(*this, &table_zufall_glade::on_checkbutton_b_toggled));
   togglebutton_vorgaben->signal_toggled().connect(SigC::slot(*this, &table_zufall_glade::on_togglebutton_vorgaben_toggled));
   button_zufall_voll->signal_clicked().connect(SigC::slot(*this, &table_zufall_glade::on_button_zufall_voll_clicked));
   button_steigern->signal_clicked().connect(SigC::slot(*this, &table_zufall_glade::on_button_steigern_clicked));
   radiobutton_proto_verteilen->signal_toggled().connect(SigC::slot(*this, &table_zufall_glade::on_radiobutton_proto_verteilen_toggled));
   radiobutton_proto_spezialisieren->signal_toggled().connect(SigC::slot(*this, &table_zufall_glade::on_radiobutton_proto_spezialisieren_toggled));
   spinbutton_ausnahme->signal_activate().connect(SigC::slot(*this, &table_zufall_glade::on_spinbutton_ausnahme_activate));
   spinbutton_standard->signal_activate().connect(SigC::slot(*this, &table_zufall_glade::on_spinbutton_standard_activate));
   spinbutton_grund->signal_activate().connect(SigC::slot(*this, &table_zufall_glade::on_spinbutton_grund_activate));
   tree_prototyp->signal_leaf_selected().connect(SigC::slot(*this, &table_zufall_glade::on_tree_prototyp_leaf_selected));
   spinbutton_zauberwerk->signal_activate().connect(SigC::slot(*this, &table_zufall_glade::on_spinbutton_zauberwerk_activate));
   button_check100->signal_clicked().connect(SigC::slot(*this, &table_zufall_glade::on_button_check100_clicked));
   scale_fert->signal_activate().connect(SigC::slot(*this, &table_zufall_glade::on_scale_fert_activate));
   scale_waffen->signal_activate().connect(SigC::slot(*this, &table_zufall_glade::on_scale_waffen_activate));
   scale_sprachen->signal_activate().connect(SigC::slot(*this, &table_zufall_glade::on_scale_sprachen_activate));
   scale_schriften->signal_activate().connect(SigC::slot(*this, &table_zufall_glade::on_scale_schriften_activate));
   spinbutton_fertigkeit->signal_activate().connect(SigC::slot(*this, &table_zufall_glade::on_spinbutton_fertigkeit_activate));
   spinbutton_waffen->signal_activate().connect(SigC::slot(*this, &table_zufall_glade::on_spinbutton_waffen_activate));
   spinbutton_waffen_grund->signal_activate().connect(SigC::slot(*this, &table_zufall_glade::on_spinbutton_waffen_grund_activate));
   spinbutton_zauber->signal_activate().connect(SigC::slot(*this, &table_zufall_glade::on_spinbutton_zauber_activate));
   spinbutton_sprachen->signal_activate().connect(SigC::slot(*this, &table_zufall_glade::on_spinbutton_sprachen_activate));
   spinbutton_schriften->signal_activate().connect(SigC::slot(*this, &table_zufall_glade::on_spinbutton_schriften_activate));
   radiobutton_steigern_gfp->signal_toggled().connect(SigC::slot(*this, &table_zufall_glade::on_radiobutton_steigern_gfp_toggled));
   radiobutton_steigern_grad->signal_toggled().connect(SigC::slot(*this, &table_zufall_glade::on_radiobutton_steigern_grad_toggled));
   combo_prototyp->get_entry()->signal_activate().connect(SigC::slot(*this, &table_zufall_glade::on_combo_prototyp_activate));
   combo_prototyp->get_entry()->signal_focus_out_event().connect(SigC::slot(*this, &table_zufall_glade::on_combo_prototyp_focus_out_event));
   combo_prototyp->get_entry()->signal_changed().connect(SigC::slot(*this, &table_zufall_glade::on_combo_prototyp_changed));
   togglebutton_prototyp->signal_toggled().connect(SigC::slot(*this, &table_zufall_glade::on_togglebutton_prototyp_toggled));
}

table_zufall_glade::~table_zufall_glade()
{  delete tree_prototyp;
   delete scale_fert;
   delete scale_waffen;
   delete scale_sprachen;
   delete scale_schriften;
}
