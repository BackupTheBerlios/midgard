// generated 2002/10/31 9:30:30 CET by thoma@Tiger.(none)
// using glademm V1.1.2a_cvs
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- /home/thoma/rollenspiel/midgard/programme/gcc_3.0/midgard/midgard.glade
// for gtk 1.2.10 and gtkmm 1.2.10
//
// Please modify the corresponding derived classes in ./src/table_grundwerte.hh and./src/table_grundwerte.cc

#ifndef _TABLE_GRUNDWERTE_GLADE_HH
#  define _TABLE_GRUNDWERTE_GLADE_HH


#if !defined(GLADEMM_DATA)
#define GLADEMM_DATA 
#include <gtk--/accelgroup.h>

class GlademmData
{  
        
        Gtk::AccelGroup *accgrp;
public:
        
        GlademmData(Gtk::AccelGroup *ag) : accgrp(ag)
        {  
        }
        
        Gtk::AccelGroup * getAccelGroup()
        {  return accgrp;
        }
};
#endif //GLADEMM_DATA

#include <gtk--/table.h>
#include <gtk--/tooltips.h>
#include <gtk--/label.h>
#include <gtk--/button.h>
#include <gtk--/spinbutton.h>
#include <gtk--/pixmap.h>
#include <gtk--/entry.h>
#include <gtk--/combo.h>
#include <gtk--/radiobutton.h>
#include <gtk--/box.h>
#include <gtk--/togglebutton.h>
#include <gtk--/frame.h>

class table_grundwerte_glade : public Gtk::Table
{  
protected:
        
        Gtk::Tooltips _tooltips;
        class Gtk::Table *table_grundwerte;
        class Gtk::Label *resistenz;
        class Gtk::Label *gift_wert;
        class Gtk::Label *abwehr_wert;
        class Gtk::Label *zaubern_wert;
        class Gtk::Button *button_grda1setzen;
        class Gtk::Label *bo_sc;
        class Gtk::Label *bo_an;
        class Gtk::Label *bo_ab;
        class Gtk::Label *bo_za;
        class Gtk::Label *bo_au;
        class Gtk::Label *bo_psy;
        class Gtk::Label *bo_phs;
        class Gtk::Label *bo_phk;
        class Gtk::Label *label_gestalt;
        class Gtk::Label *kaw;
        class Gtk::Label *wlw;
        class Gtk::SpinButton *spinbutton_b;
        class Gtk::SpinButton *spinbutton_au;
        class Gtk::SpinButton *spinbutton_pa;
        class Gtk::SpinButton *spinbutton_sb;
        class Gtk::SpinButton *spinbutton_wk;
        class Gtk::SpinButton *spinbutton_st;
        class Gtk::SpinButton *spinbutton_gs;
        class Gtk::SpinButton *spinbutton_gw;
        class Gtk::SpinButton *spinbutton_ko;
        class Gtk::SpinButton *spinbutton_in;
        class Gtk::SpinButton *spinbutton_zt;
        class Gtk::Label *label_hoeren;
        class Gtk::Label *label_schmecken;
        class Gtk::Label *label_tasten;
        class Gtk::Label *label_sehen;
        class Gtk::Label *label_riechen;
        class Gtk::Label *label_sechster_sinn;
        class Gtk::Pixmap *pixmap_dfr4;
        class Gtk::Entry *entry_nameC;
        class Gtk::SpinButton *spinbutton_ap;
        class Gtk::SpinButton *spinbutton_lp;
        class Gtk::SpinButton *spinbutton_grad;
        class Gtk::SpinButton *spinbutton_alter;
        class Gtk::SpinButton *spinbutton_Cgewicht;
        class Gtk::SpinButton *spinbutton_groesse;
        class Gtk::Entry *entry_nameS;
        class Gtk::Entry *entry_version;
        class Gtk::Entry *entry_herkunft;
        class Gtk::Combo *combo_stand;
        class Gtk::Entry *entry_glaube;
        class Gtk::Entry *entry_spezialisierung;
        class Gtk::SpinButton *spinbutton_tage;
        class Gtk::SpinButton *spinbutton_gg;
        class Gtk::SpinButton *spinbutton_sg;
        class Gtk::SpinButton *spinbutton_gfp;
        class Gtk::Combo *combo_hand;
        class Gtk::Entry *entry_bezeichnung;
        class Gtk::Entry *entry_merkmale;
        class Gtk::Combo *combo_spezies;
        class Gtk::RadioButton *radiobutton_eigenschaften_standard;
        class Gtk::RadioButton *radiobutton_eigenschaften_zuweisen;
        class Gtk::RadioButton *radiobutton_eigenschaften_69;
        class Gtk::VBox *vbox_gw_wuerfeln;
        class Gtk::RadioButton *radiobutton_mann;
        class Gtk::RadioButton *radiobutton_frau;
        class Gtk::Combo *combo_typ;
        class Gtk::Combo *combo_typ2;
        class Gtk::RadioButton *radiobutton_stadt;
        class Gtk::RadioButton *radiobutton_land;
        class Gtk::Button *button_grundwerte;
        class Gtk::Button *button_abg_werte;
        class Gtk::ToggleButton *togglebutton_edit_werte;
        class Gtk::Frame *frame_wuerfelvariante;
        
        table_grundwerte_glade(GlademmData *_data);
        
        ~table_grundwerte_glade();
private:
        virtual void on_button_grda1setzen_clicked() = 0;
        virtual void on_spinbutton_b_activate() = 0;
        virtual gint on_spinbutton_b_focus_out_event(GdkEventFocus *ev) = 0;
        virtual gint on_spinbutton_b_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_spinbutton_au_activate() = 0;
        virtual gint on_spinbutton_au_focus_out_event(GdkEventFocus *ev) = 0;
        virtual gint on_spinbutton_au_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_spinbutton_pa_activate() = 0;
        virtual gint on_spinbutton_pa_focus_out_event(GdkEventFocus *ev) = 0;
        virtual gint on_spinbutton_pa_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_spinbutton_sb_activate() = 0;
        virtual gint on_spinbutton_sb_focus_out_event(GdkEventFocus *ev) = 0;
        virtual gint on_spinbutton_sb_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_spinbutton_wk_activate() = 0;
        virtual gint on_spinbutton_wk_focus_out_event(GdkEventFocus *ev) = 0;
        virtual gint on_spinbutton_wk_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_spinbutton_st_activate() = 0;
        virtual gint on_spinbutton_st_focus_out_event(GdkEventFocus *ev) = 0;
        virtual gint on_spinbutton_st_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_spinbutton_gs_activate() = 0;
        virtual gint on_spinbutton_gs_focus_out_event(GdkEventFocus *ev) = 0;
        virtual gint on_spinbutton_gs_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_spinbutton_gw_activate() = 0;
        virtual gint on_spinbutton_gw_focus_out_event(GdkEventFocus *ev) = 0;
        virtual gint on_spinbutton_gw_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_spinbutton_ko_activate() = 0;
        virtual gint on_spinbutton_ko_focus_out_event(GdkEventFocus *ev) = 0;
        virtual gint on_spinbutton_ko_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_spinbutton_in_activate() = 0;
        virtual gint on_spinbutton_in_focus_out_event(GdkEventFocus *ev) = 0;
        virtual gint on_spinbutton_in_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_spinbutton_zt_activate() = 0;
        virtual gint on_spinbutton_zt_focus_out_event(GdkEventFocus *ev) = 0;
        virtual gint on_spinbutton_zt_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_entry_nameC_activate() = 0;
        virtual gint on_entry_nameC_focus_out_event(GdkEventFocus *ev) = 0;
        virtual gint on_entry_nameC_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_spinbutton_ap_activate() = 0;
        virtual gint on_spinbutton_ap_focus_out_event(GdkEventFocus *ev) = 0;
        virtual gint on_spinbutton_ap_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_spinbutton_lp_activate() = 0;
        virtual gint on_spinbutton_lp_focus_out_event(GdkEventFocus *ev) = 0;
        virtual gint on_spinbutton_lp_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_spinbutton_grad_activate() = 0;
        virtual gint on_spinbutton_grad_focus_out_event(GdkEventFocus *ev) = 0;
        virtual gint on_spinbutton_grad_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_spinbutton_alter_activate() = 0;
        virtual gint on_spinbutton_alter_focus_out_event(GdkEventFocus *ev) = 0;
        virtual gint on_spinbutton_alter_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_spinbutton_Cgewicht_activate() = 0;
        virtual gint on_spinbutton_Cgewicht_focus_out_event(GdkEventFocus *ev) = 0;
        virtual gint on_spinbutton_Cgewicht_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_spinbutton_groesse_activate() = 0;
        virtual gint on_spinbutton_groesse_focus_out_event(GdkEventFocus *ev) = 0;
        virtual gint on_spinbutton_groesse_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_entry_nameS_activate() = 0;
        virtual gint on_entry_nameS_focus_out_event(GdkEventFocus *ev) = 0;
        virtual gint on_entry_nameS_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_entry_version_activate() = 0;
        virtual gint on_entry_version_focus_out_event(GdkEventFocus *ev) = 0;
        virtual gint on_entry_version_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_entry_herkunft_activate() = 0;
        virtual gint on_entry_herkunft_focus_out_event(GdkEventFocus *ev) = 0;
        virtual gint on_entry_herkunft_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_combo_stand_activate() = 0;
        virtual gint on_combo_stand_focus_out_event(GdkEventFocus *ev) = 0;
        virtual void on_entry_glaube_activate() = 0;
        virtual gint on_entry_glaube_focus_out_event(GdkEventFocus *ev) = 0;
        virtual gint on_entry_glaube_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_entry_spezialisierung_activate() = 0;
        virtual gint on_entry_spezialisierung_focus_out_event(GdkEventFocus *ev) = 0;
        virtual gint on_entry_spezialisierung_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_spinbutton_tage_activate() = 0;
        virtual gint on_spinbutton_tage_focus_out_event(GdkEventFocus *ev) = 0;
        virtual gint on_spinbutton_tage_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_spinbutton_gg_activate() = 0;
        virtual gint on_spinbutton_gg_focus_out_event(GdkEventFocus *ev) = 0;
        virtual gint on_spinbutton_gg_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_spinbutton_sg_activate() = 0;
        virtual gint on_spinbutton_sg_focus_out_event(GdkEventFocus *ev) = 0;
        virtual gint on_spinbutton_sg_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_spinbutton_gfp_activate() = 0;
        virtual gint on_spinbutton_gfp_focus_out_event(GdkEventFocus *ev) = 0;
        virtual gint on_spinbutton_gfp_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_combo_hand_activate() = 0;
        virtual gint on_combo_hand_focus_out_event(GdkEventFocus *ev) = 0;
        virtual void on_entry_bezeichnung_activate() = 0;
        virtual gint on_entry_bezeichnung_focus_out_event(GdkEventFocus *ev) = 0;
        virtual gint on_entry_bezeichnung_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_entry_merkmale_activate() = 0;
        virtual gint on_entry_merkmale_focus_out_event(GdkEventFocus *ev) = 0;
        virtual gint on_entry_merkmale_focus_in_event(GdkEventFocus *ev) = 0;
        virtual void on_combo_spezies_activate() = 0;
        virtual gint on_combo_spezies_focus_out_event(GdkEventFocus *ev) = 0;
        virtual void on_combo_spezies_changed() = 0;
        virtual gint on_button_grundwerte_button_release_event(GdkEventButton *ev) = 0;
        virtual void on_radiobutton_mann_toggled() = 0;
        virtual void on_radiobutton_frau_toggled() = 0;
        virtual void on_combo_typ_activate() = 0;
        virtual gint on_combo_typ__focus_out_event(GdkEventFocus *ev) = 0;
        virtual void on_combo_typ__changed() = 0;
        virtual void on_combo_typ2_activate() = 0;
        virtual gint on_combo_typ2_focus_out_event(GdkEventFocus *ev) = 0;
        virtual void on_combo_typ2__changed() = 0;
        virtual void on_radiobutton_stadt_land_toggled() = 0;
        virtual void on_abge_werte_setzen_clicked() = 0;
        virtual void on_togglebutton_edit_werte_toggled() = 0;
};
#endif
