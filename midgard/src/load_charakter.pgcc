/*  Midgard Character Generator
 *  Copyright (C) 2001 Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include "midgard_CG.hh"
exec sql include sqlca;
#include <cstring>
#include <Aux/Transaction.h>
#include <Aux/SQLerror.h>
#include "Window_charakter_auswahl.hh"
#include "xml_fileselection.hh"
#include <Sprache.hh>
#include <Schrift.hh>
 
gint midgard_CG::on_laden_release_event(GdkEventButton *ev)
{
  if (ev->button==1) on_laden_clicked();
//  if (ev->button==3) xml_import_auswahl();
  return false;
}

void midgard_CG::xml_import_auswahl()
{
  manage (new xml_fileselection(this,"load"));
}
 
void midgard_CG::xml_import(const std::string& datei)
{
  std::string command = "midgard_xmlimport < '"+datei+"'";
  system(command.c_str());
  std::string strinfo = "Charakter aus Datei "+datei+" importiert\n";
  manage (new WindowInfo(strinfo));
  on_laden_clicked();  
}


void midgard_CG::on_laden_clicked()
{
 on_neuer_charakter_clicked();
 manage (new Window_charakter_auswahl(this));
}

void midgard_CG::select_charakter(const std::string& name, const std::string& version)
{
  Werte.set_Namen(name,"",version);
  midgard_CG::load_charakter();
  button_abg_werte->set_sensitive(true);
  button_herkunft->set_sensitive(true);
//  button_sprache->set_sensitive(true);
  button_beschreibung->set_sensitive(true);
  frame_steigern->set_sensitive(true);
  on_radio_steigern_all();
  frame_lernschema->set_sensitive(true);
}


void midgard_CG::load_charakter()
{
   // Werte
   exec sql begin declare section;
      char *db_beschreibung=0;
      char db_typ_s[5]     ;
      char db_typ_2_s[5]     ;
      int db_st,db_gw,db_gs,db_ko,db_in,db_zt,db_au,db_pa,db_sb,db_wk,
          db_b,db_lp,db_ap,db_abwehr,db_zaubern,db_resistenz
          ,db_abwehr_pp,db_zaubern_pp,db_resistenz_pp,
          db_bo_au,db_bo_sc,db_bo_an,db_bo_ab,db_bo_za,db_bo_psy,db_bo_phs,
          db_bo_phk,db_alter;
      char db_gestalt[20] ;
      char db_hand[30] ;
      char db_geschlecht[5];
      int db_gewicht,db_groesse,db_grad;
      char db_spez[30]    ;
      char db_stand[30]   ;
      char db_herkunft[50];
      char db_glaube[50]  ;
      char db_name_ch[50] ;
      char db_name_sp[50] ;
      char db_version[50] ;
      int db_gfp,db_gg,db_sg,db_gold,db_silber,db_kupfer;
      char db_ruestung[20];
      char db_spezies[50];
      int db_aep,db_kep,db_zep;
      bool db_steigern_bool;   
      int db_steigern_EP;      
      int db_grad_basiswerte;
      char db_stadt_land[20];
   exec sql end declare section;

 //  db_beschreibung=0; /* Ist nötig !!! */
   strncpy(db_name_ch,(Werte.Name_Charakter()).c_str(),sizeof(db_name_ch));
   strncpy(db_version,(Werte.Version()).c_str(),sizeof(db_version));

   Transaction tr;

   exec sql DECLARE cha CURSOR FOR
      select 
         charakter_name ,
         beschreibung   ,
         version        ,
         typ_s          ,
         coalesce(typ_2_s,'')          ,
         spieler_name   ,
         st             ,
         gw             ,
         gs             ,
         ko             ,
         inn            ,
         zt             ,
         au             ,
         pa             ,
         sb             ,
         wk             ,
         b              ,
         lp             ,
         ap             ,
         abwehr         ,
         zaubern        ,
         resistenz      ,
         abwehr_pp         ,
         zaubern_pp        ,
         resistenz_pp      ,
         alter          ,
         gestalt        ,
         hand           ,
         geschlecht     ,
         gewicht        ,
         groesse        ,
         grad           ,
         spezialisierung,
         stand          ,
         herkunft       ,
         glaube         ,
         db_bo_au       ,
         db_bo_sc       ,
         db_bo_an       ,
         db_bo_ab       ,
         db_bo_za       ,
         db_bo_psy      ,
         db_bo_phs      ,
         db_bo_phk      ,
         db_gfp         ,
         gg         ,
         sg         ,
         gold        ,
         silber      ,
         kupfer      ,
         ruestung    ,
         spezies  ,
         coalesce(aep,0), coalesce(kep,0),coalesce(zep,0),
         coalesce(steigern_bool,'f'),coalesce(steigern_EP_prozent,50),
         coalesce(grad_basiswerte,1),
         stadt_land
      FROM charaktere WHERE charakter_name= :db_name_ch
            AND version= :db_version;


      exec sql open cha;
      SQLerror::test(__FILELINE__);

      exec sql fetch cha into 
       :db_name_ch  , 
       :db_beschreibung,
       :db_version  ,
       :db_typ_s      ,
       :db_typ_2_s      ,
       :db_name_sp  , 
       :db_st       ,
       :db_gw       ,
       :db_gs       ,
       :db_ko       ,
       :db_in       ,
       :db_zt       ,
       :db_au       ,
       :db_pa       ,
       :db_sb       ,
       :db_wk       ,
       :db_b        ,
       :db_lp       ,
       :db_ap       ,
       :db_abwehr   ,
       :db_zaubern  ,
       :db_resistenz,
       :db_abwehr_pp   ,
       :db_zaubern_pp  ,
       :db_resistenz_pp,
       :db_alter    ,
       :db_gestalt  ,
       :db_hand     ,
       :db_geschlecht,
       :db_gewicht  ,
       :db_groesse  ,
       :db_grad     ,
       :db_spez     ,
       :db_stand    ,
       :db_herkunft ,
       :db_glaube   ,
       :db_bo_au       ,
       :db_bo_sc       ,
       :db_bo_an       ,
       :db_bo_ab       ,
       :db_bo_za       ,
       :db_bo_psy      ,
       :db_bo_phs      ,
       :db_bo_phk      ,
       :db_gfp         ,
       :db_gg         ,
       :db_sg         ,
       :db_gold        ,
       :db_silber      ,
       :db_kupfer      ,
       :db_ruestung    ,
       :db_spezies     ,
       :db_aep,:db_kep,:db_zep  ,
       :db_steigern_bool, :db_steigern_EP,
       :db_grad_basiswerte,
       :db_stadt_land;
   SQLerror::test(__FILELINE__);
   exec sql close cha;
   Werte.set_Basiswerte(db_st,db_gw,db_gs,db_ko,db_in,db_zt) ;    
   Werte.set_Abgeleitetewerte(db_au,db_pa,db_sb,db_wk,db_b,
       db_lp, db_ap,db_abwehr,db_zaubern,db_resistenz,db_gestalt,db_hand,
       db_gewicht,db_groesse,db_grad,db_stand);
   Werte.setZaubernPP(db_zaubern_pp);
   Werte.setAbwehrPP(db_abwehr_pp);
   Werte.setResistenzPP(db_resistenz_pp);
   Werte.set_Abgeleitetewerte_Boni(db_bo_au,db_bo_sc, db_bo_an,db_bo_ab,
      db_bo_za,db_bo_psy,db_bo_phs,db_bo_phk);   
   Werte.set_Alter(db_alter); 
   Werte.set_Geschlecht(db_geschlecht) ;
   Werte.set_Spezialisierung(db_spez) ;
   Werte.set_Herkunft(cH_Land(db_herkunft));
   Werte.set_Glaube(db_glaube);
   Werte.set_Namen(db_name_ch,db_name_sp,db_version) ;
   Werte.set_GFP(db_gfp);
   Werte.set_GG(db_gg);
   Werte.set_SG(db_sg);
   Werte.set_Beschreibung(db_beschreibung); free(db_beschreibung);
   Werte.set_Geld(db_gold,db_silber,db_kupfer);
   Werte.set_Ruestung(cH_Ruestung(db_ruestung));
   Werte.set_Spezies(cH_Spezies(db_spezies)) ;
   Werte.set_EP(db_aep,db_kep,db_zep);
   Werte.setStadt_Land(db_stadt_land);
   steigern_bool=db_steigern_bool;
   Database.GradAnstieg.set_Grad_Anstieg(db_steigern_EP,db_grad_basiswerte);
//////////////////////////////////////////////////////////////////////////////
//   // Land oder Stadt?
//   if(Werte.Stadt_Land()=="Stadt") optionmenu_land->set_history(0);
//   else radiobutton_land->set_active;

   // Geschlecht setzen ////////////////////////////////////////////////
   if (Werte.Geschlecht()=="w") radiobutton_frau->set_active(true);
   if (Werte.Geschlecht()=="m") radiobutton_mann->set_active(true);
   // Charakterklasse setzen und anzeigen 
   Typ[0]=cH_Typen(db_typ_s);
   fill_typauswahl();
   typauswahl->set_history(Typ[0]->Nr());

   { std::string s = db_typ_2_s;
     if(s!="") 
      { Typ[1]=cH_Typen(s);
        fill_typauswahl_2();
        typauswahl_2->set_history(Typ[1]->Nr());
      }
   }
   if (Typ[0]->Zaubern()=="n" || Typ[0]->Short() == "Ord" ||
       Typ[1]->Zaubern()=="n" || Typ[1]->Short() == "Ord") label_spezialwaffe->set_text("Spezialwaffe durch \nSelektieren auswählen");
   else label_spezialwaffe->set_text("");
   Database.ausnahmen.set_Typ(Typ);

   ///////////////////////////////////////////////////////////////////////   
   // Berufe, Fertigkeiten, Waffen und Zauber (KiDo), Grundkenntnisse (Waffen)
   load_fertigkeiten();
    menu_init();

   Database.ausnahmen.set_Beruf(list_Beruf);

   // Spezies setzen ////////////////////////////////////////////
   optionmenu_spezies->set_history(Werte.Spezies()->Nr());
   //////////////////////////////////////////////////////////////
   show_gtk();
   if(cH_Spezialgebiet::is_cached(Werte.Spezialisierung()))
      Werte.set_Spezialgebiet(cH_Spezialgebiet(Werte.Spezialisierung()));
   load_ausruestung();
}

void midgard_CG::load_ausruestung()
{
  exec sql begin declare section;
    char adb_name[50];
    char adb_vers[50];
    char adb_art[50],adb_fert[50],adb_magisch[50];
    int adb_wert,adb_self;
    char query[1024];
  exec sql end declare section;
  strncpy(adb_name,Werte.Name_Charakter().c_str(),sizeof(adb_name));
  strncpy(adb_vers,Werte.Version().c_str(),sizeof(adb_vers));
  strncpy(adb_art,"Ausruestung",sizeof(adb_art));
  std::string squery = "select fertigkeit,wert,magisch,sl_bonus
      from charaktere_fertigkeiten
      where charakter_name='"+Werte.Name_Charakter()+"' and 
            version ='"+Werte.Version()+"' and art='Ausruestung'
            and av_bonus="+itos(0);
  strncpy(query,squery.c_str(),sizeof(query));
  exec sql prepare AFEIN_ from :query;
  exec sql declare AFEIN cursor for AFEIN_;
  Transaction tr;
  exec sql open AFEIN;
  SQLerror::test(__FILELINE__);
  while(true)
    {
      //av_bonus entspricht dem Parent
      //sl_bonus dem self
      exec sql fetch AFEIN into :adb_fert, :adb_wert,:adb_magisch,:adb_self;
      SQLerror::test(__FILELINE__,100);
      if (sqlca.sqlcode) break;
      AusruestungBaum *A = &besitz.push_back(Ausruestung(adb_fert,adb_magisch,adb_wert));
      A->setParent(&besitz);
      load_ausruestung_C(adb_self,A);
    }
  exec sql close AFEIN;
  tr.close();
}

void midgard_CG::load_ausruestung_C(int parent,AusruestungBaum *AB)
{
  vector<pair<int,AusruestungBaum*> > V;
  exec sql begin declare section;
    char acdb_name[50];
    char acdb_vers[50];
    char acdb_art[50],acdb_fert[50],acdb_magisch[50];
    int acdb_wert,acdb_self;
    char cquery[1024];
  exec sql end declare section;
  strncpy(acdb_name,Werte.Name_Charakter().c_str(),sizeof(acdb_name));
  strncpy(acdb_vers,Werte.Version().c_str(),sizeof(acdb_vers));
  strncpy(acdb_art,"Ausruestung",sizeof(acdb_art));
  std::string squery = "select fertigkeit,wert,magisch,sl_bonus "
      "from charaktere_fertigkeiten "
      "where charakter_name='"+Werte.Name_Charakter()+"' and "
            "version ='"+Werte.Version()+"' and art='Ausruestung' "
            "and av_bonus="+itos(parent);
  strncpy(cquery,squery.c_str(),sizeof(cquery));
//cout << cquery<<'\n'<<parent<<'\n';
  exec sql prepare LCFEIN_ from :cquery;
  exec sql declare LCFEIN cursor for LCFEIN_;
  Transaction tr;
  exec sql open LCFEIN;
  SQLerror::test(__FILELINE__);
  while(true)
    {
      //av_bonus entspricht dem Parent
      //sl_bonus dem self
      //wert entspricht sichtbar
      exec sql fetch LCFEIN into :acdb_fert, :acdb_wert,:acdb_magisch, :acdb_self;
//cout << "Eingelesen: ";
//cout << acdb_fert<<'-'<<acdb_wert<<'-'<<acdb_magisch<<'-'<<acdb_self<<'-'<<'\n';
      SQLerror::test(__FILELINE__,100);
      if (sqlca.sqlcode) break;
      AusruestungBaum *A = &AB->push_back(Ausruestung(acdb_fert,acdb_magisch,acdb_wert));
      A->setParent(AB);
//cout << "Child: "<<acdb_self<<' '<<parent<<'\t';
//cout<<A->getAusruestung().Name()<<'\t'<<AB->getAusruestung().Name()<<'\n';
      V.push_back(pair<int,AusruestungBaum*>(acdb_self,A));  
     }
  exec sql close LCFEIN;
  tr.close();

  for(vector<pair<int,AusruestungBaum*> >::iterator i=V.begin();i!=V.end();++i)
   {
//cout << i->first<<' '<<i->second.getAusruestung().Name()<<'\n';
    load_ausruestung_C(i->first,i->second);
   }
}

void midgard_CG::load_fertigkeiten()
{
  exec sql begin declare section;
   char db_fert[50],db_art[50];
   int db_wert;
   char query[1024];
   int db_av_bonus,db_sl_bonus;
   char db_magisch[512],db_region[30],db_zauberwerk_stufe[10];
  exec sql end declare section;
  std::string squery = "select fertigkeit,coalesce(wert,0),art,
      coalesce(av_bonus,0),coalesce(sl_bonus,0),coalesce(region,''),
      coalesce(magisch,''),coalesce(zauberwerk_stufe,'')
      from charaktere_fertigkeiten
      where charakter_name='"+Werte.Name_Charakter()+"' and 
            version ='"+Werte.Version()+"' and art!='Ausruestung'";
  strncpy(query,squery.c_str(),sizeof(query));
  exec sql prepare LFEIN_ from :query;
  exec sql declare LFEIN cursor for LFEIN_;
  Transaction tr;
  exec sql open LFEIN;
  SQLerror::test(__FILELINE__);
  while(true)
    {
      exec sql fetch LFEIN into :db_fert, :db_wert, :db_art,
            :db_av_bonus, :db_sl_bonus, :db_region, :db_magisch,
            :db_zauberwerk_stufe ;
      SQLerror::test(__FILELINE__,100);
      if (sqlca.sqlcode) break;
      std::string sart=db_art;
      if(sart=="Sinn")
        {
         Werte.set_Sinn(db_fert,db_wert);
        }
      if(sart=="Beruf")
        {
         cH_MidgardBasicElement beruf(&*cH_Beruf(db_fert));
         cH_Beruf(beruf)->set_Erfolgswert(db_wert);
         list_Beruf.push_back(beruf);
        }
      if(sart=="ang.Fertigkeit")
       {
         cH_MidgardBasicElement fert_an(new Fertigkeit_angeborene(db_fert));
         cH_Fertigkeit_angeborene(fert_an)->set_Erfolgswert(db_wert);
         list_Fertigkeit_ang.push_back(fert_an);
       }    
      if(sart=="Fertigkeit")
       {
         cH_MidgardBasicElement fert(&*cH_Fertigkeit(db_fert));
         fert->set_Erfolgswert(db_wert);
         fert->set_Praxispunkte(db_av_bonus);
         if(fert->Name()=="Landeskunde") 
         {  fert=new Fertigkeit(*cH_Fertigkeit(fert));
            cH_Fertigkeit(fert)->setZusatz(db_magisch);
         }
         list_Fertigkeit.push_back(fert);
         if      (fert->Name()=="KiDo") kido_bool=true;
         else if (fert->Name()=="Zaubern") magie_bool=true;
       }    
      if(sart=="Waffe")
        {
         cH_MidgardBasicElement waffe(new Waffe(db_fert));
         waffe->set_Erfolgswert(db_wert);
         waffe->set_Praxispunkte(db_av_bonus);
         list_Waffen.push_back(waffe);
        }
      if(sart=="Besitz_W")
        {
         std::string wn = Database.Waffe_from_Alias[db_fert];
         if (wn=="") wn=db_fert; 
         list_Waffen_besitz.push_back(new 
           WaffeBesitz(cH_Waffe(wn),
                        db_fert,db_region,db_av_bonus,db_sl_bonus,db_magisch));
        }
      if(sart=="Zauber")        list_Zauber.push_back(&*cH_Zauber(db_fert));
      if(sart=="Zauberwerk")    list_Zauberwerk.push_back(new Zauberwerk(db_fert,db_magisch,db_zauberwerk_stufe));
      if(sart=="KiDo")          list_Kido.push_back(new KiDo(db_fert)) ;
      if(sart=="Grundkenntnis") list_WaffenGrund.push_back(new WaffeGrund(db_fert)) ;
      if(sart=="Sprache")
        {
         cH_MidgardBasicElement sprache(new Sprache(db_fert));
         sprache->set_Erfolgswert(db_wert);
         sprache->set_Praxispunkte(db_av_bonus);
         list_Sprache.push_back(sprache);
        }
      if(sart=="Urschrift") 
        {
         cH_MidgardBasicElement schrift(new Schrift(db_fert));
         schrift->set_Erfolgswert(db_wert);
         schrift->set_Praxispunkte(db_av_bonus);
         list_Schrift.push_back(schrift);
        }
      if(sart=="bool")
        {
         std::string reg=db_region;
         if (reg=="ORIG") {Originalbool=false ; checkbutton_original->set_active(false);}
         if (reg=="INFO") {Infobool=false ; checkbutton_info_fenster->set_active(false);}
        }
      if(sart=="Region")
        {
         cH_Region R(db_fert);
         bool active=db_wert;         
         Region::setActive(Database.Regionen,R,active);
        }
    } 
  exec sql close LFEIN;
  tr.close();
//  menu_init();
}

