// generated 2006/1/31 23:50:19 CET by christof@vesta.petig-baender.de
// using glademm V2.12.1
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- --image-provider=MagusImage --gtkmmversion 2.4.0 midgard.glade
// for gtk 2.8.10 and gtkmm 2.4.0
//
// Please modify the corresponding derived classes in ./src/table_steigern.hh and./src/table_steigern.cc

#ifndef _TABLE_STEIGERN_GLADE_HH
#  define _TABLE_STEIGERN_GLADE_HH


#if !defined(GLADEMM_DATA)
#define GLADEMM_DATA 
#include <gtkmm/accelgroup.h>

class GlademmData
{  
        
        Glib::RefPtr<Gtk::AccelGroup> accgrp;
public:
        
        GlademmData(Glib::RefPtr<Gtk::AccelGroup> ag) : accgrp(ag)
        {  
        }
        
        Glib::RefPtr<Gtk::AccelGroup>  getAccelGroup()
        {  return accgrp;
        }
};
#endif //GLADEMM_DATA

#include <gtkmm/table.h>
#include <gtkmm/tooltips.h>
#include "MidgardBasicTree.hh"
#include <gtkmm/scrolledwindow.h>
#include <gtkmm/label.h>
#include <gtkmm/image.h>
#include <gtkmm/checkbutton.h>
#include <gtkmm/treeview.h>
#include "SimpleTree.hh"
#include <gtkmm/spinbutton.h>
#include <gtkmm/entry.h>
#include <gtkmm/notebook.h>
#include <gtkmm/frame.h>
#include <gtkmm/handlebox.h>
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
#include <gtkmm/expander.h>
#else //
#endif //
#include "LabelSpin.hh"
#include <gtkmm/scale.h>
#include "ChoiceButton.hh"
#include "FlashingPixmap.hh"
#include <gtkmm/button.h>
#include <gtkmm/togglebutton.h>
#include <gtkmm/radiobutton.h>
#include <gtkmm/box.h>

class table_steigern_glade : public Gtk::Table
{  
protected:
        
        Gtk::Tooltips _tooltips;
        class Gtk::Table * table_steigern;
        class MidgardBasicTree * tree_steigern_zusatz;
        class Gtk::ScrolledWindow * scrolledwindow_landauswahl;
        class MidgardBasicTree * alte_fert_tree;
        class MidgardBasicTree * neue_fert_tree;
        class Gtk::Label * label_ns_fertigkeiten;
        class Gtk::Image * pixmap_ns_fertig;
        class MidgardBasicTree * alte_waffen_tree;
        class MidgardBasicTree * neue_waffen_tree;
        class MidgardBasicTree * alte_grund_tree;
        class MidgardBasicTree * neue_grund_tree;
        class Gtk::Label * label_nw_waffen;
        class Gtk::Image * pixmap_ns_waffen;
        class MidgardBasicTree * alte_zauber_tree;
        class MidgardBasicTree * neue_zauber_tree;
        class MidgardBasicTree * alte_zaubermittel_tree;
        class MidgardBasicTree * neue_zaubermittel_tree;
        class Gtk::Table * table_magier_steigern;
        class Gtk::Label * label_ns_zauber;
        class Gtk::Image * pixmap_ns_zauber;
        class MidgardBasicTree * alte_kido_tree;
        class MidgardBasicTree * neue_kido_tree;
        class Gtk::Table * table_kido_steigern;
        class Gtk::Label * label_ns_kido;
        class Gtk::Image * pixmap_ns_kido;
        class MidgardBasicTree * alte_sprache_tree;
        class MidgardBasicTree * neue_sprache_tree;
        class MidgardBasicTree * alte_schrift_tree;
        class MidgardBasicTree * neue_schrift_tree;
        class Gtk::Label * label_ns_sprache;
        class Gtk::Image * pixmap_ns_sprache;
        class Gtk::Label * label_ruestung_1;
        class Gtk::CheckButton * button_ruestung_1;
        class Gtk::Label * label_ruestung_2;
        class Gtk::CheckButton * button_ruestung_2;
        class Gtk::TreeView * clist_ruestung;
        class Gtk::CheckButton * checkbutton_mag_waffenbonus;
        class SimpleTree * waffenbesitz_alt_tree;
        class Gtk::Label * label_av_bonus;
        class Gtk::Label * label_sl_bonus;
        class Gtk::SpinButton * spinbutton_av_bonus;
        class Gtk::SpinButton * spinbutton_sl_bonus;
        class Gtk::Entry * entry_magisch;
        class Gtk::Table * table_magbonus;
        class SimpleTree * waffenbesitz_neu_tree;
        class Gtk::Label * label_ns_besitz;
        class Gtk::Image * pixmap_ns_besitz;
        class Gtk::Notebook * notebook_lernen;
        class Gtk::Label * label_s_grad;
        class Gtk::Label * label_s_resistenz;
        class Gtk::Label * label_s_zaubern;
        class Gtk::Label * label_s_abwehr;
        class Gtk::Label * label_alter;
        class Gtk::Label * label_s_ap;
        class Gtk::Label * label_steigertage;
        class Gtk::Label * steigern_typ;
        class Gtk::Label * label_steigern_spezies;
        class Gtk::Label * label_pp_abwehr;
        class Gtk::Label * label_pp_zaubern;
        class Gtk::Frame * frame_pp_zaubern;
        class Gtk::Label * label_pp_resistenz;
        class Gtk::Label * label_pp_spezial;
        class Gtk::Frame * frame_pp_spezial;
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
        class Gtk::Expander * handlebox_steigern_1;
#else //
        class Gtk::HandleBox * handlebox_steigern_1;
#endif //
        class LabelSpin * LabelSpin_aep;
        class LabelSpin * LabelSpin_kep;
        class LabelSpin * LabelSpin_zep;
        class LabelSpin * LabelSpin_gold;
        class LabelSpin * LabelSpin_silber;
        class LabelSpin * LabelSpin_kupfer;
        class LabelSpin * LabelSpin_gfp;
        class Gtk::Label * label_EP;
        class Gtk::Label * label_Gold;
        class Gtk::VScale * vscale_EP_Gold;
        class ChoiceButton * button_sonder;
        class ChoiceButton * button_EP;
        class ChoiceButton * button_GFP;
        class ChoiceButton * button_gold;
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
        class Gtk::Expander * handlebox_steigern_2;
#else //
        class Gtk::HandleBox * handlebox_steigern_2;
#endif //
        class FlashingPixmap * flashing_gradanstieg;
        class Gtk::Label * label_grad_GFP;
        class Gtk::Label * label_ausdauer_GFP;
        class Gtk::Label * label_abwehr_GFP;
        class Gtk::Label * label_zauber_GFP;
        class Gtk::Button * button_grad_zaubern;
        class Gtk::Label * label_resistenz_GFP;
        class FlashingPixmap * flashing_eigenschaft;
        class Gtk::SpinButton * spinbutton_eigenschaften_grad_anstieg;
        class Gtk::Button * button_grad_basiswerte;
        class Gtk::Table * table_gradsteigern_lang;
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
        class Gtk::Expander * handlebox_steigern_4;
#else //
        class Gtk::HandleBox * handlebox_steigern_4;
#endif //
        class Gtk::ToggleButton * togglebutton_alle_zauber;
        class Gtk::ToggleButton * togglebutton_zaubersalze;
        class Gtk::Frame * frame_zauber_zusatz;
        class ChoiceButton * button_wie_tun;
        class ChoiceButton * button_rolle;
        class ChoiceButton * button_pp_variante;
        class Gtk::Frame * frame_lernen_mit;
        class ChoiceButton * button_was_tun;
        class Gtk::Frame * frame_fertigkeit;
        class Gtk::SpinButton * spinbutton_pp_eingeben;
        class Gtk::ToggleButton * togglebutton_praxispunkte;
        class Gtk::RadioButton * radiobutton_pp_abwehr;
        class Gtk::RadioButton * radiobutton_pp_zauber;
        class Gtk::RadioButton * radiobutton_pp_spezial;
        class Gtk::RadioButton * radiobutton_pp_resistenz;
        class Gtk::VBox * vbox_praxispunkte;
        class Gtk::Frame * frame_praxispunkte;
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
        class Gtk::Expander * handlebox_steigern_3;
#else //
        class Gtk::HandleBox * handlebox_steigern_3;
#endif //
        class Gtk::Table * table_handlebox1;
        class Gtk::Frame * frame_spezielles;
        
        table_steigern_glade(GlademmData *gmm_data);
        
        ~table_steigern_glade();
private:
        virtual void on_steigern_zusatz_leaf_selected(cH_RowDataBase leaf) = 0;
        virtual void on_leaf_selected_alte_fert(cH_RowDataBase leaf) = 0;
        virtual void on_leaf_selected_alte_fert2(cH_RowDataBase row,bool &handled) = 0;
        virtual void on_alte_fert_reorder() = 0;
        virtual void on_leaf_selected_neue_fert(cH_RowDataBase leaf) = 0;
        virtual void on_neue_fert_clicked(cH_RowDataBase row,bool &handled) = 0;
        virtual void on_leaf_selected_alte_waffen(cH_RowDataBase leaf) = 0;
        virtual void on_alte_waffen_reorder() = 0;
        virtual void on_alte_waffen_clicked(cH_RowDataBase row,bool &handled) = 0;
        virtual void on_leaf_selected_neue_waffen(cH_RowDataBase leaf) = 0;
        virtual void on_neue_waffen_clicked(cH_RowDataBase row,bool &handled) = 0;
        virtual void on_leaf_selected_alte_grund(cH_RowDataBase leaf) = 0;
        virtual void on_alte_grund_clicked(cH_RowDataBase row,bool &handled) = 0;
        virtual void on_leaf_selected_neue_grund(cH_RowDataBase leaf) = 0;
        virtual void on_neue_grund_clicked(cH_RowDataBase row,bool &handled) = 0;
        virtual void on_leaf_selected_alte_zauber(cH_RowDataBase leaf) = 0;
        virtual void on_alte_zauber_reorder() = 0;
        virtual void on_leaf_selected_neue_zauber(cH_RowDataBase leaf) = 0;
        virtual void on_leaf_selected_alte_zauberwerk(cH_RowDataBase leaf) = 0;
        virtual void on_alte_zaubermittel_reorder() = 0;
        virtual void on_leaf_selected_neue_zauberwerk(cH_RowDataBase leaf) = 0;
        virtual void on_leaf_selected_alte_kido(cH_RowDataBase leaf) = 0;
        virtual void on_alte_kido_reorder() = 0;
        virtual void on_leaf_selected_neue_kido(cH_RowDataBase leaf) = 0;
        virtual void on_leaf_selected_alte_sprache(cH_RowDataBase leaf) = 0;
        virtual void on_alte_sprache_reorder() = 0;
        virtual void on_alte_sprache_clicked(cH_RowDataBase row,bool &handled) = 0;
        virtual void on_leaf_selected_neue_sprache(cH_RowDataBase leaf) = 0;
        virtual void on_neue_sprache_clicked(cH_RowDataBase row,bool &handled) = 0;
        virtual void on_leaf_selected_alte_schrift(cH_RowDataBase leaf) = 0;
        virtual void on_alte_schrift_clicked(cH_RowDataBase row,bool &handled) = 0;
        virtual void on_leaf_selected_neue_schrift(cH_RowDataBase leaf) = 0;
        virtual void on_neue_schrift_clicked(cH_RowDataBase row,bool &handled) = 0;
        virtual void on_button_ruestung_1_toggled() = 0;
        virtual void on_button_ruestung_2_toggled() = 0;
        virtual void on_checkbutton_mag_waffenbonus_toggled() = 0;
        virtual void on_leaf_waffenbesitz_selected_alt(cH_RowDataBase leaf) = 0;
        virtual void on_alte_waffenbesitz_reorder() = 0;
        virtual void on_spinbutton_av_bonus_activate() = 0;
        virtual void on_spinbutton_sl_bonus_activate() = 0;
        virtual void on_entry_magisch_activate() = 0;
        virtual void on_leaf_waffenbesitz_selected_neu(cH_RowDataBase leaf) = 0;
        virtual void on_notebook_lernen_switch_page(GtkNotebookPage *p0, guint p1) = 0;
        virtual void on_button_alter_clicked() = 0;
        virtual bool pp_eingeben_click(GdkEventButton *ev) = 0;
        virtual void on_LabelSpin_aep_activate() = 0;
        virtual void on_LabelSpin_kep_activate() = 0;
        virtual void on_LabelSpin_zep_activate() = 0;
        virtual void on_LabelSpin_gold_activate() = 0;
        virtual void on_LabelSpin_silber_activate() = 0;
        virtual void on_LabelSpin_kupfer_activate() = 0;
        virtual void on_LabelSpin_gfp_activate() = 0;
        virtual bool vscale_value_changed(GdkEventButton *ev) = 0;
        virtual void button_sonder_changed() = 0;
        virtual void on_button_grad_clicked() = 0;
        virtual void on_button_grad_ausdauer_clicked() = 0;
        virtual void on_button_grad_abwehr_clicked() = 0;
        virtual void on_button_grad_zaubern_clicked() = 0;
        virtual void on_grad_anstieg_clicked() = 0;
        virtual void on_button_grad_resistenz_clicked() = 0;
        virtual void on_spinbutton_eigenschaften_grad_anstieg_activate() = 0;
        virtual void on_button_grad_basiswerte() = 0;
        virtual void on_togglebutton_alle_zauber_toggled() = 0;
        virtual void on_togglebutton_zaubersalze_toggled() = 0;
        virtual void button_wie_tun_changed() = 0;
        virtual void button_rolle_changed() = 0;
        virtual void button_ppvar_changed() = 0;
        virtual void button_was_tun_changed() = 0;
        virtual void on_spinbutton_pp_eingeben_activate() = 0;
        virtual void on_togglebutton_praxispunkte_toggled() = 0;
        virtual void on_radiobutton_pp_abwehr_toggled() = 0;
        virtual void on_radiobutton_pp_zauber_toggled() = 0;
        virtual void on_radiobutton_pp_spezial_toggled() = 0;
        virtual void on_radiobutton_pp_resistenz_toggled() = 0;
};
#endif
