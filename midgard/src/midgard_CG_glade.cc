// generated 2005/9/7 21:59:13 CEST by christof@vesta.petig-baender.de
// using glademm V2.10.0.0
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- --image-provider=MagusImage --gtkmmversion 2.4.0 midgard.glade
// for gtk 2.8.3 and gtkmm 2.4.0
//
// Please modify the corresponding derived classes in ./src/midgard_CG.cc


#if defined __GNUC__ && __GNUC__ < 3
#error This program will crash if compiled with g++ 2.x
// see the dynamic_cast bug in the gtkmm FAQ
#endif //
#include "config.h"
#include <gtkmmconfig.h>
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#include <sigc++/compatibility.h>
#include <sigc++/bind.h>
#define GMM_GTKMM_22_24(a,b) b
#else //gtkmm 2.2
#define GMM_GTKMM_22_24(a,b) a
#endif //
#include "midgard_CG_glade.hh"
#include <gdk/gdkkeysyms.h>
#include <gtkmm/accelgroup.h>
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
#include <gtkmm/toolitem.h>
#endif //
#include <gtkmm/image.h>

extern Glib::RefPtr<Gdk::Pixbuf> MagusImage(const std::string &name);
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3

#include <gtkmm/toolbutton.h>
#else //
#include <gtkmm/button.h>
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
#include <gtkmm/separatortoolitem.h>
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
#endif //
#include <gtkmm/imagemenuitem.h>
#include <gtk/gtkimagemenuitem.h>
#include <gtkmm/menuitem.h>
#include <gtkmm/menu.h>
#include "table_grundwerte.hh"
#include <gtkmm/frame.h>
#include <gtkmm/box.h>
#include "table_lernschema.hh"
#include "table_steigern.hh"
#include "table_beschreibung.hh"
#include "table_ausruestung.hh"
#include "table_optionen.hh"
#include "Midgard_Info.hh"
#include <gtkmm/viewport.h>
#include <gtkmm/adjustment.h>
#include <gtkmm/scrolledwindow.h>
#include <gtkmm/table.h>
#include "table_zufall.hh"

midgard_CG_glade::midgard_CG_glade(
) : Gtk::Window(Gtk::WINDOW_TOPLEVEL)
{  midgard_CG = this;
   gmm_data = new GlademmData(get_accel_group());
   button_neuer_charakter = new class ChoiceButton();
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   
   Gtk::ToolItem *toolitem1 = Gtk::manage(new class Gtk::ToolItem());
#endif //
   Gtk::Image *button9_img = Gtk::manage(new class Gtk::Image(MagusImage("LoadChar-trans-50.xpm")));
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   Gtk::ToolButton *button9 = Gtk::manage(new class Gtk::ToolButton(*button9_img, "Öffnen"));
#endif //
   button_speichern = new class ChoiceButton();
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   
   Gtk::ToolItem *toolitem2 = Gtk::manage(new class Gtk::ToolItem());
#endif //
   button_main_drucken = new class ChoiceButton();
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   
   Gtk::ToolItem *toolitem3 = Gtk::manage(new class Gtk::ToolItem());
#endif //
   button_undo = new class DoubleButton();
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   
   Gtk::ToolItem *toolitem4 = Gtk::manage(new class Gtk::ToolItem());
#endif //
   button_redo = new class DoubleButton();
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   
   Gtk::ToolItem *toolitem5 = Gtk::manage(new class Gtk::ToolItem());
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   Gtk::SeparatorToolItem *separatortoolitem1 = Gtk::manage(new class Gtk::SeparatorToolItem());
#endif //
   Gtk::Image *button_menu_img = Gtk::manage(new class Gtk::Image(MagusImage("wizzard-trans-50_2.xpm")));
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   Gtk::ToolButton *button_menu = Gtk::manage(new class Gtk::ToolButton(*button_menu_img, "Menü"));
#endif //
   Gtk::Image *button_info_img = Gtk::manage(new class Gtk::Image(MagusImage("Info-trans-50.xpm")));
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   Gtk::ToolButton *button_info = Gtk::manage(new class Gtk::ToolButton(*button_info_img, "Info"));
#endif //
   Gtk::Image *button_html_hilfe_img = Gtk::manage(new class Gtk::Image(MagusImage("Help-trans-50.xpm")));
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   Gtk::ToolButton *button_html_hilfe = Gtk::manage(new class Gtk::ToolButton(*button_html_hilfe_img, "Anleitung"));
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   Gtk::SeparatorToolItem *separatortoolitem2 = Gtk::manage(new class Gtk::SeparatorToolItem());
#endif //
   Gtk::Image *button_schliessen_img = Gtk::manage(new class Gtk::Image(MagusImage("Exit-trans-50.xpm")));
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   button_schliessen = Gtk::manage(new class Gtk::ToolButton(*button_schliessen_img, "Schließen"));
#endif //
   toolbar_top = Gtk::manage(new class Gtk::Toolbar());
   griff_toolbar_top = Gtk::manage(new class Gtk::HandleBox());
   
   Gtk::Image *image77 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-new"), Gtk::IconSize(1)));
   Gtk::ImageMenuItem *neuen_abenteurer1 = NULL;
   Gtk::MenuItem *neuer_abenteurer_mit_wizard1 = NULL;
   Gtk::MenuItem *wizard_beenden = NULL;
   Gtk::MenuItem *trennlinie3 = NULL;
   Gtk::Image *image78 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-open"), Gtk::IconSize(1)));
   Gtk::ImageMenuItem *laden1 = NULL;
   Gtk::Image *image79 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-open"), Gtk::IconSize(1)));
   zuletzt_geladen_mi = NULL;
   Gtk::Image *image80 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-save"), Gtk::IconSize(1)));
   Gtk::ImageMenuItem *speichern1 = NULL;
   Gtk::Image *image81 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-save-as"), Gtk::IconSize(1)));
   Gtk::ImageMenuItem *speichern_unter_ = NULL;
   Gtk::Image *image82 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-convert"), Gtk::IconSize(1)));
   Gtk::MenuItem *exportieren = NULL;
   Gtk::MenuItem *exportieren_ranas_pdf_dokumente = NULL;
   Gtk::Menu *exportieren_main_menu = Gtk::manage(new class Gtk::Menu());
   Gtk::ImageMenuItem *exportieren_main = NULL;
   Gtk::MenuItem *trennlinie1 = NULL;
   Gtk::Image *image83 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-print"), Gtk::IconSize(1)));
   Gtk::MenuItem *abenteurerdokument = NULL;
   Gtk::MenuItem *nur_sichtbares = NULL;
   Gtk::MenuItem *unsichtbares_drucken = NULL;
   Gtk::Menu *ausr__stungsdokument_menu = Gtk::manage(new class Gtk::Menu());
   Gtk::MenuItem *ausr__stungsdokument = NULL;
   Gtk::MenuItem *beschreibung = NULL;
   Gtk::MenuItem *alles_drucken = NULL;
   Gtk::MenuItem *trennlinie4 = NULL;
   Gtk::MenuItem *leeres_abenteurerblatt = NULL;
   Gtk::MenuItem *trennlinie6 = NULL;
   Gtk::MenuItem *spielleiterbogen_drucken = NULL;
   Gtk::Menu *drucken1_menu = Gtk::manage(new class Gtk::Menu());
   Gtk::ImageMenuItem *drucken1 = NULL;
   Gtk::MenuItem *trennlinie2 = NULL;
   Gtk::Image *image84 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-close"), Gtk::IconSize(1)));
   Gtk::ImageMenuItem *schlie__en1 = NULL;
   Gtk::Image *image85 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-quit"), Gtk::IconSize(1)));
   Gtk::ImageMenuItem *beenden1 = NULL;
   Gtk::MenuItem *trennlinie5 = NULL;
   Gtk::Menu *magus1_menu = Gtk::manage(new class Gtk::Menu());
   Gtk::MenuItem *magus1 = NULL;
   Gtk::Image *image86 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-undo"), Gtk::IconSize(1)));
   Gtk::ImageMenuItem *r__ckg__ngig1 = NULL;
   Gtk::MenuItem *erneut_vorw__rts1 = NULL;
   Gtk::MenuItem *geschichte = NULL;
   Gtk::Menu *bearbeiten1_menu = Gtk::manage(new class Gtk::Menu());
   Gtk::MenuItem *bearbeiten1 = NULL;
   abenteurer_mi = NULL;
   Gtk::MenuItem *anleitung_menu = NULL;
   Gtk::Image *image87 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-about"), Gtk::IconSize(1)));
   Gtk::ImageMenuItem *info_credits_menu = NULL;
   Gtk::MenuItem *news_menu = NULL;
   Gtk::Menu *hilfe1_menu = Gtk::manage(new class Gtk::Menu());
   Gtk::MenuItem *hilfe1 = NULL;
   main_menubar = Gtk::manage(new class Gtk::MenuBar());
   handlebox_menu = Gtk::manage(new class Gtk::HandleBox());
   table_grundwerte = Gtk::manage(new class table_grundwerte(gmm_data));
   grundwerte_background = Gtk::manage(new class Gtk::EventBox());
   
   Gtk::Frame *frame4 = Gtk::manage(new class Gtk::Frame());
   pixmap_notebook_grundwerte = Gtk::manage(new class Gtk::Image(MagusImage("Grundwert_small.xpm")));
   label_notebook_grundwerte = Gtk::manage(new class Gtk::Label("Grundwerte"));
   
   Gtk::VBox *vbox51 = Gtk::manage(new class Gtk::VBox(false, 0));
   eventbox_grundwerte = Gtk::manage(new class Gtk::EventBox());
   table_lernschema = Gtk::manage(new class table_lernschema(gmm_data));
   frame_lernschema = Gtk::manage(new class Gtk::Frame());
   pixmap_notebook_lernen = Gtk::manage(new class Gtk::Image(MagusImage("L_Schema_small.xpm")));
   label_notebook_lernen = Gtk::manage(new class Gtk::Label("Lernschema"));
   
   Gtk::VBox *vbox52 = Gtk::manage(new class Gtk::VBox(false, 0));
   eventbox_lernen = Gtk::manage(new class Gtk::EventBox());
   table_steigern = Gtk::manage(new class table_steigern(gmm_data));
   frame_steigern = Gtk::manage(new class Gtk::Frame());
   pixmap_notebook_steigern = Gtk::manage(new class Gtk::Image(MagusImage("Steigern_small.xpm")));
   label_notebook_steigern = Gtk::manage(new class Gtk::Label("Steigern"));
   
   Gtk::VBox *vbox53 = Gtk::manage(new class Gtk::VBox(false, 0));
   eventbox_steigern = Gtk::manage(new class Gtk::EventBox());
   table_beschreibung = Gtk::manage(new class table_beschreibung(gmm_data));
   pixmap_notebook_beschreibung = Gtk::manage(new class Gtk::Image(MagusImage("Descr.Char-40.xpm")));
   label_notebook_beschreibung = Gtk::manage(new class Gtk::Label("Beschreibung"));
   
   Gtk::VBox *vbox54 = Gtk::manage(new class Gtk::VBox(false, 0));
   eventbox_beschreibung = Gtk::manage(new class Gtk::EventBox());
   table_ausruestung = Gtk::manage(new class table_ausruestung(gmm_data));
   pixmap_notebook_ausruestung = Gtk::manage(new class Gtk::Image(MagusImage("Ausruest_small.xpm")));
   label_notebook_ausruestung = Gtk::manage(new class Gtk::Label("Ausrüstung"));
   
   Gtk::VBox *vbox55 = Gtk::manage(new class Gtk::VBox(false, 0));
   eventbox_ausruestung = Gtk::manage(new class Gtk::EventBox());
   table_optionen = Gtk::manage(new class table_optionen(gmm_data));
   pixmap_notebook_optionen = Gtk::manage(new class Gtk::Image(MagusImage("Regio_Hausregel-50.xpm")));
   label_notebook_optionen = Gtk::manage(new class Gtk::Label("Einstellungen"));
   
   Gtk::VBox *vbox56 = Gtk::manage(new class Gtk::VBox(false, 0));
   eventbox_optionen = Gtk::manage(new class Gtk::EventBox());
   Midgard_Info = Gtk::manage(new class Midgard_Info(gmm_data));
   pixmap_original_tux = Gtk::manage(new class Gtk::Image(MagusImage("MAGUS_Logo_Small.xpm")));
   label_notebook_info = Gtk::manage(new class Gtk::Label("Über MAGUS"));
   
   Gtk::VBox *vbox66 = Gtk::manage(new class Gtk::VBox(false, 0));
   eventbox_credits = Gtk::manage(new class Gtk::EventBox());
   list_news = Gtk::manage(new class Gtk::TreeView());
   
   Gtk::Viewport *viewport38 = Gtk::manage(new class Gtk::Viewport(*manage(new Gtk::Adjustment(0,0,1)), *manage(new Gtk::Adjustment(0,0,1))));
   Gtk::ScrolledWindow *scrolledwindow76 = Gtk::manage(new class Gtk::ScrolledWindow());
   Gtk::Table *table139 = Gtk::manage(new class Gtk::Table(2, 2, false));
   Gtk::Image *pixmap175 = Gtk::manage(new class Gtk::Image(MagusImage("NewsGeschichte.xpm")));
   label_notebook_news = Gtk::manage(new class Gtk::Label("Neuigkeiten"));
   
   Gtk::VBox *vbox57 = Gtk::manage(new class Gtk::VBox(false, 0));
   eventbox_geschichte = Gtk::manage(new class Gtk::EventBox());
   table_zufall = Gtk::manage(new class table_zufall(gmm_data));
   pixmap167 = Gtk::manage(new class Gtk::Image(MagusImage("Z-NewChar.xpm")));
   label603 = Gtk::manage(new class Gtk::Label("Zufallsgenerator"));
   
   Gtk::VBox *vbox65 = Gtk::manage(new class Gtk::VBox(false, 0));
   eventbox_zufall = Gtk::manage(new class Gtk::EventBox());
   notebook_main = Gtk::manage(new class Gtk::Notebook());
   label_status = Gtk::manage(new class Gtk::Label(""));
   label_wizard = Gtk::manage(new class Gtk::Label(""));
   
   Gtk::VBox *vbox64 = Gtk::manage(new class Gtk::VBox(false, 0));
   frame_regionen_status = Gtk::manage(new class Gtk::Frame());
   
   Gtk::Image *pixmap176 = Gtk::manage(new class Gtk::Image(MagusImage("midgard_logo_status.xpm")));
   eventbox_Original_Midgard = Gtk::manage(new class Gtk::EventBox());
   
   Gtk::Image *pixmap164 = Gtk::manage(new class Gtk::Image(MagusImage("NSC-Mode-26.xpm")));
   eventbox_NSC_aktiv = Gtk::manage(new class Gtk::EventBox());
   pixmap_status_wizard = Gtk::manage(new class Gtk::Image(MagusImage("MAGUS_Logo_Tiny.xpm")));
   eventbox_wizard_aktiv = Gtk::manage(new class Gtk::EventBox());
   frame_haus_status = Gtk::manage(new class Gtk::Frame());
   hbox_status = Gtk::manage(new class Gtk::HBox(false, 0));
   handlebox_status = Gtk::manage(new class Gtk::HandleBox());
   
   Gtk::Table *main_table = Gtk::manage(new class Gtk::Table(2, 2, false));
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   toolbar_top->append(*toolitem1);
#else //
   toolbar_top->tools().push_back(Gtk::Toolbar_Helpers::Element(*button_neuer_charakter));
   
   Gtk::Widget *toolitem1 = toolbar_top->tools().back().get_widget();
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   toolbar_top->append(*button9);
#else //
   
   
   toolbar_top->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("Öffnen", *button9_img, Gtk::Toolbar_Helpers::Callback0()));
   Gtk::Button *button9 = static_cast<Gtk::Button *>(toolbar_top->tools().back().get_widget());
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   toolbar_top->append(*toolitem2);
#else //
   toolbar_top->tools().push_back(Gtk::Toolbar_Helpers::Element(*button_speichern));
   
   Gtk::Widget *toolitem2 = toolbar_top->tools().back().get_widget();
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   toolbar_top->append(*toolitem3);
#else //
   toolbar_top->tools().push_back(Gtk::Toolbar_Helpers::Element(*button_main_drucken));
   
   Gtk::Widget *toolitem3 = toolbar_top->tools().back().get_widget();
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   toolbar_top->append(*toolitem4);
#else //
   toolbar_top->tools().push_back(Gtk::Toolbar_Helpers::Element(*button_undo));
   
   Gtk::Widget *toolitem4 = toolbar_top->tools().back().get_widget();
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   toolbar_top->append(*toolitem5);
#else //
   toolbar_top->tools().push_back(Gtk::Toolbar_Helpers::Element(*button_redo));
   
   Gtk::Widget *toolitem5 = toolbar_top->tools().back().get_widget();
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   toolbar_top->append(*separatortoolitem1);
#else //
   toolbar_top->tools().push_back(Gtk::Toolbar_Helpers::Space());
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   toolbar_top->append(*button_menu);
#else //
   
   
   toolbar_top->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("Menü", *button_menu_img, Gtk::Toolbar_Helpers::Callback0()));
   Gtk::Button *button_menu = static_cast<Gtk::Button *>(toolbar_top->tools().back().get_widget());
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   toolbar_top->append(*button_info);
#else //
   
   
   toolbar_top->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("Info", *button_info_img, Gtk::Toolbar_Helpers::Callback0()));
   Gtk::Button *button_info = static_cast<Gtk::Button *>(toolbar_top->tools().back().get_widget());
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   toolbar_top->append(*button_html_hilfe);
#else //
   
   
   toolbar_top->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("Anleitung", *button_html_hilfe_img, Gtk::Toolbar_Helpers::Callback0()));
   Gtk::Button *button_html_hilfe = static_cast<Gtk::Button *>(toolbar_top->tools().back().get_widget());
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   toolbar_top->append(*separatortoolitem2);
#else //
   toolbar_top->tools().push_back(Gtk::Toolbar_Helpers::Space());
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   toolbar_top->append(*button_schliessen);
#else //
   
   
   toolbar_top->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("Schließen", *button_schliessen_img, Gtk::Toolbar_Helpers::Callback0()));
   button_schliessen = static_cast<Gtk::Button *>(toolbar_top->tools().back().get_widget());
#endif //
   
   exportieren_main_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("Exportieren für gedruckte Abenteuer"));
   exportieren = (Gtk::MenuItem *)&exportieren_main_menu->items().back();
   
   exportieren_main_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("Exportieren für Ranas pdf-Dokumente"));
   exportieren_ranas_pdf_dokumente = (Gtk::MenuItem *)&exportieren_main_menu->items().back();
   
   ausr__stungsdokument_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("Nur sichtbares", Gtk::GMM_GTKMM_22_24(Menu_Helpers::,)AccelKey(GDK_A, Gdk::CONTROL_MASK)));
   nur_sichtbares = (Gtk::MenuItem *)&ausr__stungsdokument_menu->items().back();
   
   ausr__stungsdokument_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("Alles drucken", Gtk::GMM_GTKMM_22_24(Menu_Helpers::,)AccelKey(GDK_A, Gdk::MOD1_MASK)));
   unsichtbares_drucken = (Gtk::MenuItem *)&ausr__stungsdokument_menu->items().back();
   
   drucken1_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("Abenteurerdokument", Gtk::GMM_GTKMM_22_24(Menu_Helpers::,)AccelKey(GDK_P, Gdk::CONTROL_MASK)));
   abenteurerdokument = (Gtk::MenuItem *)&drucken1_menu->items().back();
   
   drucken1_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("Ausrüstungsdokument", *ausr__stungsdokument_menu));
   ausr__stungsdokument = (Gtk::MenuItem *)&drucken1_menu->items().back();
   
   drucken1_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("Beschreibung", Gtk::GMM_GTKMM_22_24(Menu_Helpers::,)AccelKey(GDK_B, Gdk::CONTROL_MASK)));
   beschreibung = (Gtk::MenuItem *)&drucken1_menu->items().back();
   
   drucken1_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("Alles drucken", Gtk::GMM_GTKMM_22_24(Menu_Helpers::,)AccelKey(GDK_P, Gdk::MOD1_MASK)));
   alles_drucken = (Gtk::MenuItem *)&drucken1_menu->items().back();
   
   drucken1_menu->items().push_back(Gtk::Menu_Helpers::SeparatorElem());
   trennlinie4 = (Gtk::MenuItem *)&drucken1_menu->items().back();
   
   drucken1_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("Leeres Abenteurerblatt", Gtk::GMM_GTKMM_22_24(Menu_Helpers::,)AccelKey(GDK_E, Gdk::CONTROL_MASK)));
   leeres_abenteurerblatt = (Gtk::MenuItem *)&drucken1_menu->items().back();
   
   drucken1_menu->items().push_back(Gtk::Menu_Helpers::SeparatorElem());
   trennlinie6 = (Gtk::MenuItem *)&drucken1_menu->items().back();
   
   drucken1_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("Spielleiterbogen", Gtk::GMM_GTKMM_22_24(Menu_Helpers::,)AccelKey(GDK_S, Gdk::MOD1_MASK)));
   spielleiterbogen_drucken = (Gtk::MenuItem *)&drucken1_menu->items().back();
   
   magus1_menu->items().push_back(Gtk::Menu_Helpers::ImageMenuElem("_Neuer Abenteurer", Gtk::GMM_GTKMM_22_24(Menu_Helpers::,)AccelKey(GDK_N, Gdk::MOD1_MASK), *image77));
   neuen_abenteurer1 = (Gtk::ImageMenuItem *)&magus1_menu->items().back();
   
   magus1_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("Neuer Abenteurer mit Wizard", Gtk::GMM_GTKMM_22_24(Menu_Helpers::,)AccelKey(GDK_N, Gdk::CONTROL_MASK)));
   neuer_abenteurer_mit_wizard1 = (Gtk::MenuItem *)&magus1_menu->items().back();
   
   magus1_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("Wizard beenden", Gtk::GMM_GTKMM_22_24(Menu_Helpers::,)AccelKey(GDK_W, Gdk::MOD1_MASK)));
   wizard_beenden = (Gtk::MenuItem *)&magus1_menu->items().back();
   
   magus1_menu->items().push_back(Gtk::Menu_Helpers::SeparatorElem());
   trennlinie3 = (Gtk::MenuItem *)&magus1_menu->items().back();
   
   magus1_menu->items().push_back(Gtk::Menu_Helpers::ImageMenuElem("Ö_ffnen", Gtk::GMM_GTKMM_22_24(Menu_Helpers::,)AccelKey(GDK_O, Gdk::CONTROL_MASK), *image78));
   laden1 = (Gtk::ImageMenuItem *)&magus1_menu->items().back();
   
   magus1_menu->items().push_back(Gtk::Menu_Helpers::ImageMenuElem("zuletzt geladen ...", *image79));
   zuletzt_geladen_mi = (Gtk::ImageMenuItem *)&magus1_menu->items().back();
   
   magus1_menu->items().push_back(Gtk::Menu_Helpers::ImageMenuElem("_Speichern", Gtk::GMM_GTKMM_22_24(Menu_Helpers::,)AccelKey(GDK_S, Gdk::CONTROL_MASK), *image80));
   speichern1 = (Gtk::ImageMenuItem *)&magus1_menu->items().back();
   
   magus1_menu->items().push_back(Gtk::Menu_Helpers::ImageMenuElem("Speichern _unter ...", *image81));
   speichern_unter_ = (Gtk::ImageMenuItem *)&magus1_menu->items().back();
   
   magus1_menu->items().push_back(Gtk::Menu_Helpers::ImageMenuElem("Exportieren", *image82, *exportieren_main_menu));
   exportieren_main = (Gtk::ImageMenuItem *)&magus1_menu->items().back();
   
   magus1_menu->items().push_back(Gtk::Menu_Helpers::SeparatorElem());
   trennlinie1 = (Gtk::MenuItem *)&magus1_menu->items().back();
   
   magus1_menu->items().push_back(Gtk::Menu_Helpers::ImageMenuElem("_Drucken", *image83, *drucken1_menu));
   drucken1 = (Gtk::ImageMenuItem *)&magus1_menu->items().back();
   
   magus1_menu->items().push_back(Gtk::Menu_Helpers::SeparatorElem());
   trennlinie2 = (Gtk::MenuItem *)&magus1_menu->items().back();
   
   magus1_menu->items().push_back(Gtk::Menu_Helpers::ImageMenuElem("S_chließen", Gtk::GMM_GTKMM_22_24(Menu_Helpers::,)AccelKey(GDK_W, Gdk::CONTROL_MASK), *image84));
   schlie__en1 = (Gtk::ImageMenuItem *)&magus1_menu->items().back();
   
   magus1_menu->items().push_back(Gtk::Menu_Helpers::ImageMenuElem("_Beenden", Gtk::GMM_GTKMM_22_24(Menu_Helpers::,)AccelKey(GDK_Q, Gdk::CONTROL_MASK), *image85));
   beenden1 = (Gtk::ImageMenuItem *)&magus1_menu->items().back();
   
   magus1_menu->items().push_back(Gtk::Menu_Helpers::SeparatorElem());
   trennlinie5 = (Gtk::MenuItem *)&magus1_menu->items().back();
   
   bearbeiten1_menu->items().push_back(Gtk::Menu_Helpers::ImageMenuElem("_Rückgängig", Gtk::GMM_GTKMM_22_24(Menu_Helpers::,)AccelKey(GDK_Z, Gdk::CONTROL_MASK), *image86));
   r__ckg__ngig1 = (Gtk::ImageMenuItem *)&bearbeiten1_menu->items().back();
   
   bearbeiten1_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("_Erneut/Vorwärts", Gtk::GMM_GTKMM_22_24(Menu_Helpers::,)AccelKey(GDK_R, Gdk::CONTROL_MASK)));
   erneut_vorw__rts1 = (Gtk::MenuItem *)&bearbeiten1_menu->items().back();
   
   bearbeiten1_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("Geschichte"));
   geschichte = (Gtk::MenuItem *)&bearbeiten1_menu->items().back();
   
   hilfe1_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("Anleitung"));
   anleitung_menu = (Gtk::MenuItem *)&hilfe1_menu->items().back();
   
   hilfe1_menu->items().push_back(Gtk::Menu_Helpers::ImageMenuElem("Über MAGuS", *image87));
   info_credits_menu = (Gtk::ImageMenuItem *)&hilfe1_menu->items().back();
   
   hilfe1_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("Neues an MAGuS"));
   news_menu = (Gtk::MenuItem *)&hilfe1_menu->items().back();
   
   main_menubar->items().push_back(Gtk::Menu_Helpers::MenuElem("_Datei", Gtk::GMM_GTKMM_22_24(Menu_Helpers::,)AccelKey(GDK_D, Gdk::CONTROL_MASK), *magus1_menu));
   magus1 = (Gtk::MenuItem *)&main_menubar->items().back();
   
   main_menubar->items().push_back(Gtk::Menu_Helpers::MenuElem("_Bearbeiten", Gtk::GMM_GTKMM_22_24(Menu_Helpers::,)AccelKey(GDK_B, Gdk::CONTROL_MASK), *bearbeiten1_menu));
   bearbeiten1 = (Gtk::MenuItem *)&main_menubar->items().back();
   
   main_menubar->items().push_back(Gtk::Menu_Helpers::MenuElem("_Abenteurer"));
   abenteurer_mi = (Gtk::MenuItem *)&main_menubar->items().back();
   
   main_menubar->items().push_back(Gtk::Menu_Helpers::MenuElem("_Hilfe", Gtk::GMM_GTKMM_22_24(Menu_Helpers::,)AccelKey(GDK_H, Gdk::CONTROL_MASK), *hilfe1_menu));
   hilfe1 = (Gtk::MenuItem *)&main_menubar->items().back();
   button_neuer_charakter->set_flags(Gtk::CAN_FOCUS);
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   toolitem1->set_visible_horizontal(true);
   toolitem1->set_visible_vertical(true);
   toolitem1->set_is_important(false);
   toolitem1->set_homogeneous(false);
   toolitem1->set_expand(false);
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   toolitem1->add(*button_neuer_charakter);
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   button9->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*button9, "Abenteurer laden", "");
   button9->set_visible_horizontal(true);
   button9->set_visible_vertical(true);
   button9->set_is_important(false);
   button9->set_homogeneous(true);
   button9->set_expand(false);
   button9->set_tooltip(_tooltips, "Abenteurer laden");
#endif //
   button9_img->show();
   button_speichern->set_flags(Gtk::CAN_FOCUS);
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   toolitem2->set_visible_horizontal(true);
   toolitem2->set_visible_vertical(true);
   toolitem2->set_is_important(false);
   toolitem2->set_homogeneous(false);
   toolitem2->set_expand(false);
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   toolitem2->add(*button_speichern);
#endif //
   button_main_drucken->set_flags(Gtk::CAN_FOCUS);
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   toolitem3->set_visible_horizontal(true);
   toolitem3->set_visible_vertical(true);
   toolitem3->set_is_important(false);
   toolitem3->set_homogeneous(false);
   toolitem3->set_expand(false);
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   toolitem3->add(*button_main_drucken);
#endif //
   button_undo->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*button_undo, "Letzte Änderung rückgängig machen.", "");
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   toolitem4->set_visible_horizontal(true);
   toolitem4->set_visible_vertical(true);
   toolitem4->set_is_important(false);
   toolitem4->set_homogeneous(false);
   toolitem4->set_expand(false);
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   toolitem4->add(*button_undo);
#endif //
   button_redo->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*button_redo, "Rückgängmachen rückgängig machen", "");
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   toolitem5->set_visible_horizontal(true);
   toolitem5->set_visible_vertical(true);
   toolitem5->set_is_important(false);
   toolitem5->set_homogeneous(false);
   toolitem5->set_expand(false);
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   toolitem5->add(*button_redo);
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   separatortoolitem1->set_visible_horizontal(true);
   separatortoolitem1->set_visible_vertical(true);
   separatortoolitem1->set_homogeneous(false);
   separatortoolitem1->set_expand(false);
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   button_menu->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*button_menu, "Dieses Menü ist auch über die rechte Maustaste (an fast jeder beliebiegen Stelle im Programm) verfügbar.", "");
   button_menu->set_visible_horizontal(true);
   button_menu->set_visible_vertical(true);
   button_menu->set_is_important(false);
   button_menu->set_homogeneous(true);
   button_menu->set_expand(false);
   button_menu->set_tooltip(_tooltips, "Dieses Menü ist auch über die rechte Maustaste (an fast jeder beliebiegen Stelle im Programm) verfügbar.");
#endif //
   button_menu_img->show();
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   button_info->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*button_info, "Info", "");
   button_info->set_visible_horizontal(true);
   button_info->set_visible_vertical(true);
   button_info->set_is_important(false);
   button_info->set_homogeneous(true);
   button_info->set_expand(false);
   button_info->set_tooltip(_tooltips, "Info");
#endif //
   button_info_img->show();
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   button_html_hilfe->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*button_html_hilfe, "HTML Hilfe", "");
   button_html_hilfe->set_visible_horizontal(true);
   button_html_hilfe->set_visible_vertical(true);
   button_html_hilfe->set_is_important(false);
   button_html_hilfe->set_homogeneous(true);
   button_html_hilfe->set_expand(false);
   button_html_hilfe->set_tooltip(_tooltips, "HTML Hilfe");
#endif //
   button_html_hilfe_img->show();
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   separatortoolitem2->set_visible_horizontal(true);
   separatortoolitem2->set_visible_vertical(true);
   separatortoolitem2->set_homogeneous(false);
   separatortoolitem2->set_expand(false);
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   button_schliessen->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*button_schliessen, "Schließen", "");
   button_schliessen->set_visible_horizontal(true);
   button_schliessen->set_visible_vertical(true);
   button_schliessen->set_is_important(false);
   button_schliessen->set_homogeneous(true);
   button_schliessen->set_expand(false);
   button_schliessen->set_tooltip(_tooltips, "Schließen");
#endif //
   button_schliessen_img->show();
   toolbar_top->set_tooltips(true);
   toolbar_top->set_toolbar_style(Gtk::TOOLBAR_BOTH);
   toolbar_top->set_orientation(Gtk::ORIENTATION_HORIZONTAL);
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   toolbar_top->set_show_arrow(true);
#endif //
   griff_toolbar_top->set_shadow_type(Gtk::SHADOW_OUT);
   griff_toolbar_top->set_handle_position(Gtk::POS_LEFT);
   griff_toolbar_top->set_snap_edge(Gtk::POS_TOP);
   griff_toolbar_top->add(*toolbar_top);
   image77->set_alignment(0.5,0.5);
   image77->set_padding(0,0);
   image78->set_alignment(0.5,0.5);
   image78->set_padding(0,0);
   image79->set_alignment(0.5,0.5);
   image79->set_padding(0,0);
   image80->set_alignment(0.5,0.5);
   image80->set_padding(0,0);
   image81->set_alignment(0.5,0.5);
   image81->set_padding(0,0);
   image82->set_alignment(0.5,0.5);
   image82->set_padding(0,0);
   image83->set_alignment(0.5,0.5);
   image83->set_padding(0,0);
   image84->set_alignment(0.5,0.5);
   image84->set_padding(0,0);
   image85->set_alignment(0.5,0.5);
   image85->set_padding(0,0);
   image86->set_alignment(0.5,0.5);
   image86->set_padding(0,0);
   image87->set_alignment(0.5,0.5);
   image87->set_padding(0,0);
   handlebox_menu->set_shadow_type(Gtk::SHADOW_OUT);
   handlebox_menu->set_handle_position(Gtk::POS_LEFT);
   handlebox_menu->set_snap_edge(Gtk::POS_TOP);
   handlebox_menu->add(*main_menubar);
   grundwerte_background->set_events(Gdk::BUTTON_PRESS_MASK);
   grundwerte_background->add(*table_grundwerte);
   frame4->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame4->set_label_align(0,0.5);
   frame4->add(*grundwerte_background);
   pixmap_notebook_grundwerte->set_alignment(0.5,0.5);
   pixmap_notebook_grundwerte->set_padding(0,0);
   label_notebook_grundwerte->set_alignment(0.5,0.5);
   label_notebook_grundwerte->set_padding(0,0);
   label_notebook_grundwerte->set_justify(Gtk::JUSTIFY_CENTER);
   label_notebook_grundwerte->set_line_wrap(false);
   label_notebook_grundwerte->set_use_markup(false);
   label_notebook_grundwerte->set_selectable(false);
   vbox51->pack_start(*pixmap_notebook_grundwerte);
   vbox51->pack_start(*label_notebook_grundwerte, Gtk::PACK_SHRINK, 0);
   _tooltips.set_tip(*eventbox_grundwerte, "Grundwerte", "");
   eventbox_grundwerte->add(*vbox51);
   frame_lernschema->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame_lernschema->set_label_align(0,0.5);
   frame_lernschema->add(*table_lernschema);
   pixmap_notebook_lernen->set_alignment(0.5,0.5);
   pixmap_notebook_lernen->set_padding(0,0);
   label_notebook_lernen->set_alignment(0.5,0.5);
   label_notebook_lernen->set_padding(0,0);
   label_notebook_lernen->set_justify(Gtk::JUSTIFY_CENTER);
   label_notebook_lernen->set_line_wrap(false);
   label_notebook_lernen->set_use_markup(false);
   label_notebook_lernen->set_selectable(false);
   vbox52->pack_start(*pixmap_notebook_lernen);
   vbox52->pack_start(*label_notebook_lernen, Gtk::PACK_SHRINK, 0);
   _tooltips.set_tip(*eventbox_lernen, "Lernschema", "");
   eventbox_lernen->add(*vbox52);
   frame_steigern->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame_steigern->set_label_align(0,0.5);
   frame_steigern->add(*table_steigern);
   pixmap_notebook_steigern->set_alignment(0.5,0.5);
   pixmap_notebook_steigern->set_padding(0,0);
   label_notebook_steigern->set_alignment(0.5,0.5);
   label_notebook_steigern->set_padding(0,0);
   label_notebook_steigern->set_justify(Gtk::JUSTIFY_CENTER);
   label_notebook_steigern->set_line_wrap(false);
   label_notebook_steigern->set_use_markup(false);
   label_notebook_steigern->set_selectable(false);
   vbox53->pack_start(*pixmap_notebook_steigern);
   vbox53->pack_start(*label_notebook_steigern, Gtk::PACK_SHRINK, 0);
   _tooltips.set_tip(*eventbox_steigern, "Steigern", "");
   eventbox_steigern->add(*vbox53);
   pixmap_notebook_beschreibung->set_alignment(0.5,0.5);
   pixmap_notebook_beschreibung->set_padding(0,0);
   label_notebook_beschreibung->set_alignment(0.5,0.5);
   label_notebook_beschreibung->set_padding(0,0);
   label_notebook_beschreibung->set_justify(Gtk::JUSTIFY_CENTER);
   label_notebook_beschreibung->set_line_wrap(false);
   label_notebook_beschreibung->set_use_markup(false);
   label_notebook_beschreibung->set_selectable(false);
   vbox54->pack_start(*pixmap_notebook_beschreibung);
   vbox54->pack_start(*label_notebook_beschreibung, Gtk::PACK_SHRINK, 0);
   _tooltips.set_tip(*eventbox_beschreibung, "Beschreibung des Abenteurers und/oder des Hintergrundes", "");
   eventbox_beschreibung->add(*vbox54);
   pixmap_notebook_ausruestung->set_alignment(0.5,0.5);
   pixmap_notebook_ausruestung->set_padding(0,0);
   label_notebook_ausruestung->set_alignment(0.5,0.5);
   label_notebook_ausruestung->set_padding(0,0);
   label_notebook_ausruestung->set_justify(Gtk::JUSTIFY_CENTER);
   label_notebook_ausruestung->set_line_wrap(false);
   label_notebook_ausruestung->set_use_markup(false);
   label_notebook_ausruestung->set_selectable(false);
   vbox55->pack_start(*pixmap_notebook_ausruestung);
   vbox55->pack_start(*label_notebook_ausruestung, Gtk::PACK_SHRINK, 0);
   _tooltips.set_tip(*eventbox_ausruestung, "Ausrüstung", "");
   eventbox_ausruestung->add(*vbox55);
   pixmap_notebook_optionen->set_alignment(0.5,0.5);
   pixmap_notebook_optionen->set_padding(0,0);
   label_notebook_optionen->set_alignment(0.5,0.5);
   label_notebook_optionen->set_padding(0,0);
   label_notebook_optionen->set_justify(Gtk::JUSTIFY_CENTER);
   label_notebook_optionen->set_line_wrap(false);
   label_notebook_optionen->set_use_markup(false);
   label_notebook_optionen->set_selectable(false);
   vbox56->pack_start(*pixmap_notebook_optionen);
   vbox56->pack_start(*label_notebook_optionen, Gtk::PACK_SHRINK, 0);
   _tooltips.set_tip(*eventbox_optionen, "Optionen", "");
   eventbox_optionen->add(*vbox56);
   pixmap_original_tux->set_alignment(0.5,0.5);
   pixmap_original_tux->set_padding(0,0);
   label_notebook_info->set_alignment(0.5,0.5);
   label_notebook_info->set_padding(0,0);
   label_notebook_info->set_justify(Gtk::JUSTIFY_CENTER);
   label_notebook_info->set_line_wrap(false);
   label_notebook_info->set_use_markup(false);
   label_notebook_info->set_selectable(false);
   vbox66->pack_start(*pixmap_original_tux);
   vbox66->pack_start(*label_notebook_info, Gtk::PACK_SHRINK, 0);
   _tooltips.set_tip(*eventbox_credits, "Über dieses Programm", "");
   eventbox_credits->add(*vbox66);
   list_news->set_headers_visible(false);
   list_news->set_rules_hint(false);
   list_news->set_reorderable(false);
   list_news->set_enable_search(false);
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=5
   list_news->set_fixed_height_mode(false);
   list_news->set_hover_selection(false);
   list_news->set_hover_expand(false);
#endif //
   viewport38->set_shadow_type(Gtk::SHADOW_IN);
   viewport38->add(*list_news);
   scrolledwindow76->set_shadow_type(Gtk::SHADOW_NONE);
   scrolledwindow76->set_policy(Gtk::POLICY_AUTOMATIC, Gtk::POLICY_AUTOMATIC);
   scrolledwindow76->property_window_placement().set_value(Gtk::CORNER_TOP_LEFT);
   scrolledwindow76->add(*viewport38);
   table139->set_row_spacings(0);
   table139->set_col_spacings(0);
   table139->attach(*scrolledwindow76, 0, 1, 0, 1, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, 0, 0);
   pixmap175->set_alignment(0.5,0.5);
   pixmap175->set_padding(0,0);
   label_notebook_news->set_alignment(0.5,0.5);
   label_notebook_news->set_padding(0,0);
   label_notebook_news->set_justify(Gtk::JUSTIFY_CENTER);
   label_notebook_news->set_line_wrap(false);
   label_notebook_news->set_use_markup(false);
   label_notebook_news->set_selectable(false);
   vbox57->pack_start(*pixmap175);
   vbox57->pack_start(*label_notebook_news, Gtk::PACK_SHRINK, 0);
   _tooltips.set_tip(*eventbox_geschichte, "News & Geschichte", "");
   eventbox_geschichte->add(*vbox57);
   pixmap167->set_alignment(0.5,0.5);
   pixmap167->set_padding(0,0);
   label603->set_alignment(0.5,0.5);
   label603->set_padding(0,0);
   label603->set_justify(Gtk::JUSTIFY_CENTER);
   label603->set_line_wrap(false);
   label603->set_use_markup(false);
   label603->set_selectable(false);
   vbox65->pack_start(*pixmap167);
   vbox65->pack_start(*label603, Gtk::PACK_SHRINK, 0);
   _tooltips.set_tip(*eventbox_zufall, "einen Abenteurer vollautomatisch erwürfeln", "");
   eventbox_zufall->add(*vbox65);
   notebook_main->set_flags(Gtk::CAN_FOCUS);
   notebook_main->set_show_tabs(true);
   notebook_main->set_show_border(true);
   notebook_main->set_tab_pos(Gtk::POS_TOP);
   notebook_main->set_scrollable(false);
   notebook_main->append_page(*frame4, *eventbox_grundwerte);
   notebook_main->pages().back().set_tab_label_packing(false, true, Gtk::PACK_START);
   notebook_main->append_page(*frame_lernschema, *eventbox_lernen);
   notebook_main->pages().back().set_tab_label_packing(false, true, Gtk::PACK_START);
   notebook_main->append_page(*frame_steigern, *eventbox_steigern);
   notebook_main->pages().back().set_tab_label_packing(false, true, Gtk::PACK_START);
   notebook_main->append_page(*table_beschreibung, *eventbox_beschreibung);
   notebook_main->pages().back().set_tab_label_packing(false, true, Gtk::PACK_START);
   notebook_main->append_page(*table_ausruestung, *eventbox_ausruestung);
   notebook_main->pages().back().set_tab_label_packing(false, true, Gtk::PACK_START);
   notebook_main->append_page(*table_optionen, *eventbox_optionen);
   notebook_main->pages().back().set_tab_label_packing(false, true, Gtk::PACK_START);
   notebook_main->append_page(*Midgard_Info, *eventbox_credits);
   notebook_main->pages().back().set_tab_label_packing(false, true, Gtk::PACK_START);
   notebook_main->append_page(*table139, *eventbox_geschichte);
   notebook_main->pages().back().set_tab_label_packing(false, true, Gtk::PACK_START);
   notebook_main->append_page(*table_zufall, *eventbox_zufall);
   notebook_main->pages().back().set_tab_label_packing(false, true, Gtk::PACK_START);
   label_status->set_alignment(0,0.5);
   label_status->set_padding(0,2);
   label_status->set_justify(Gtk::JUSTIFY_LEFT);
   label_status->set_line_wrap(true);
   label_status->set_use_markup(false);
   label_status->set_selectable(false);
   label_wizard->set_alignment(0.01,0.5);
   label_wizard->set_padding(0,2);
   label_wizard->set_justify(Gtk::JUSTIFY_LEFT);
   label_wizard->set_line_wrap(true);
   label_wizard->set_use_markup(false);
   label_wizard->set_selectable(false);
   vbox64->pack_start(*label_status);
   vbox64->pack_start(*label_wizard, Gtk::PACK_SHRINK, 0);
   frame_regionen_status->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame_regionen_status->set_label_align(0,0.5);
   pixmap176->set_alignment(0.5,0.5);
   pixmap176->set_padding(0,0);
   _tooltips.set_tip(*eventbox_Original_Midgard, "Dieses Icon zeigt an, daß die Originalregeln verwendet werden.", "");
   eventbox_Original_Midgard->add(*pixmap176);
   pixmap164->set_alignment(0.5,0.5);
   pixmap164->set_padding(0,0);
   _tooltips.set_tip(*eventbox_NSC_aktiv, "Dieses Icon zeigt an, daß der NSC Modus eingeschaltet ist.", "");
   eventbox_NSC_aktiv->add(*pixmap164);
   pixmap_status_wizard->set_alignment(0.5,0.5);
   pixmap_status_wizard->set_padding(0,0);
   eventbox_wizard_aktiv->set_events(Gdk::BUTTON_RELEASE_MASK);
   _tooltips.set_tip(*eventbox_wizard_aktiv, "Dieses Icon zeigt an, daß der Wizard aktiv ist.", "");
   eventbox_wizard_aktiv->add(*pixmap_status_wizard);
   frame_haus_status->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame_haus_status->set_label_align(0,0.5);
   hbox_status->pack_start(*vbox64);
   hbox_status->pack_start(*frame_regionen_status, Gtk::PACK_SHRINK, 0);
   hbox_status->pack_start(*eventbox_Original_Midgard, Gtk::PACK_SHRINK, 0);
   hbox_status->pack_start(*eventbox_NSC_aktiv, Gtk::PACK_SHRINK, 0);
   hbox_status->pack_start(*eventbox_wizard_aktiv, Gtk::PACK_SHRINK, 0);
   hbox_status->pack_start(*frame_haus_status, Gtk::PACK_SHRINK, 0);
   handlebox_status->set_shadow_type(Gtk::SHADOW_OUT);
   handlebox_status->set_handle_position(Gtk::POS_LEFT);
   handlebox_status->set_snap_edge(Gtk::POS_LEFT);
   handlebox_status->add(*hbox_status);
   main_table->set_row_spacings(0);
   main_table->set_col_spacings(0);
   main_table->attach(*griff_toolbar_top, 0, 1, 1, 2, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   main_table->attach(*handlebox_menu, 0, 1, 0, 1, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   main_table->attach(*notebook_main, 0, 1, 2, 3, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, 0, 0);
   main_table->attach(*handlebox_status, 0, 1, 3, 4, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, Gtk::SHRINK, 0, 0);
   midgard_CG->set_events(Gdk::BUTTON_PRESS_MASK);
   midgard_CG->set_sensitive(false);
   midgard_CG->set_title("Magus");
   midgard_CG->set_modal(false);
   midgard_CG->property_window_position().set_value(Gtk::WIN_POS_NONE);
   midgard_CG->set_resizable(true);
   midgard_CG->property_destroy_with_parent().set_value(false);
   midgard_CG->add(*main_table);
   button_neuer_charakter->show();
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   toolitem1->show();
#endif //
   button9->show();
   button_speichern->show();
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   toolitem2->show();
#endif //
   button_main_drucken->show();
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   toolitem3->show();
#endif //
   button_undo->show();
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   toolitem4->show();
#endif //
   button_redo->show();
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   toolitem5->show();
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   separatortoolitem1->show();
#endif //
   button_menu->show();
   button_info->show();
   button_html_hilfe->show();
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   separatortoolitem2->show();
#endif //
   button_schliessen->show();
   toolbar_top->show();
   griff_toolbar_top->show();
   image77->show();
   neuen_abenteurer1->show();
   neuer_abenteurer_mit_wizard1->show();
   wizard_beenden->show();
   trennlinie3->show();
   image78->show();
   laden1->show();
   image79->show();
   zuletzt_geladen_mi->show();
   image80->show();
   speichern1->show();
   image81->show();
   speichern_unter_->show();
   image82->show();
   exportieren->show();
   exportieren_ranas_pdf_dokumente->show();
   exportieren_main->show();
   trennlinie1->show();
   image83->show();
   abenteurerdokument->show();
   nur_sichtbares->show();
   unsichtbares_drucken->show();
   ausr__stungsdokument->show();
   beschreibung->show();
   alles_drucken->show();
   trennlinie4->show();
   leeres_abenteurerblatt->show();
   trennlinie6->show();
   spielleiterbogen_drucken->show();
   drucken1->show();
   trennlinie2->show();
   image84->show();
   schlie__en1->show();
   image85->show();
   beenden1->show();
   trennlinie5->show();
   magus1->show();
   image86->show();
   r__ckg__ngig1->show();
   erneut_vorw__rts1->show();
   geschichte->show();
   bearbeiten1->show();
   abenteurer_mi->show();
   anleitung_menu->show();
   image87->show();
   info_credits_menu->show();
   news_menu->show();
   hilfe1->show();
   main_menubar->show();
   handlebox_menu->show();
   grundwerte_background->show();
   frame4->show();
   pixmap_notebook_grundwerte->show();
   label_notebook_grundwerte->show();
   vbox51->show();
   eventbox_grundwerte->show();
   frame_lernschema->show();
   pixmap_notebook_lernen->show();
   label_notebook_lernen->show();
   vbox52->show();
   eventbox_lernen->show();
   frame_steigern->show();
   pixmap_notebook_steigern->show();
   label_notebook_steigern->show();
   vbox53->show();
   eventbox_steigern->show();
   pixmap_notebook_beschreibung->show();
   label_notebook_beschreibung->show();
   vbox54->show();
   eventbox_beschreibung->show();
   pixmap_notebook_ausruestung->show();
   label_notebook_ausruestung->show();
   vbox55->show();
   eventbox_ausruestung->show();
   pixmap_notebook_optionen->show();
   label_notebook_optionen->show();
   vbox56->show();
   eventbox_optionen->show();
   pixmap_original_tux->show();
   label_notebook_info->show();
   vbox66->show();
   eventbox_credits->show();
   list_news->show();
   viewport38->show();
   scrolledwindow76->show();
   table139->show();
   pixmap175->show();
   label_notebook_news->show();
   vbox57->show();
   eventbox_geschichte->show();
   pixmap167->show();
   label603->show();
   vbox65->show();
   eventbox_zufall->show();
   notebook_main->show();
   label_status->show();
   label_wizard->show();
   vbox64->show();
   frame_regionen_status->show();
   pixmap176->show();
   eventbox_Original_Midgard->show();
   pixmap164->show();
   eventbox_NSC_aktiv->show();
   pixmap_status_wizard->show();
   eventbox_wizard_aktiv->show();
   frame_haus_status->show();
   hbox_status->show();
   handlebox_status->show();
   main_table->show();
   button9->signal_clicked().connect(SigC::slot(*this, &midgard_CG_glade::on_laden), false);
   button_undo->signal_clicked().connect(SigC::slot(*this, &midgard_CG_glade::on_button_undo_clicked));
   button_undo->signal_secondpressed().connect(SigC::slot(*this, &midgard_CG_glade::on_undo_secondpressed));
   button_redo->signal_clicked().connect(SigC::slot(*this, &midgard_CG_glade::on_button_redo_clicked));
   button_redo->signal_secondpressed().connect(SigC::slot(*this, &midgard_CG_glade::on_redo_secondpressed));
   button_menu->signal_clicked().connect(SigC::slot(*this, &midgard_CG_glade::on_button_menu), false);
   button_info->signal_clicked().connect(SigC::slot(*this, &midgard_CG_glade::on_button_info_clicked), false);
   button_html_hilfe->signal_clicked().connect(SigC::slot(*this, &midgard_CG_glade::on_button_html_hilfe_clicked), false);
   button_schliessen->signal_clicked().connect(SigC::slot(*this, &midgard_CG_glade::on_schliessen_CG_clicked), false);
   neuen_abenteurer1->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::on_neuer_charakter_clicked), false);
   neuer_abenteurer_mit_wizard1->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::on_neuer_abenteurer_mit_wizard_activate), false);
   wizard_beenden->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::on_wizard_beenden_activate), false);
   laden1->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::xml_import_auswahl), false);
   speichern1->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::save_existing_filename), false);
   speichern_unter_->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::xml_export_auswahl), false);
   exportieren->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::on_exportieren_activate), false);
   exportieren_ranas_pdf_dokumente->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::on_exportieren_ranas_pdf_dokumente_activate), false);
   abenteurerdokument->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::on_abenteurerdokument_drucken), false);
   nur_sichtbares->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::on_nur_sichtbares_drucken), false);
   unsichtbares_drucken->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::on_auch_unsichtbares_drucken), false);
   beschreibung->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::on_beschreibung_drucken), false);
   alles_drucken->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::on_alles_drucken), false);
   leeres_abenteurerblatt->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::on_leeres_abenteurerdokument_drucken), false);
   spielleiterbogen_drucken->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::on_spielleiterbogen_drucken_activate), false);
   schlie__en1->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::on_schlie__en1_activate), false);
   beenden1->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::on_schliessen_CG_clicked), false);
   r__ckg__ngig1->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::on_button_undo_clicked), false);
   erneut_vorw__rts1->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::on_button_redo_clicked), false);
   geschichte->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::menu_geschichte_selected), false);
   anleitung_menu->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::on_anleitung_menu_activate), false);
   info_credits_menu->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::on_info_credits_menu_activate), false);
   news_menu->signal_activate().connect(SigC::slot(*this, &midgard_CG_glade::on_news_menu_activate), false);
   grundwerte_background->signal_realize().connect(SigC::slot(*this, &midgard_CG_glade::grundwerte_background_create), true);
   grundwerte_background->signal_button_press_event().connect(SigC::slot(*this, &midgard_CG_glade::werte_edit_click), false);
   eventbox_grundwerte->signal_button_release_event().connect(SigC::slot(*this, &midgard_CG_glade::on_eventbox_grundwerte_button_release_event), false);
   eventbox_lernen->signal_button_release_event().connect(SigC::slot(*this, &midgard_CG_glade::on_eventbox_lernen_button_release_event), false);
   eventbox_steigern->signal_button_release_event().connect(SigC::slot(*this, &midgard_CG_glade::on_eventbox_steigern_button_release_event), false);
   eventbox_beschreibung->signal_button_release_event().connect(SigC::slot(*this, &midgard_CG_glade::on_eventbox_beschreibung_button_release_event), false);
   eventbox_ausruestung->signal_button_release_event().connect(SigC::slot(*this, &midgard_CG_glade::on_eventbox_ausruestung_button_release_event), false);
   eventbox_optionen->signal_button_release_event().connect(SigC::slot(*this, &midgard_CG_glade::on_eventbox_optionen_button_release_event), false);
   eventbox_credits->signal_button_release_event().connect(SigC::slot(*this, &midgard_CG_glade::on_eventbox_credits_button_release_event), false);
   eventbox_geschichte->signal_button_release_event().connect(SigC::slot(*this, &midgard_CG_glade::on_eventbox_geschichte_button_release_event), false);
   eventbox_zufall->signal_button_release_event().connect(SigC::slot(*this, &midgard_CG_glade::on_eventbox_zufall_button_release_event), false);
   notebook_main->signal_switch_page().connect(SigC::slot(*this, &midgard_CG_glade::on_notebook_main_switch_page), true);
   eventbox_wizard_aktiv->signal_button_release_event().connect(SigC::slot(*this, &midgard_CG_glade::wizard_aktiv_button_release_event), false);
   midgard_CG->signal_delete_event().connect(SigC::slot(*this, &midgard_CG_glade::on_midgard_CG_delete_event), false);
   midgard_CG->signal_button_press_event().connect(SigC::slot(*this, &midgard_CG_glade::on_eventbox_MCG_button_press_event), false);
}

midgard_CG_glade::~midgard_CG_glade()
{  delete button_neuer_charakter;
   delete button_speichern;
   delete button_main_drucken;
   delete button_undo;
   delete button_redo;
   delete gmm_data;
}
