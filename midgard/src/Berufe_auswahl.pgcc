/*  Midgard Character Generator
 *  Copyright (C) 2001 Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

// generated 2001/2/10 15:15:14 CET by thoma@ig23.
// using glademm V0.5_11c
//
// newer (non customized) versions of this file go to Waffen_auswahl.cc_new

// This file is for your program, I won't touch it again!

#include "Berufe_auswahl.hh"
#include <Aux/Transaction.h>
#include <Aux/SQLerror.h>
exec sql include sqlca;
#include "midgard_CG.hh"
#include <cstring>
#include <Gtk_OStream.h>


Berufe_auswahl::Berufe_auswahl(midgard_CG* h, const styp& typ, const st_lernpunkte& l, const st_werte& werte)
{
  hauptfenster=h;
  maxpunkte = l.beruf;
  beruf_auswahl_lernpunkte->set_text(itos(maxpunkte));
  exec sql begin declare section;
   char db_beruf[100];
   int db_lernpunkte;
   char db_stand[100];
   char db_spezies[50];
   char db_voraussetzung[10];
   int db_maxp = maxpunkte;
  exec sql end declare section;
  strncpy(db_stand,werte.stand.c_str(),sizeof(db_stand));
  strncpy(db_spezies,werte.spezies.c_str(),sizeof(db_spezies));

   Transaction tr;
    // Spezielle Speziesberufe
    exec sql declare beruf_spezies cursor for
      select p.pflicht, p.lernpunkte 
      from pflicht_lernen p, berufe_voraussetzung b
      where p.pflicht=b.beruf and p.typ = :db_spezies;

    exec sql open beruf_spezies;
    SQLerror::test(__FILELINE__);
    while (true)
      {
         exec sql fetch beruf_spezies into :db_beruf,:db_lernpunkte;
         SQLerror::test(__FILELINE__,100);
         if (sqlca.sqlcode) break;
         string vorteile = Berufe_auswahl::Beruf_vorteile(db_beruf);         
         beruf.push_back(db_struct_beruf(db_lernpunkte,db_beruf,werte.spezies,
                           werte.spezies, vorteile));
      }
    exec sql close beruf_spezies;

    // Alle anderen Berufe
    exec sql declare beruf cursor for
      select distinct v.lernpunkte, v.beruf, coalesce(v.geschlecht,'')
      from berufe_stand s, berufe_voraussetzung v 
      where v.beruf = s.beruf and 
      s.stand = :db_stand and v.beruf = s.beruf
      and :db_maxp >= v.lernpunkte 
      order by lernpunkte ;
    exec sql open beruf;
    SQLerror::test(__FILELINE__);
    while (true)
      {
         exec sql fetch beruf into :db_lernpunkte, :db_beruf,
                        :db_voraussetzung;
         SQLerror::test(__FILELINE__,100);
         if (sqlca.sqlcode) break;
         string vorteile = Berufe_auswahl::Beruf_vorteile(db_beruf);         
         beruf.push_back(db_struct_beruf(db_lernpunkte,db_beruf,db_stand,
                           db_voraussetzung, vorteile));
      }
    exec sql close beruf;
    tr.close();
    Gtk::OStream os(berufe_clist_auswahl);
    for(vector<db_struct_beruf>::iterator i=beruf.begin();i!=beruf.end();++i)
      {
         if (Berufe_auswahl::berufe_voraussetzung(i->beruf,werte,typ.z)||werte.spezies!="Mensch")
          {
            os << i->lernpunkte <<"\t"<< i->voraussetzung <<"\t"
               <<i->beruf<<"\t"<<i->vorteile <<"\n";
            os.flush(&*i);
          }
      }
    for (unsigned int i=0;i<berufe_clist_auswahl->columns().size();++i)
      berufe_clist_auswahl->set_column_auto_resize(i,true);

    berufe_clist_auswahl->set_selection_mode(GTK_SELECTION_MULTIPLE);
    berufe_clist_auswahl->set_reorderable(true);

}

void Berufe_auswahl::on_berufe_clist_auswahl_select_row(gint row, gint column, GdkEvent *event)
{   
   if (maxpunkte < atoi(berufe_clist_auswahl->get_text(row,0).c_str() ))
      {
         berufe_clist_auswahl->row(row).unselect();
      }
   maxpunkte -= atoi(berufe_clist_auswahl->get_text(row,0).c_str());
   beruf_auswahl_lernpunkte->set_text(itos(maxpunkte));
}

void Berufe_auswahl::on_berufe_clist_auswahl_unselect_row(gint row, gint column, GdkEvent *event)
{   
   maxpunkte += atoi(berufe_clist_auswahl->get_text(row,0).c_str());
   beruf_auswahl_lernpunkte->set_text(itos(maxpunkte));
}

void Berufe_auswahl::on_close_berufe_clicked()
{   
   vector<st_ausgewaehlte_berufe> sab;
   for (Gtk::CList::SelectionList::iterator i=berufe_clist_auswahl->selection().begin();
         i!=berufe_clist_auswahl->selection().end();++i)
     {  
      db_struct_beruf *ptr
         =static_cast<db_struct_beruf*>(i->get_data());
         // ptr=&fert[i->get_row_num()];
       sab.push_back(st_ausgewaehlte_berufe(ptr->beruf,
                        ptr->vorteile,0));
     }
  hauptfenster->berufe_uebernehmen(sab);
  destroy();

}

bool Berufe_auswahl::berufe_voraussetzung(const string& beruf, const st_werte& werte, const string& typz)
{
  exec sql begin declare section;
   int db_st,db_ge,db_ko,db_in,db_zt,db_pa,db_au,db_sb;
   char db_geschlecht[5];
   char db_typ[5];
   char db_region[10];
   char db_beruf[30];
  exec sql end declare section;
  strncpy(db_beruf,beruf.c_str(),sizeof(db_beruf));

  exec sql select coalesce(st,'0'), coalesce(ge,'0'),
   coalesce(ko,'0'),  coalesce("in",'0'), coalesce(zt,'0'),
   coalesce(typ,'0'), coalesce(pa,'0'), coalesce(au,'0'), coalesce(sb,'0'),
   coalesce(geschlecht,''), coalesce(region,'')
   into :db_st,:db_ge,:db_ko,:db_in,:db_zt,:db_typ,:db_pa,:db_au,
      :db_sb,:db_geschlecht,:db_region
   from berufe_voraussetzung where beruf= :db_beruf limit 1;
  SQLerror::test(__FILELINE__);
//cout << beruf<<"\t->"<<db_typ<<"<-\t";
  string geschlecht = db_geschlecht;
//cout << "->"<<geschlecht<<"<- ->"<<werte.geschlecht<<"<-\n";
  if (   db_st<=werte.st &&
         db_ge<=werte.ge &&
         db_ko<=werte.ko &&
         db_in<=werte.in &&
         db_zt<=werte.zt &&
         db_pa<=werte.pa &&
         db_au<=werte.au &&
         db_sb<=werte.sb &&
         (geschlecht==werte.geschlecht || geschlecht == "") &&
         Berufe_auswahl::btyp(db_typ,typz) &&
         hauptfenster->region_check(db_region)
     )   
   return true;
  else return false ;
}

bool Berufe_auswahl::btyp(const string& typ, const string& typz)
{
//cout <<"\t"<<typz<<"\t";
 bool r;
 if       (typ=="z" && typz=="z") r=true;
 else if  (typ=="k" && typz=="n") r=true; 
 else if  (typ=="k" && typz=="j") r=true; 
 else if  (typ=="0") r=true;
 else r = false;
//cout << r<<"\n";
 return r;
}

string Berufe_auswahl::Beruf_vorteile(const string& beruf)
{
  exec sql begin declare section;
   char db_beruf[30];
   char db_vorteile[30][30];
  exec sql end declare section;
  strncpy(db_beruf,beruf.c_str(),sizeof(db_beruf));
  exec sql select coalesce(vorteil,'') into :db_vorteile from berufe_vorteile
      where beruf = :db_beruf;
  SQLerror::test(__FILELINE__,100);
  string vorteile;
  for (int i=0;i<sqlca.sqlerrd[2];++i)  
   {
     vorteile += db_vorteile[i];
     if (i!=sqlca.sqlerrd[2]-1) vorteile += ", ";
   }
//cout << db_beruf<<"\t"<<vorteile<<"\n";
  return vorteile;
}
