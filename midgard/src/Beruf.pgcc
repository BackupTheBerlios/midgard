/*  Midgard Character Generator
 *  Copyright (C) 2001-2002 Malte Thoma
 *  Copyright (C) 2002      Christof Petig 
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include "Beruf.hh"
#ifndef USE_XML
#include <Aux/Transaction.h>
#include <Aux/SQLerror.h>
exec sql include sqlca;
#endif
#include "Grundwerte.hh"
#include <gtk--/main.h>
#include "Typen.hh"

cH_Beruf::cache_t cH_Beruf::cache;

cH_Beruf::cH_Beruf(const std::string& name IF_XML(,bool create))
{
 cH_Beruf *cached(cache.lookup(name));
 if (cached) *this=*cached;
 else
#ifndef USE_XML 
  {
   *this=cH_Beruf(new Beruf(name));
   cache.Register(name,*this);
  }
#else
  cerr << "Beruf '" << name << "' nicht im Cache\n";
  if (create)
  {  static Tag t2("Beruf"); 
     // note that this Tag is shared ... works well for now
     t2.setAttr("Name",name);
     *this=cH_Beruf(&t2);
  }
  else throw NotFound();
//  assert(!"Beruf im Cache");
#endif  
}

#ifdef USE_XML
cH_Beruf::cH_Beruf(const Tag *tag)
{*this=cH_Beruf(new Beruf(tag));
 cache.Register(tag->getAttr("Name"),*this);
}
#endif

void Beruf::get_Beruf()
{
#ifndef USE_XML
  exec sql begin declare section;
   bool U,V,M,A,LAND,STADT,TYPK,TYPZ;
   char REGION[10],GESCHLECHT[10],db_vorteil[50],db_beruf[5];
   char query[1024],query2[1024];
  exec sql end declare section;
  std::string squery="select distinct coalesce(land,false), 
      coalesce(stadt,false), coalesce(u,false), coalesce(v,false), 
      coalesce(m,false), coalesce(a,false), coalesce(typ_k,false), 
      coalesce(typ_z,false),coalesce(geschlecht,''),coalesce(region,''),
      coalesce(beruf,'')
      from berufe_voraussetzung_4 where beruf ='"+Name()+"'";
  strncpy(query,squery.c_str(),sizeof(query));
  Transaction tr;
  exec sql prepare cl_beruf_ein_ from :query ;
  exec sql declare cl_beruf_ein cursor for cl_beruf_ein_ ;

  exec sql open cl_beruf_ein;
  SQLerror::test(__FILELINE__);
  while (true)   
   {
     exec sql fetch cl_beruf_ein into 
      :LAND,:STADT,:U,:V,:M,:A,:TYPK,:TYPZ,:GESCHLECHT,:REGION,:db_beruf;
     SQLerror::test(__FILELINE__,100);
     if (sqlca.sqlcode) break;
     region=REGION;
     geschlecht=GESCHLECHT;
     u=U;v=V;m=M;a=A;typ_k=TYPK;typ_z=TYPZ;stadt=STADT;land=LAND;

     std::string squery2= "select vorteil from berufe_vorteile_4 where beruf='"
                           +Name()+"'";
     strncpy(query2,squery2.c_str(),sizeof(query2));
     exec sql prepare cl_beruf2_ein_ from :query2 ;
     exec sql declare cl_beruf2_ein cursor for cl_beruf2_ein_ ;
     exec sql open cl_beruf2_ein;
     SQLerror::test(__FILELINE__);
     while(true)
      {
       exec sql fetch cl_beruf2_ein into :db_vorteil;
       SQLerror::test(__FILELINE__,100);
       if (sqlca.sqlcode) break;
       vorteile.push_back(db_vorteil);
      }     
     exec sql close cl_beruf2_ein;
   }
 exec sql close cl_beruf_ein;
 tr.close();
#else
   assert(tag);
   const Tag *Voraussetzungen=tag->find("Voraussetzungen");
   if (!Voraussetzungen) Voraussetzungen=tag; // might as well be empty
   const Tag *Stand=tag->find("Stand");
     region=tag->getAttr("Region");
     geschlecht=Voraussetzungen->getAttr("Geschlecht");
     if (!Stand) u=v=m=a=true;
     else
     {  u=Stand->getBoolAttr("Unfrei");
        v=Stand->getBoolAttr("Volk");
        m=Stand->getBoolAttr("Mittelschicht");
        a=Stand->getBoolAttr("Adel");
     }
     typ_k=Voraussetzungen->getBoolAttr("Kämpfer");
     typ_z=Voraussetzungen->getBoolAttr("Zauberer");
     stadt=Voraussetzungen->getBoolAttr("Stadt");
     land=Voraussetzungen->getBoolAttr("Land");

    const Tag *Vorteil=tag->find("Vorteil");
    if (Vorteil)
       FOR_EACH_CONST_TAG_OF(i,*Vorteil,"Fertigkeit")
          vorteile.push_back(i->getAttr("Name"));
#endif 
}


std::string Beruf::get_Vorteile() const
{
  std::string s;
  for(vector<std::string>::const_iterator i=vorteile.begin();i!=vorteile.end();++i)
   {  
     s+= (*i);
     if(i+1!=vorteile.end()) s+=", ";
   }
  return s;
}


bool Beruf::Stand(const std::string& stand) const
{
  if(stand=="Unfrei" && u) return true;
  if(stand=="Volk" && v) return true;
  if(stand=="Mittelschicht" && m) return true;
  if(stand=="Adel" && a) return true;
  return false;
}

bool Beruf::Typ(const vector<cH_Typen>& Typ) const
{
  if(Typ[0]->Beruf()=="") return true;
  else if(Typ[0]->Beruf()=="z" && typ_z ) return true; 
  else if(Typ[1]->Beruf()=="z" && typ_z ) return true; 
  else if(Typ[0]->Beruf()=="k" && typ_k ) return true; 
  else if(Typ[1]->Beruf()=="k" && typ_k ) return true; 
  return false;
}


/*
bool Beruf::Voraussetzungen(const Grundwerte& Werte,const vector<cH_Typen>& Typ) const
{
 if ( voraussetzung.st<=Werte.St() &&
      voraussetzung.gs<=Werte.Gs() &&
      voraussetzung.gw<=Werte.Gw() &&
      voraussetzung.ko<=Werte.Ko() &&
      voraussetzung.in<=Werte.In() &&
      voraussetzung.zt<=Werte.Zt() &&
      voraussetzung.au<=Werte.Au() &&
      voraussetzung.pa<=Werte.pA() &&
      voraussetzung.sb<=Werte.Sb() &&
      voraussetzung.geschlecht!=Werte.Geschlecht() &&
      voraussetzung.typ==Typ[0]->Zaubern() 
     )   
    return true;
 else return false ;
}
*/

Beruf_All::Beruf_All(Gtk::ProgressBar *progressbar)
{
#ifndef USE_XML
 exec sql begin declare section;
   char db_name[100];
   int db_size;
 exec sql end declare section;
 exec sql select count(distinct beruf) into :db_size from berufe_voraussetzung_4;
 exec sql declare BAein cursor for select beruf from berufe_voraussetzung_4;
 Transaction tr;
 exec sql open BAein;
 SQLerror::test(__FILELINE__);
 double count=0;
 while(true)
  {
   progressbar->set_percentage(count/db_size);
   while(Gtk::Main::events_pending()) Gtk::Main::iteration() ;
   exec sql fetch BAein into :db_name;
   SQLerror::test(__FILELINE__,100);
   if (sqlca.sqlcode) break;
   list_All.push_back(&*(cH_Beruf(db_name)));
   ++count;
  }
 exec sql close BAein;
 tr.close();
#else
 const Tag *berufe=xml_data->find("Berufe");
// int count=0;
 if (!berufe)
    cerr << "<Berufe><Beruf/>... nicht gefunden\n";
 else
 {  Tag::const_iterator b=berufe->begin(),e=berufe->end();
    double size=e-b;
    FOR_EACH_CONST_TAG_OF_5(i,*berufe,b,e,"Beruf")
    {  // if (!((++count)&31))
       {  progressbar->set_percentage((i-b)/size);
          while(Gtk::Main::events_pending()) Gtk::Main::iteration() ;
       }
       // sinnvoller wäre es, den Tag weiterzugeben, dann brauchen wir den oben nicht zu suchen!
// warum sowas?
//    die Klasse cH_Beruf enthält den Cache, erzeuge ich nur einen Beruf, so
//    wird er nicht in den Cache (nach Namen) aufgenommen.
//    Ich brauche aber einen cH_MidgardBasicElement, daher bilde ich einen
//    Beruf* um danach (aus dem ebenfalls MidgardBasicElement*) ein 
//    cH_MidgardBasicElement zu machen. Wow.
       list_All.push_back(&*(cH_Beruf(&*i)));
    }
 }
#endif
 progressbar->set_percentage(1);
}
