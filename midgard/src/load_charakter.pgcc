/*  Midgard Character Generator
 *  Copyright (C) 2001 Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include "midgard_CG.hh"
exec sql include sqlca;
#include <cstring>
#include <Aux/Transaction.h>
#include <Aux/SQLerror.h>
#include "Window_charakter_auswahl.hh"
#include "xml_fileselection.hh"

 
gint midgard_CG::on_laden_release_event(GdkEventButton *ev)
{
  if (ev->button==1) on_laden_clicked();
  if (ev->button==3) manage (new xml_fileselection(this,"load"));
  return false;
}
 
void midgard_CG::xml_import(const std::string& datei)
{
  std::string command = "midgard_xmlimport < "+datei;
  system(command.c_str());
  std::string strinfo = "Charakter aus Datei "+datei+" importiert\n";
  manage (new WindowInfo(strinfo));
  on_laden_clicked();  
}


void midgard_CG::on_laden_clicked()
{
 midgard_CG::on_neuer_charakter_clicked();
//  if (werte.name_charakter =="") manage (new Window_charakter_auswahl(this));
//  else midgard_CG::load_charakter();
  manage (new Window_charakter_auswahl(this));
}

void midgard_CG::select_charakter(const std::string& name, const std::string& version)
{
  werte.name_charakter=name;
  werte.version=version;
  midgard_CG::load_charakter();
  button_abg_werte->set_sensitive(true);
  button_herkunft->set_sensitive(true);
  button_sprache->set_sensitive(true);
  button_beschreibung->set_sensitive(true);
//  frame_steigern->set_sensitive(true);
//  frame_lernschema->set_sensitive(true);
  frame_steigern->show();
  frame_lernschema->show();
}


void midgard_CG::load_charakter()
{
   // Werte
   exec sql begin declare section;
//      char db_beschreibung[102400] ;
      char *db_beschreibung=0;
      char db_typ_s[5]     ;
      char db_typ_2_s[5]     ;
      int db_st = werte.st;      
      int db_ge = werte.ge;      
      int db_ko = werte.ko;      
      int db_in = werte.in;      
      int db_zt = werte.zt;      
      int db_au = werte.au;      
      int db_pa = werte.pa;      
      int db_sb = werte.sb;      
      int db_rw = werte.rw;      
      int db_hgw= werte.hgw;      
      int db_b  = werte.b;      
      int db_lp = werte.lp;      
      int db_ap = werte.ap;      
      int db_kaw= werte.kaw;      
      int db_wlw= werte.wlw;      
      int db_abwehr       = werte.abwehr_wert;      
      int db_zaubern ;
      int db_resistenz          = werte.resistenz;      
      int db_gift         = werte.gift_wert;      
      int db_bo_au_typ    = werte.bo_au_typ;      
      int db_bo_au        = werte.bo_au;      
      int db_bo_sc        = werte.bo_sc;      
      int db_bo_an        = werte.bo_an;      
      int db_bo_ab        = werte.bo_ab;      
      int db_bo_za        = werte.bo_za;      
      int db_bo_psy       = werte.bo_psy;      
      int db_bo_phs       = werte.bo_phs;      
      int db_bo_phk       = werte.bo_phk;      
      int db_bo_gi        = werte.bo_gi;      
      int db_lpbasis      = werte.lpbasis;      
      int db_alter        = werte.alter;      
      char db_gestalt[20] ;
      char db_geschlecht[5];
      int db_gewicht      = werte.gewicht;      
      int db_groesse      = werte.groesse;      
      int db_grad         = werte.grad;      
      char db_spez[30]    ;
      char db_stand[30]   ;
      char db_herkunft[50];
      char db_glaube[50]  ;
      char db_name_ch[50] ;
      char db_name_sp[50] ;
      char db_version[50] ;
      int db_gfp;
      int db_gold;
      int db_silber;
      int db_kupfer;
      char db_ruestung[20];
      int db_av_bonus, db_sl_bonus;
      char db_region[20];
      char db_region_2[20];
      char db_spezies[50];
   exec sql end declare section;

 //  db_beschreibung=0; /* Ist nötig !!! */
   strncpy(db_name_ch,werte.name_charakter.c_str(),sizeof(db_name_ch));
   strncpy(db_version,werte.version.c_str(),sizeof(db_version));

   Transaction tr;

   exec sql DECLARE cha CURSOR FOR
      select 
         charakter_name ,
         beschreibung   ,
         version        ,
         typ_s          ,
         coalesce(typ_2_s,'')          ,
         spieler_name   ,
         st             ,
         ge             ,
         ko             ,
         inn            ,
         zt             ,
         au             ,
         pa             ,
         sb             ,
         rw             ,
         hgw            ,
         b              ,
         lp             ,
         ap             ,
         kaw            ,
         wlw            ,
         abwehr         ,
         zaubern        ,
         resistenz      ,
         gift           ,
         lpbasis        ,
         alter          ,
         gestalt        ,
         geschlecht     ,
         gewicht        ,
         groesse        ,
         grad           ,
         spezialisierung,
         stand          ,
         herkunft       ,
         glaube         ,
         db_bo_au_typ   ,
         db_bo_au       ,
         db_bo_sc       ,
         db_bo_an       ,
         db_bo_ab       ,
         db_bo_za       ,
         db_bo_psy      ,
         db_bo_phs      ,
         db_bo_phk      ,
         db_bo_gi       ,
         db_gfp         ,
         gold        ,
         silber      ,
         kupfer      ,
         ruestung    ,
         spezies
      FROM charaktere WHERE charakter_name= :db_name_ch
            AND version= :db_version;

      exec sql open cha;
      SQLerror::test(__FILELINE__);

      exec sql fetch cha into 
       :db_name_ch  , 
       :db_beschreibung,
       :db_version  ,
       :db_typ_s      ,
       :db_typ_2_s      ,
       :db_name_sp  , 
       :db_st       ,
       :db_ge       ,
       :db_ko       ,
       :db_in       ,
       :db_zt       ,
       :db_au       ,
       :db_pa       ,
       :db_sb       ,
       :db_rw       ,
       :db_hgw      ,
       :db_b        ,
       :db_lp       ,
       :db_ap       ,
       :db_kaw      ,
       :db_wlw      ,
       :db_abwehr   ,
       :db_zaubern  ,
       :db_resistenz,
       :db_gift     ,
       :db_lpbasis  ,
       :db_alter    ,
       :db_gestalt  ,
       :db_geschlecht,
       :db_gewicht  ,
       :db_groesse  ,
       :db_grad     ,
       :db_spez     ,
       :db_stand    ,
       :db_herkunft ,
       :db_glaube   ,
       :db_bo_au_typ   ,
       :db_bo_au       ,
       :db_bo_sc       ,
       :db_bo_an       ,
       :db_bo_ab       ,
       :db_bo_za       ,
       :db_bo_psy      ,
       :db_bo_phs      ,
       :db_bo_phk      ,
       :db_bo_gi       ,
       :db_gfp         ,
       :db_gold        ,
       :db_silber      ,
       :db_kupfer      ,
       :db_ruestung    ,
       :db_spezies       ;
   SQLerror::test(__FILELINE__);
   exec sql close cha;

       werte.st=   db_st ;    
       werte.ge=   db_ge ;    
       werte.ko=   db_ko ;    
       werte.in=   db_in ;    
       werte.zt=   db_zt ;    
       werte.au=   db_au ;    
       werte.pa=   db_pa ;    
       werte.sb=   db_sb ;    
       werte.rw=   db_rw ;    
       werte.hgw=  db_hgw;     
       werte.b=    db_b  ;   
       werte.lp=   db_lp ;    
       werte.ap=   db_ap ;    
       werte.kaw=  db_kaw;     
       werte.wlw=  db_wlw;     
      werte.abwehr_wert= db_abwehr       ;       
       werte.zaubern_wert = itos(db_zaubern) ;
      werte.resistenz=  db_resistenz          ;      
      werte.gift_wert=   db_gift         ;     
      werte.bo_au_typ=   db_bo_au_typ    ;     
      werte.bo_au=       db_bo_au        ; 
      werte.bo_sc=       db_bo_sc        ; 
      werte.bo_an=       db_bo_an        ; 
      werte.bo_ab=       db_bo_ab        ; 
      werte.bo_za=       db_bo_za        ; 
      werte.bo_psy=      db_bo_psy       ;  
      werte.bo_phs=      db_bo_phs       ;  
      werte.bo_phk=      db_bo_phk       ;  
      werte.bo_gi=       db_bo_gi        ; 
      werte.lpbasis=     db_lpbasis      ;   
      werte.alter=       db_alter        ; 
      werte.gestalt=db_gestalt ;
      werte.geschlecht=db_geschlecht ;
      werte.gewicht=   db_gewicht      ;     
      werte.groesse=   db_groesse      ;     
      werte.grad=      db_grad         ;  
      werte.spezialisierung= db_spez ;
      werte.stand= db_stand   ;
      werte.herkunft= db_herkunft;
      werte.glaube= db_glaube ;
      werte.name_spieler= db_name_sp ;
      werte.name_charakter= db_name_ch ;
      werte.gfp = db_gfp;
      werte.beschreibung = db_beschreibung; free(db_beschreibung);
      werte.gold = db_gold;
      werte.silber = db_silber;
      werte.kupfer = db_kupfer;
      werte.ruestung = db_ruestung;
      werte.spezies  = db_spezies ;



//////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////   
   // Berufe, Fertigkeiten, Waffen und Zauber (KiDo)
   // Grundkenntnisse (Waffen)
   exec sql begin declare section;
      char db_fertigkeit[50];
      int db_wert;
      char db_art[20];
      char db_magisch[1024];
   exec sql end declare section;

   // Beruf
   strncpy(db_art,"Beruf",sizeof(db_art));
   exec sql declare beruf cursor for
      select fertigkeit, wert from charaktere_fertigkeiten
      where charakter_name= :db_name_ch 
         and version= :db_version
         and art= :db_art;
   exec sql open beruf;
   SQLerror::test(__FILELINE__);
   while(true)
      {
         exec sql fetch beruf into :db_fertigkeit, :db_wert;
         SQLerror::test(__FILELINE__,100);
         if (sqlca.sqlcode) break;
         vec_Beruf.push_back(new Data_beruf(db_fertigkeit,"",db_wert));
      } 
   exec sql close beruf;
   // angeborene Fertigkeiten
   strncpy(db_art,"ang.Fertigkeit",sizeof(db_art));
   exec sql declare an_fertigkeiten cursor for
      select fertigkeit, wert from charaktere_fertigkeiten
      where charakter_name= :db_name_ch 
         and version= :db_version
         and art= :db_art;
   exec sql open an_fertigkeiten;
   SQLerror::test(__FILELINE__);
   while(true)
      {
         exec sql fetch an_fertigkeiten into :db_fertigkeit, :db_wert;
         SQLerror::test(__FILELINE__,100);
         if (sqlca.sqlcode) break;
         vec_an_Fertigkeit.push_back(new Data_fert(db_fertigkeit,db_wert));
      } 
   exec sql close an_fertigkeit;
   // Fertigkeiten
   strncpy(db_art,"Fertigkeit",sizeof(db_art));
   exec sql declare fertigkeiten cursor for
      select fertigkeit, wert  from charaktere_fertigkeiten
      where charakter_name= :db_name_ch 
         and version= :db_version
         and art= :db_art;
   exec sql open fertigkeiten;
   SQLerror::test(__FILELINE__);
   while(true)
      {
         exec sql fetch fertigkeiten into :db_fertigkeit, :db_wert;
         SQLerror::test(__FILELINE__,100);
         if (sqlca.sqlcode) break;
         vec_Fertigkeiten.push_back(new Data_fert(db_fertigkeit,db_wert));
         std::string f = db_fertigkeit;
         if (f=="KiDo") kido_bool=true;
         if (f=="Wissen von der Magie") magie_bool=true;
      } 
   exec sql close fertigkeit;
   // Waffen
   strncpy(db_art,"Waffe",sizeof(db_art));
   exec sql declare waffen cursor for
      select fertigkeit, wert  from charaktere_fertigkeiten
      where charakter_name= :db_name_ch 
         and version= :db_version
         and art= :db_art;
   exec sql open waffen;
   SQLerror::test(__FILELINE__);
   while(true)
      {
         exec sql fetch waffen into :db_fertigkeit, :db_wert;
         SQLerror::test(__FILELINE__,100);
         if (sqlca.sqlcode) break;
         vec_Waffen.push_back(new Data_waffen(db_fertigkeit,db_wert,""));
      } 
   exec sql close waffen;
   // Besitz (Waffen)
   strncpy(db_art,"Besitz_W",sizeof(db_art));
   exec sql declare besitz_w cursor for
      select fertigkeit,coalesce(av_bonus,0),coalesce(sl_bonus,0),coalesce(region,''),coalesce(magisch,'')  
      from charaktere_fertigkeiten
      where charakter_name= :db_name_ch 
         and version= :db_version
         and art= :db_art;
   exec sql open besitz_w;
   SQLerror::test(__FILELINE__);
   while(true)
      {
         exec sql fetch besitz_w into :db_fertigkeit, :db_av_bonus ,:db_sl_bonus, :db_region, :db_magisch;
         SQLerror::test(__FILELINE__,100);
         if (sqlca.sqlcode) break;
         std::string wa = get_region_waffen(db_fertigkeit,db_region,2);         
         vec_Waffen_besitz.push_back(new Data_waffen(wa,db_fertigkeit,db_region,db_av_bonus,db_sl_bonus,db_magisch));
      } 
   exec sql close besitz_w;

   // Zauber
   strncpy(db_art,"Zauber",sizeof(db_art));
   exec sql declare zauber cursor for
      select fertigkeit, wert  from charaktere_fertigkeiten
      where charakter_name= :db_name_ch 
         and version= :db_version
         and art= :db_art;
   exec sql open zauber;
   SQLerror::test(__FILELINE__);
   while(true)
      {
         exec sql fetch zauber into :db_fertigkeit, :db_wert ;
         SQLerror::test(__FILELINE__,100);
         if (sqlca.sqlcode) break;
         vec_Zauber.push_back(new Data_zauber(db_fertigkeit,db_wert));
      } 
   exec sql close zauber;

   // Zauber
   strncpy(db_art,"Zaubermittel",sizeof(db_art));
   exec sql declare zauberm cursor for
      select fertigkeit, wert  from charaktere_fertigkeiten
      where charakter_name= :db_name_ch 
         and version= :db_version
         and art= :db_art;
   exec sql open zauberm;
   SQLerror::test(__FILELINE__);
   while(true)
      {
         exec sql fetch zauberm into :db_fertigkeit, :db_wert ;
         SQLerror::test(__FILELINE__,100);
         if (sqlca.sqlcode) break;
         std::string stufe = itos(db_wert); 
         if (db_wert==99) stufe = "G";
         vec_Zaubermittel.push_back(new Data_zaubermittel(stufe,db_fertigkeit));
      } 
   exec sql close zauberm;
//   get_Zaubermittel(vec_Zaubermittel);

   // KiDo
   strncpy(db_art,"KiDo",sizeof(db_art));
   exec sql declare kido cursor for
      select fertigkeit, wert  from charaktere_fertigkeiten
      where charakter_name= :db_name_ch 
         and version= :db_version
         and art= :db_art;
   exec sql open kido;
   SQLerror::test(__FILELINE__);
   while(true)
      {
         exec sql fetch kido into :db_fertigkeit, :db_wert ;
         SQLerror::test(__FILELINE__,100);
         if (sqlca.sqlcode) break;
         vec_Kido.push_back(new Data_kido(db_fertigkeit));
      } 
   exec sql close kido;
   get_kido(vec_Kido);

   // Grundkenntnisse (Waffen)
   strncpy(db_art,"Grundkenntnis",sizeof(db_art));
   exec sql declare grund cursor for
      select fertigkeit, wert  from charaktere_fertigkeiten
      where charakter_name= :db_name_ch 
         and version= :db_version
         and art= :db_art;
   exec sql open grund;
   SQLerror::test(__FILELINE__);
   while(true)
      {
         exec sql fetch grund into :db_fertigkeit, :db_wert ;
         SQLerror::test(__FILELINE__,100);
         if (sqlca.sqlcode) break;
         waffen_grundkenntnisse[db_fertigkeit]="X"; 
      } 
   exec sql close grund;

   // Sprache
   strncpy(db_art,"Sprache",sizeof(db_art));
   exec sql declare sprache cursor for
      select fertigkeit, wert  from charaktere_fertigkeiten
      where charakter_name= :db_name_ch 
         and version= :db_version
         and art= :db_art;
   exec sql open sprache;
   SQLerror::test(__FILELINE__);
   while(true)
      {
         exec sql fetch sprache into :db_fertigkeit, :db_wert;
         SQLerror::test(__FILELINE__,100);
         if (sqlca.sqlcode) break;
         vec_Sprachen.push_back(new Data_sprache(db_fertigkeit,"",db_wert,0));
      } 
   exec sql close sprache;
   // Schrift
   strncpy(db_art,"Urschrift",sizeof(db_art));
   exec sql declare schrift cursor for
      select fertigkeit  from charaktere_fertigkeiten
      where charakter_name= :db_name_ch 
         and version= :db_version
         and art= :db_art;
   exec sql open schrift;
   SQLerror::test(__FILELINE__);
   while(true)
      {
         exec sql fetch schrift into :db_fertigkeit;
         SQLerror::test(__FILELINE__,100);
         if (sqlca.sqlcode) break;
         vec_Schriften.push_back(new Data_schrift(db_fertigkeit,""));
      } 
   exec sql close sprache;
   midgard_CG::sprachen_schrift();


   // Regionen
   Originalbool=false;      checkbutton_original->set_active(false);
   Albabool=false;      checkbutton_Alba->set_active(false);
   Escharbool=false;      checkbutton_Eschar->set_active(false);
   Rawindrabool=false;      checkbutton_Rawindra->set_active(false);
   KanThaiPanbool=false;      checkbutton_KanThaiPan->set_active(false);
   Waelandbool=false;      checkbutton_Waeland->set_active(false);
   Nahuatlanbool=false;      checkbutton_Nahuatlan->set_active(false);
   HDbool=false;             checkbutton_HD->set_active(false);
   BRbool=false;             checkbutton_BR->set_active(false);
   strncpy(db_art,"Region",sizeof(db_art));
   exec sql declare r_ein cursor for select region from charaktere_fertigkeiten
      where charakter_name= :db_name_ch and version= :db_version 
      and art= :db_art;
   exec sql open r_ein;
   SQLerror::test(__FILELINE__);
   while (true)
    {
      exec sql fetch r_ein into :db_region_2;
      SQLerror::test(__FILELINE__,100);
      if (sqlca.sqlcode) break;   
      std::string reg=db_region_2;
      if (reg=="ORIG") {Originalbool=true ; checkbutton_original->set_active(true);}
      if (reg=="A") {Albabool=true ; checkbutton_Alba->set_active(true);}
      if (reg=="E") {Escharbool=true;      checkbutton_Eschar->set_active(true);}
      if (reg=="R") {Rawindrabool=true;      checkbutton_Rawindra->set_active(true);}
      if (reg=="K") {KanThaiPanbool=true;      checkbutton_KanThaiPan->set_active(true);}
      if (reg=="W") {Waelandbool=true;      checkbutton_Waeland->set_active(true);}
      if (reg=="N") {Nahuatlanbool=true;      checkbutton_Nahuatlan->set_active(true);}
      if (reg=="HD") {HDbool=true;      checkbutton_HD->set_active(true);}
      if (reg=="BR") {BRbool=true;      checkbutton_BR->set_active(true);}
      if (reg=="S") {Kuestenstaatenbool=true;      checkbutton_Kuestenstaaten->set_active(true);}
      if (reg=="G") {Gildenbriefbool=true;      checkbutton_Gildenbrief->set_active(true);}
    }
   exec sql close r_ein;
   tr.close();

   Typ.Short() = db_typ_s;
   Typ2.Short() = db_typ_2_s;

//   get_typ_after_load(-1);
   get_typ_after_load();
/*
   if (Typ2.Short()!="") 
     { fill_typauswahl_2();
       get_typ_after_load(-1,2);      
     }
*/
   if (Typ.Zaubern()=="n" || Typ.Short() == "Ord" ||
       Typ2.Zaubern()=="n" || Typ2.Short() == "Ord") label_spezialwaffe->set_text("Spezialwaffe durch \nselektieren auswählen");
   else label_spezialwaffe->set_text("");
   // Spezies setzen
   exec sql begin declare section;   
    int db_nr;
   exec sql end declare section;   
   strncpy(db_spezies,werte.spezies.c_str(),sizeof(db_spezies));
   exec sql select nr into :db_nr from spezies where spezies = :db_spezies;
   // Geschlecht setzen
   if (werte.geschlecht=="w") radiobutton_frau->set_active(true);
   if (werte.geschlecht=="m") radiobutton_mann->set_active(true);
   optionmenu_spezies->set_history(db_nr); // Spezies
   show_gtk();
//   if (Typ2.Short()!="") midgard_CG::show_gtk(get_typ_nr(2),2);
   midgard_CG::get_spezial_from_spezialgebiet();
}
