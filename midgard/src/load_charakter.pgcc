/*  Midgard Character Generator
 *  Copyright (C) 2001 Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include "midgard_CG.hh"
exec sql include sqlca;
#include <cstring>
#include <Aux/Transaction.h>
#include <Aux/SQLerror.h>
#include "Window_charakter_auswahl.hh"
#include "xml_fileselection.hh"

 
gint midgard_CG::on_laden_release_event(GdkEventButton *ev)
{
  if (ev->button==1) on_laden_clicked();
//  if (ev->button==3) xml_import_auswahl();
  return false;
}

void midgard_CG::xml_import_auswahl()
{
  manage (new xml_fileselection(this,"load"));
}
 
void midgard_CG::xml_import(const std::string& datei)
{
  std::string command = "midgard_xmlimport < '"+datei+"'";
  system(command.c_str());
  std::string strinfo = "Charakter aus Datei "+datei+" importiert\n";
  manage (new WindowInfo(strinfo));
  on_laden_clicked();  
}


void midgard_CG::on_laden_clicked()
{
 midgard_CG::on_neuer_charakter_clicked();
//  if (werte.name_charakter =="") manage (new Window_charakter_auswahl(this));
//  else midgard_CG::load_charakter();
  manage (new Window_charakter_auswahl(this));
}

void midgard_CG::select_charakter(const std::string& name, const std::string& version)
{
  Werte.set_Namen(name,"",version);
  midgard_CG::load_charakter();
  button_abg_werte->set_sensitive(true);
  button_herkunft->set_sensitive(true);
  button_sprache->set_sensitive(true);
  button_beschreibung->set_sensitive(true);
//  frame_steigern->set_sensitive(true);
//  frame_lernschema->set_sensitive(true);
  frame_steigern->show();
  frame_lernschema->show();
}


void midgard_CG::load_charakter()
{
   // Werte
   exec sql begin declare section;
//      char db_beschreibung[102400] ;
      char *db_beschreibung=0;
      char db_typ_s[5]     ;
      char db_typ_2_s[5]     ;
      int db_st,db_ge,db_ko,db_in,db_zt,db_au,db_pa,db_sb,db_rw,db_hgw,
          db_b,db_lp,db_ap,db_kaw,db_wlw,db_abwehr,db_zaubern,db_resistenz,
          db_bo_au,db_bo_sc,db_bo_an,db_bo_ab,db_bo_za,db_bo_psy,db_bo_phs,
          db_bo_phk,db_bo_gi,db_lpbasis,db_alter;
      char db_gestalt[20] ;
      char db_geschlecht[5];
      int db_gewicht,db_groesse,db_grad;
      char db_spez[30]    ;
      char db_stand[30]   ;
      char db_herkunft[50];
      char db_glaube[50]  ;
      char db_name_ch[50] ;
      char db_name_sp[50] ;
      char db_version[50] ;
      int db_gfp,db_gold,db_silber,db_kupfer;
      char db_ruestung[20];
      int db_av_bonus, db_sl_bonus;
      char db_region[20];
      char db_region_2[20];
      char db_spezies[50];
      int db_aep,db_kep,db_zep;
      bool db_steigern_bool;   
      int db_steigern_EP;      
      int db_grad_basiswerte,db_grad_abwehr,db_grad_resistenz;
   exec sql end declare section;

 //  db_beschreibung=0; /* Ist nötig !!! */
   strncpy(db_name_ch,(Werte.Name_Charakter()).c_str(),sizeof(db_name_ch));
   strncpy(db_version,(Werte.Version()).c_str(),sizeof(db_version));

   Transaction tr;

   exec sql DECLARE cha CURSOR FOR
      select 
         charakter_name ,
         beschreibung   ,
         version        ,
         typ_s          ,
         coalesce(typ_2_s,'')          ,
         spieler_name   ,
         st             ,
         ge             ,
         ko             ,
         inn            ,
         zt             ,
         au             ,
         pa             ,
         sb             ,
         rw             ,
         hgw            ,
         b              ,
         lp             ,
         ap             ,
         kaw            ,
         wlw            ,
         abwehr         ,
         zaubern        ,
         resistenz      ,
         lpbasis        ,
         alter          ,
         gestalt        ,
         geschlecht     ,
         gewicht        ,
         groesse        ,
         grad           ,
         spezialisierung,
         stand          ,
         herkunft       ,
         glaube         ,
         db_bo_au       ,
         db_bo_sc       ,
         db_bo_an       ,
         db_bo_ab       ,
         db_bo_za       ,
         db_bo_psy      ,
         db_bo_phs      ,
         db_bo_phk      ,
         db_bo_gi       ,
         db_gfp         ,
         gold        ,
         silber      ,
         kupfer      ,
         ruestung    ,
         spezies  ,
         coalesce(aep,0), coalesce(kep,0),coalesce(zep,0),
         coalesce(steigern_bool,'f'),coalesce(steigern_EP_prozent,50),
         coalesce(grad_basiswerte,1),
         coalesce(grad_abwehr,1), coalesce(grad_resistenz,1)
      FROM charaktere WHERE charakter_name= :db_name_ch
            AND version= :db_version;


      exec sql open cha;
      SQLerror::test(__FILELINE__);

      exec sql fetch cha into 
       :db_name_ch  , 
       :db_beschreibung,
       :db_version  ,
       :db_typ_s      ,
       :db_typ_2_s      ,
       :db_name_sp  , 
       :db_st       ,
       :db_ge       ,
       :db_ko       ,
       :db_in       ,
       :db_zt       ,
       :db_au       ,
       :db_pa       ,
       :db_sb       ,
       :db_rw       ,
       :db_hgw      ,
       :db_b        ,
       :db_lp       ,
       :db_ap       ,
       :db_kaw      ,
       :db_wlw      ,
       :db_abwehr   ,
       :db_zaubern  ,
       :db_resistenz,
       :db_lpbasis  ,
       :db_alter    ,
       :db_gestalt  ,
       :db_geschlecht,
       :db_gewicht  ,
       :db_groesse  ,
       :db_grad     ,
       :db_spez     ,
       :db_stand    ,
       :db_herkunft ,
       :db_glaube   ,
       :db_bo_au       ,
       :db_bo_sc       ,
       :db_bo_an       ,
       :db_bo_ab       ,
       :db_bo_za       ,
       :db_bo_psy      ,
       :db_bo_phs      ,
       :db_bo_phk      ,
       :db_bo_gi       ,
       :db_gfp         ,
       :db_gold        ,
       :db_silber      ,
       :db_kupfer      ,
       :db_ruestung    ,
       :db_spezies     ,
       :db_aep,:db_kep,:db_zep  ,
       :db_steigern_bool, :db_steigern_EP,
       :db_grad_basiswerte,:db_grad_abwehr,:db_grad_resistenz;
   SQLerror::test(__FILELINE__);
   exec sql close cha;
   Werte.set_Basiswerte(db_st,db_ge,db_ko,db_in,db_zt) ;    
   Werte.set_Abgeleitetewerte(db_au,db_pa,db_sb,db_rw,db_hgw,db_b,
       db_lp, db_ap,db_abwehr,db_zaubern,db_resistenz,db_gestalt,
       db_gewicht,db_groesse,db_grad,db_stand);
   Werte.set_Abgeleitetewerte_Boni(db_bo_au,db_bo_sc, db_bo_an,db_bo_ab,
      db_bo_za,db_bo_psy,db_bo_phs,db_bo_phk,db_bo_gi,db_kaw,db_wlw,
      db_lpbasis);   
   Werte.set_Alter(db_alter); 
   Werte.set_Geschlecht(db_geschlecht) ;
   Werte.set_Spezialisierung(db_spez) ;
   Werte.set_Herkunft( db_herkunft);
   Werte.set_Glaube(db_glaube);
   Werte.set_Namen(db_name_ch,db_name_sp,db_version) ;
   Werte.set_GFP(db_gfp);
   Werte.set_Beschreibung(db_beschreibung); free(db_beschreibung);
   Werte.set_Geld(db_gold,db_silber,db_kupfer);
   Werte.set_Ruestung(db_ruestung);
   Werte.set_Spezies(db_spezies) ;
   Werte.set_EP(db_aep,db_kep,db_zep);
   steigern_bool=db_steigern_bool;
//   steigern_EP_prozent=db_steigern_EP;
//   grad_basiswerte=db_grad_basiswerte;
   Grad_Anstieg.set_Grad_Anstieg(db_steigern_EP,db_grad_basiswerte,db_grad_abwehr,db_grad_resistenz);
//////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////   
   // Berufe, Fertigkeiten, Waffen und Zauber (KiDo)
   // Grundkenntnisse (Waffen)
   exec sql begin declare section;
      char db_fertigkeit[50];
      int db_wert;
      char db_art[20];
      char db_magisch[1024];
   exec sql end declare section;

   // Beruf
   strncpy(db_art,"Beruf",sizeof(db_art));
   exec sql declare beruf cursor for
      select fertigkeit, wert from charaktere_fertigkeiten
      where charakter_name= :db_name_ch 
         and version= :db_version
         and art= :db_art;
   exec sql open beruf;
   SQLerror::test(__FILELINE__);
   while(true)
      {
         exec sql fetch beruf into :db_fertigkeit, :db_wert;
         SQLerror::test(__FILELINE__,100);
         if (sqlca.sqlcode) break;
         vec_Beruf.push_back(new Data_beruf(db_fertigkeit,"",db_wert));
      } 
   exec sql close beruf;
   // angeborene Fertigkeiten
   strncpy(db_art,"ang.Fertigkeit",sizeof(db_art));
   exec sql declare an_fertigkeiten cursor for
      select fertigkeit, wert from charaktere_fertigkeiten
      where charakter_name= :db_name_ch 
         and version= :db_version
         and art= :db_art;
   exec sql open an_fertigkeiten;
   SQLerror::test(__FILELINE__);
   while(true)
      {
         exec sql fetch an_fertigkeiten into :db_fertigkeit, :db_wert;
         SQLerror::test(__FILELINE__,100);
         if (sqlca.sqlcode) break;
         vec_an_Fertigkeit.push_back(new Data_fert(db_fertigkeit,db_wert));
      } 
   exec sql close an_fertigkeit;
   // Fertigkeiten
   strncpy(db_art,"Fertigkeit",sizeof(db_art));
   exec sql declare fertigkeiten cursor for
      select fertigkeit, wert  from charaktere_fertigkeiten
      where charakter_name= :db_name_ch 
         and version= :db_version
         and art= :db_art;
   exec sql open fertigkeiten;
   SQLerror::test(__FILELINE__);
   while(true)
      {
         exec sql fetch fertigkeiten into :db_fertigkeit, :db_wert;
         SQLerror::test(__FILELINE__,100);
         if (sqlca.sqlcode) break;
         vec_Fertigkeiten.push_back(new Data_fert(db_fertigkeit,db_wert));
         std::string f = db_fertigkeit;
         if (f=="KiDo") kido_bool=true;
         if (f=="Wissen von der Magie") magie_bool=true;
      } 
   exec sql close fertigkeit;
   // Waffen
   strncpy(db_art,"Waffe",sizeof(db_art));
   exec sql declare waffen cursor for
      select fertigkeit, wert  from charaktere_fertigkeiten
      where charakter_name= :db_name_ch 
         and version= :db_version
         and art= :db_art;
   exec sql open waffen;
   SQLerror::test(__FILELINE__);
   while(true)
      {
         exec sql fetch waffen into :db_fertigkeit, :db_wert;
         SQLerror::test(__FILELINE__,100);
         if (sqlca.sqlcode) break;
         vec_Waffen.push_back(new Data_waffen(db_fertigkeit,db_wert,""));
      } 
   exec sql close waffen;
   // Besitz (Waffen)
   strncpy(db_art,"Besitz_W",sizeof(db_art));
   exec sql declare besitz_w cursor for
      select fertigkeit,coalesce(av_bonus,0),coalesce(sl_bonus,0),coalesce(region,''),coalesce(magisch,'')  
      from charaktere_fertigkeiten
      where charakter_name= :db_name_ch 
         and version= :db_version
         and art= :db_art;
   exec sql open besitz_w;
   SQLerror::test(__FILELINE__);
   while(true)
      {
         exec sql fetch besitz_w into :db_fertigkeit, :db_av_bonus ,:db_sl_bonus, :db_region, :db_magisch;
         SQLerror::test(__FILELINE__,100);
         if (sqlca.sqlcode) break;
         std::string wa = get_region_waffen(db_fertigkeit,db_region,2);         
         vec_Waffen_besitz.push_back(new Data_waffen(wa,db_fertigkeit,db_region,db_av_bonus,db_sl_bonus,db_magisch));
      } 
   exec sql close besitz_w;

   // Zauber
   strncpy(db_art,"Zauber",sizeof(db_art));
   exec sql declare zauber cursor for
      select fertigkeit, wert  from charaktere_fertigkeiten
      where charakter_name= :db_name_ch 
         and version= :db_version
         and art= :db_art;
   exec sql open zauber;
   SQLerror::test(__FILELINE__);
   while(true)
      {
         exec sql fetch zauber into :db_fertigkeit, :db_wert ;
         SQLerror::test(__FILELINE__,100);
         if (sqlca.sqlcode) break;
         vec_Zauber.push_back(new Data_zauber(db_fertigkeit,db_wert));
      } 
   exec sql close zauber;

   // Zauber
   strncpy(db_art,"Zaubermittel",sizeof(db_art));
   exec sql declare zauberm cursor for
      select fertigkeit, wert  from charaktere_fertigkeiten
      where charakter_name= :db_name_ch 
         and version= :db_version
         and art= :db_art;
   exec sql open zauberm;
   SQLerror::test(__FILELINE__);
   while(true)
      {
         exec sql fetch zauberm into :db_fertigkeit, :db_wert ;
         SQLerror::test(__FILELINE__,100);
         if (sqlca.sqlcode) break;
         std::string stufe = itos(db_wert); 
         if (db_wert==99) stufe = "G";
         vec_Zaubermittel.push_back(new Data_zaubermittel(stufe,db_fertigkeit));
      } 
   exec sql close zauberm;
//   get_Zaubermittel(vec_Zaubermittel);

   // KiDo
   strncpy(db_art,"KiDo",sizeof(db_art));
   exec sql declare kido cursor for
      select fertigkeit, wert  from charaktere_fertigkeiten
      where charakter_name= :db_name_ch 
         and version= :db_version
         and art= :db_art;
   exec sql open kido;
   SQLerror::test(__FILELINE__);
   while(true)
      {
         exec sql fetch kido into :db_fertigkeit, :db_wert ;
         SQLerror::test(__FILELINE__,100);
         if (sqlca.sqlcode) break;
         vec_Kido.push_back(new Data_kido(db_fertigkeit));
      } 
   exec sql close kido;
   get_kido(vec_Kido);

   // Grundkenntnisse (Waffen)
   strncpy(db_art,"Grundkenntnis",sizeof(db_art));
   exec sql declare grund cursor for
      select fertigkeit, wert  from charaktere_fertigkeiten
      where charakter_name= :db_name_ch 
         and version= :db_version
         and art= :db_art;
   exec sql open grund;
   SQLerror::test(__FILELINE__);
   while(true)
      {
         exec sql fetch grund into :db_fertigkeit, :db_wert ;
         SQLerror::test(__FILELINE__,100);
         if (sqlca.sqlcode) break;
         waffen_grundkenntnisse[db_fertigkeit]="X"; 
      } 
   exec sql close grund;

   // Sprache
   strncpy(db_art,"Sprache",sizeof(db_art));
   exec sql declare sprache cursor for
      select fertigkeit, wert  from charaktere_fertigkeiten
      where charakter_name= :db_name_ch 
         and version= :db_version
         and art= :db_art;
   exec sql open sprache;
   SQLerror::test(__FILELINE__);
   while(true)
      {
         exec sql fetch sprache into :db_fertigkeit, :db_wert;
         SQLerror::test(__FILELINE__,100);
         if (sqlca.sqlcode) break;
         vec_Sprachen.push_back(new Data_sprache(db_fertigkeit,"",db_wert,0));
      } 
   exec sql close sprache;
   // Schrift
   strncpy(db_art,"Urschrift",sizeof(db_art));
   exec sql declare schrift cursor for
      select fertigkeit  from charaktere_fertigkeiten
      where charakter_name= :db_name_ch 
         and version= :db_version
         and art= :db_art;
   exec sql open schrift;
   SQLerror::test(__FILELINE__);
   while(true)
      {
         exec sql fetch schrift into :db_fertigkeit;
         SQLerror::test(__FILELINE__,100);
         if (sqlca.sqlcode) break;
         vec_Schriften.push_back(new Data_schrift(db_fertigkeit,""));
      } 
   exec sql close sprache;
   midgard_CG::sprachen_schrift();


   // Regionen ///////////////////////////////////////////////////////////
   strncpy(db_art,"Region",sizeof(db_art));
   exec sql declare r_ein cursor for select region from charaktere_fertigkeiten
      where charakter_name= :db_name_ch and version= :db_version 
      and art= :db_art;
   exec sql open r_ein;
   SQLerror::test(__FILELINE__);
   while (true)
    {
      exec sql fetch r_ein into :db_region_2;
      SQLerror::test(__FILELINE__,100);
      if (sqlca.sqlcode) break;   
      std::string reg=db_region_2;
      if (reg=="ORIG") {Originalbool=false ; checkbutton_original->set_active(false);}
      if (reg=="INFO") {Infobool=false ; checkbutton_info_fenster->set_active(false);}
      if (reg=="A") {Albabool=true ; checkbutton_Alba->set_active(true);}
      if (reg=="E") {Escharbool=true;      checkbutton_Eschar->set_active(true);}
      if (reg=="R") {Rawindrabool=true;      checkbutton_Rawindra->set_active(true);}
      if (reg=="K") {KanThaiPanbool=true;      checkbutton_KanThaiPan->set_active(true);}
      if (reg=="W") {Waelandbool=true;      checkbutton_Waeland->set_active(true);}
      if (reg=="N") {Nahuatlanbool=true;      checkbutton_Nahuatlan->set_active(true);}
      if (reg=="HD") {HDbool=true;      checkbutton_HD->set_active(true);}
      if (reg=="BR") {BRbool=true;      checkbutton_BR->set_active(true);}
      if (reg=="S") {Kuestenstaatenbool=true;      checkbutton_Kuestenstaaten->set_active(true);}
      if (reg=="G") {Gildenbriefbool=true;      checkbutton_Gildenbrief->set_active(true);}
    }
   exec sql close r_ein;
   tr.close();


   // Geschlecht setzen ////////////////////////////////////////////////
   if (Werte.Geschlecht()=="w") radiobutton_frau->set_active(true);
   if (Werte.Geschlecht()=="m") radiobutton_mann->set_active(true);
   // Charakterklasse setzen und anzeigen 
   Typ.set_Short(db_typ_s);
   Typ2.set_Short(db_typ_2_s);
   fill_typauswahl();
   if(Typ2.Short()!="") fill_typauswahl_2();

   get_typ_after_load();
   get_optionmenu_typ_nr();

   if (Typ.Zaubern()=="n" || Typ.Short() == "Ord" ||
       Typ2.Zaubern()=="n" || Typ2.Short() == "Ord") label_spezialwaffe->set_text("Spezialwaffe durch \nselektieren auswählen");
   else label_spezialwaffe->set_text("");

   // Spezies setzen ////////////////////////////////////////////
   exec sql begin declare section;   
    int db_nr;
   exec sql end declare section;   
   strncpy(db_spezies,(Werte.Spezies()).c_str(),sizeof(db_spezies));
   exec sql select nr into :db_nr from spezies where spezies = :db_spezies;
   optionmenu_spezies->set_history(db_nr); // Spezies

   //////////////////////////////////////////////////////////////
   show_gtk();
   get_spezial_from_spezialgebiet();
}
