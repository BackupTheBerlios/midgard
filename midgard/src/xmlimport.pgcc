// $Id: xmlimport.pgcc,v 1.22 2001/08/28 16:54:35 christof Exp $
/*  Midgard Roleplaying Character Generator
 *  Copyright (C) 2001 Christof Petig
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include <string>
#include <iostream>
#include <Aux/Transaction.h>
#include <Aux/dbconnect.h>
exec sql include sqlca;
#include "TagStream.hh"
#include <Aux/string0.h>

bool charakter_laden(const Tag::const_iterator &top)
{  if (top->getInt("Version")<3 || top->getInt("Version")>7)
   {  std::cerr << "Version " << top->getInt("Version") << " wird noch nicht unterstützt\n";
      return false;
   }
   const Tag *Figur=top->find("Figur");
   const Tag *Typ=top->find("Typ");
   const Tag *Basiseigenschaften=top->find("Basiseigenschaften");
   const Tag *abgeleiteteEigenschaften=top->find("abgeleiteteEigenschaften");
   const Tag *Erfolgswerte=top->find("Erfolgswerte");
   const Tag *Resistenzen=top->find("Resistenzen");
   const Tag *Gesundheit=top->find("Gesundheit");
   const Tag *Beschreibung=top->find("Beschreibung");
   const Tag *Boni=top->find("Boni");
   const Tag *Boni_Resistenzen=Boni->find("Resistenzen");
   const Tag *Vermoegen=top->find("Vermoegen"); // V3
   if (!Vermoegen) Vermoegen=top->find("Vermögen"); // V4
   const Tag *Ruestung=top->find("Ruestung"); // V2?
   if (!Ruestung) Ruestung=top->find("Rüstung"); // V3
   const Tag *Ausruestung=top->find("Ausrüstung"); // V4+
   if (!Ausruestung) Ausruestung=top->find("Fertigkeiten"); // V3-
   if (!Ruestung) Ruestung=Ausruestung->find("Rüstung"); // V4+
   const Tag *Fertigkeiten=top->find("Fertigkeiten");
   const Tag *Steigern=top->find("Steigern");

   // ---- taken from save_charakter.pgcc ------
   exec sql begin declare section;
      char db_beschreibung[10240];
      char db_typ_s[5];
      char db_typ_2_s[5];
      int db_st;
      int db_ge;
      int db_ko;      
      int db_in;      
      int db_zt;      
      int db_au;      
      int db_pa;      
      int db_sb;      
      int db_rw;      
      int db_hgw;      
      int db_b;      
      int db_lp;      
      int db_ap;      
      int db_kaw;      
      int db_wlw;      
      int db_abwehr;      
      int db_zaubern ;
      int db_resistenz;      
      int db_bo_au;      
      int db_bo_sc;      
      int db_bo_an;
      int db_bo_ab;
      int db_bo_za;
      int db_bo_psy;
      int db_bo_phs;
      int db_bo_phk;
      int db_bo_gi;
      int db_lpbasis;
      int db_alter;
      char db_gestalt[20] ;
      char db_geschlecht[5];
      int db_gewicht;
      int db_groesse;
      int db_grad;
      char db_spez[30]    ;
      char db_stand[30]   ;
      char db_herkunft[50];
      char db_glaube[50]  ;
      char db_name_ch[50] ;
      char db_name_sp[50] ;
      char db_version[50] ;
      int db_gfp;
      int db_gold;
      int db_silber;
      int db_kupfer;
      char db_ruestung[20];
      char db_spezies[50];
      int db_aep,db_kep,db_zep,db_steigern_ep_prozent,db_grad_basiswerte;
      bool db_speichern_bool;
   exec sql end declare section;

   strncpy0(db_beschreibung,top->getString("Text").c_str(),sizeof db_beschreibung);
   strncpy0(db_typ_s,Typ->getString("Abkürzung").c_str(),sizeof db_typ_s);
   strncpy0(db_typ_2_s,Typ->getString("Abkürzung2").c_str(),sizeof db_typ_2_s);
   db_st=Basiseigenschaften->getInt("St",0);
   db_ge=Basiseigenschaften->getInt("Ge",0);
   db_ko=Basiseigenschaften->getInt("Ko",0);
   db_in=Basiseigenschaften->getInt("In",0);
   db_zt=Basiseigenschaften->getInt("Zt",0);
   db_au=abgeleiteteEigenschaften->getInt("Au",0);
   db_pa=abgeleiteteEigenschaften->getInt("pA",0);
   db_sb=abgeleiteteEigenschaften->getInt("Sb",0);
   db_rw=abgeleiteteEigenschaften->getInt("RW",0);
   db_hgw=abgeleiteteEigenschaften->getInt("HGW",0);
   db_b=abgeleiteteEigenschaften->getInt("B",0);
   db_lp=Gesundheit->getInt("LP",0);
   db_ap=Gesundheit->getInt("AP",0);
   db_kaw=abgeleiteteEigenschaften->getInt("KAW",0);
   db_wlw=abgeleiteteEigenschaften->getInt("WLW",0);
   db_abwehr=Erfolgswerte->getInt("Abwehr",0);
   db_zaubern=Erfolgswerte->getInt("Zaubern",0);
   db_resistenz=Resistenzen->getInt("Zauber", // V5
   	Resistenzen->getInt("Resistenz", // V4.Malte
   	Resistenzen->getInt("psy",0))); // V-4
   db_bo_au=Boni->getInt("Ausdauer",0);
   db_bo_sc=Boni->getInt("Schaden",0);
   db_bo_an=Boni->getInt("Angriff",0);
   db_bo_ab=Boni->getInt("Abwehr",0);
   db_bo_za=Boni->getInt("Zaubern",0);
   db_bo_psy=Boni_Resistenzen->getInt("psy",0);
   db_bo_phs=Boni_Resistenzen->getInt("phs",0);
   db_bo_phk=Boni_Resistenzen->getInt("phk",0);
   db_bo_gi=Boni_Resistenzen->getInt("Gift",0);
   db_lpbasis=Gesundheit->getInt("LP_Basis",0);
   db_alter=Beschreibung->getInt("Alter",0);
   strncpy0(db_gestalt,Beschreibung->getString("Gestalt","normal").c_str(),sizeof db_gestalt);
   strncpy0(db_geschlecht,Typ->getString("Geschlecht","m").c_str(),sizeof db_geschlecht);
   db_gewicht=Beschreibung->getInt("Gewicht",0);
   db_groesse=Beschreibung->getInt("Größe",0);
   db_grad=Figur->getInt("Grad",0);
   strncpy0(db_spez,Typ->getString("Spezialisierung").c_str(),sizeof db_spez);
   strncpy0(db_stand,Beschreibung->getString("Stand").c_str(),sizeof db_stand);
   strncpy0(db_herkunft,Beschreibung->getString("Herkunft").c_str(),sizeof db_herkunft);
   strncpy0(db_glaube,Beschreibung->getString("Glaube").c_str(),sizeof db_glaube);
   strncpy0(db_name_ch,Figur->getString("Name").c_str(),sizeof db_name_ch);
   strncpy0(db_name_sp,Figur->getString("Spieler").c_str(),sizeof db_name_sp);
   strncpy0(db_version,Figur->getString("Zeitpunkt").c_str(),sizeof db_version);
   db_gfp=top->getInt("GFP",0);
   db_gold=Vermoegen->getInt("GS",0);
   db_silber=Vermoegen->getInt("SS",0);
   db_kupfer=Vermoegen->getInt("KS",0);
   if (Ruestung) strncpy0(db_ruestung,Ruestung->Value().c_str(),sizeof db_ruestung);
   else *db_ruestung=0;
   strncpy0(db_spezies,Typ->getString("Spezies").c_str(),sizeof db_spezies);
   
   db_aep=Steigern->getInt("AEP",0); // V7+
   db_kep=Steigern->getInt("KEP",0); // V7+
   db_zep=Steigern->getInt("ZEP",0); // V7+
   db_steigern_ep_prozent=Steigern->getInt("APproGFP",50); // V7+
   db_grad_basiswerte=Steigern->getInt("Basiswerte",db_grad); // V7+
   db_speichern_bool=Steigern->getBool("steigern",false); // V7+
   
update:
   exec sql UPDATE charaktere SET 
      charakter_name = :db_name_ch  , 
      beschreibung   = :db_beschreibung  , 
      version        = :db_version  ,
      typ_s          = :db_typ_s    ,
      typ_2_s	     = nullif(:db_typ_2_s,'')  ,
      spieler_name   = :db_name_sp  , 
      st             = :db_st       ,
      ge             = :db_ge       ,
      ko             = :db_ko       ,
      inn            = :db_in       ,
      zt             = :db_zt       ,
      au             = :db_au       ,
      pa             = :db_pa       ,
      sb             = :db_sb       ,
      rw             = :db_rw       ,
      hgw            = :db_hgw      ,
      b              = :db_b        ,
      lp             = :db_lp       ,
      ap             = :db_ap       ,
      kaw            = :db_kaw      ,
      wlw            = :db_wlw      ,
      abwehr         = :db_abwehr   ,
      zaubern        = :db_zaubern  ,
      resistenz      = :db_resistenz,
      lpbasis        = :db_lpbasis  ,
      alter          = :db_alter    ,
      gestalt        = :db_gestalt  ,
      geschlecht     = :db_geschlecht  ,
      gewicht        = :db_gewicht  ,
      groesse        = :db_groesse  ,
      grad           = :db_grad     ,
      spezialisierung= :db_spez     ,
      stand          = :db_stand    ,
      herkunft       = :db_herkunft ,
      glaube         = :db_glaube   ,
      db_bo_au       = :db_bo_au       ,
      db_bo_sc       = :db_bo_sc       ,
      db_bo_an       = :db_bo_an       ,
      db_bo_ab       = :db_bo_ab       ,
      db_bo_za       = :db_bo_za       ,
      db_bo_psy      = :db_bo_psy      ,
      db_bo_phs      = :db_bo_phs      ,
      db_bo_phk      = :db_bo_phk      ,
      db_bo_gi       = :db_bo_gi       ,  
      db_gfp         = :db_gfp         ,
      gold           = :db_gold        ,
      silber         = :db_silber      ,
      kupfer         = :db_kupfer      ,
      ruestung       = :db_ruestung    ,
      spezies        = :db_spezies     ,
      steigern_bool  = :db_steigen_bool,
      aep	     = :db_aep	       ,
      kep 	     = :db_kep		, 
      zep	     = :db_zep		,
      steigern_ep_prozent = :db_steigern_ep_prozent,
      grad_basiswerte = :db_grad_basiswerte
      
      WHERE charakter_name = :db_name_ch ;
   SQLerror::test(__FILELINE__,100);
   if (sqlca.sqlcode==100) 
   {  exec sql insert into charaktere (charakter_name) values (:db_name_ch);
      if (!sqlca.sqlcode) goto update;
   }
   
   exec sql delete from charaktere_fertigkeiten where charakter_name = :db_name_ch;
   SQLerror::test(__FILELINE__,100);
   //-- Waffen ---- V4+
   for (Tag::const_iterator i=Ausruestung->begin();i!=Ausruestung->end();++i)
   {  if (i->Type()!="Waffe") continue;
   
      exec sql begin declare section;
      char db_fertigkeit[50];
      int db_wert;
      char db_magisch[1024];
      int db_av_bonus,db_sl_bonus;
      char db_region[20];
      char db_art[40];
      exec sql end declare section;

      strncpy0(db_art,"Besitz_W",sizeof db_art);
      strncpy0(db_fertigkeit,i->getString("Bezeichnung").c_str(),sizeof db_fertigkeit);
      db_wert=i->getInt("Wert",0);
      db_av_bonus=i->getInt("AngriffVerteidigung_Bonus",0);
      db_sl_bonus=i->getInt("SchadenLebenspunkte_Bonus",0);
      strncpy0(db_magisch,i->Value().c_str(),sizeof db_magisch);
      strncpy0(db_region,i->getString("Region").c_str(),sizeof db_region);

      exec sql insert into charaktere_fertigkeiten
	(charakter_name,version,fertigkeit,wert,art,av_bonus,sl_bonus,
			region,magisch)
        values
	(:db_name_ch,:db_version,:db_fertigkeit,:db_wert,:db_art,:db_av_bonus,
		:db_sl_bonus,:db_region,:db_magisch);
   }
   //-- Fertigkeiten --- V3+
   for (Tag::const_iterator i=Fertigkeiten->begin();i!=Fertigkeiten->end();++i)
   {  if (!i->Type().size()) continue;
   
      exec sql begin declare section;
      char db_fertigkeit[50];
      int db_wert;
      char db_magisch[1024];
      int db_av_bonus,db_sl_bonus;
      char db_region[20];
      char db_art[40];
      exec sql end declare section;

      strncpy0(db_art,i->Type().c_str(),sizeof db_art);
      strncpy0(db_fertigkeit,i->getString("Bezeichnung").c_str(),sizeof db_fertigkeit);
      db_wert=i->getInt("Wert",0);
      db_av_bonus=i->getInt("AngriffVerteidigung_Bonus",0);
      db_sl_bonus=i->getInt("SchadenLebenspunkte_Bonus",0);
      strncpy0(db_magisch,i->Value().c_str(),sizeof db_magisch);
      strncpy0(db_region,i->getString("Region").c_str(),sizeof db_region);

      exec sql insert into charaktere_fertigkeiten
	(charakter_name,version,fertigkeit,wert,art,av_bonus,sl_bonus,
			region,magisch)
        values
	(:db_name_ch,:db_version,:db_fertigkeit,:db_wert,:db_art,:db_av_bonus,
		:db_sl_bonus,:db_region,:db_magisch);
   }
   return true;
}

bool charakter_laden(istream &i)
{  TagStream ts(i);
//   ts.debug(15);
   
   Tag::const_iterator top=ts.find("Midgard-Charakter");
   if (!top || top==ts.end())
   {  std::cerr << "Ist das wirklich die richtige Datei? Ich kann keinen Charakter finden.\n";
      return false;
   }
   // Wirklich abbrechen ?? oder andere Charaktere laden?
   if (!charakter_laden(top)) return false;
   while ((top=ts.find(top,"Midgard-Charakter"))!=0)
      if (!charakter_laden(top)) return false;
}

int main(int argc, char *argv[])
{  
   if (argc!=1) {std::cerr << "USAGE: "<<argv[0]<<" < XML_Datei \n";
      exit(1); };
   try{
      Petig::Connection conn;
      conn.setDbase("midgard");
      Petig::dbconnect(conn);

      if (!charakter_laden(std::cin)) { Petig::dbdisconnect(); return 1; }
      
      Petig::dbdisconnect();
   } catch (SQLerror &e)
   {  std::cerr << e << '\n';
   }
   return 0;
}
