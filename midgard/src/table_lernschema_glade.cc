// generated 2002/12/11 19:15:23 CET by christof@puck.petig-baender.de
// using glademm V1.1.3c_cvs
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- --gnome2 midgard.glade
// for gtk 2.0.9 and gtkmm 2.0.1
//
// Please modify the corresponding derived classes in ./src/table_lernschema.cc

#include "config.h"
#include "table_lernschema_glade.hh"
#include <gtkmm/image.h>
#include "../pixmaps/right_arr-exp3.xpm"
#include <gtkmm/button.h>
#include "../pixmaps/left_arr-exp3.xpm"
#include <gtkmm/adjustment.h>
#include "../pixmaps/Fert_Laufen-32.xpm"
#include "../pixmaps/Regio_Alba-50.xpm"
#include "../pixmaps/Fert_Reiten-32.xpm"
#include <gtkmm/box.h>
#include <gtkmm/frame.h>
#include "../pixmaps/Skills-trans-50.xpm"
#include "../pixmaps/Fert_Lesen-32.xpm"
#include "../pixmaps/Fert-Gaukler-32.xpm"
#include "../pixmaps/Angeb_Tast-32.xpm"
#include <gtkmm/entry.h>
#include "../pixmaps/KiDo-trans-50.xpm"
#include <gtkmm/label.h>
#include "../pixmaps/Claymore-50.xpm"
#include "../pixmaps/Weapon-trans-50.xpm"
#include "../pixmaps/Zauber-trans-50.xpm"
#include "../pixmaps/Regio_Arkanum-50.xpm"
#include <gtkmm/table.h>
#include "../pixmaps/Angeb_Sicht-32.xpm"
#include "../pixmaps/Gross_dfr3_pre.xpm"
#include <gtkmm/viewport.h>
#include <gtkmm/scrolledwindow.h>
#include <gtkmm/paned.h>
#include "../pixmaps/Angeb_All-32.xpm"
#include "../pixmaps/CountrChar-trans-50.xpm"
#include "../pixmaps/Dice-2W6-trans-50.xpm"
#include "../pixmaps/Edit-trans-50.xpm"
#include "../pixmaps/Job-trans-50.xpm"
#include "../pixmaps/Money-50.xpm"
#include "../pixmaps/Dice_Armor-trans-50.xpm"
#include "../pixmaps/Dice-Ausruest-50.xpm"
#include <gtkmm/toolbar.h>

table_lernschema_glade::table_lernschema_glade(GlademmData *_data
) : Gtk::Table(4, 2, false)
{  table_lernschema = this;
   
   Glib::RefPtr<Gdk::Bitmap> _pixmap70_mask;
   Glib::RefPtr<Gdk::Pixmap> _pixmap70_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _pixmap70_mask, right_arr_exp3_xpm);
   Gtk::Image *pixmap70 = manage(new class Gtk::Image(_pixmap70_pixmap, _pixmap70_mask));
   Gtk::Button *button_waffe_trans = manage(new class Gtk::Button());
   Glib::RefPtr<Gdk::Bitmap> _pixmap71_mask;
   Glib::RefPtr<Gdk::Pixmap> _pixmap71_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _pixmap71_mask, left_arr_exp3_xpm);
   Gtk::Image *pixmap71 = manage(new class Gtk::Image(_pixmap71_pixmap, _pixmap71_mask));
   Gtk::Button *button_fach_trans = manage(new class Gtk::Button());
   Gtk::Adjustment *spinbutton_fach_adj = manage(new class Gtk::Adjustment(1, 0, 95, 1, 10, 10));
   spinbutton_fach = manage(new class Gtk::SpinButton(*spinbutton_fach_adj, 1, 0));
   
   Glib::RefPtr<Gdk::Bitmap> _pixmap119_mask;
   Glib::RefPtr<Gdk::Pixmap> _pixmap119_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _pixmap119_mask, Fert_Laufen_32_xpm);
   Gtk::Image *pixmap119 = manage(new class Gtk::Image(_pixmap119_pixmap, _pixmap119_mask));
   Glib::RefPtr<Gdk::Bitmap> _pixmap118_mask;
   Glib::RefPtr<Gdk::Pixmap> _pixmap118_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _pixmap118_mask, Regio_Alba_50_xpm);
   Gtk::Image *pixmap118 = manage(new class Gtk::Image(_pixmap118_pixmap, _pixmap118_mask));
   Glib::RefPtr<Gdk::Bitmap> _pixmap120_mask;
   Glib::RefPtr<Gdk::Pixmap> _pixmap120_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _pixmap120_mask, Fert_Reiten_32_xpm);
   Gtk::Image *pixmap120 = manage(new class Gtk::Image(_pixmap120_pixmap, _pixmap120_mask));
   Gtk::HBox *hbox60 = manage(new class Gtk::HBox(false, 0));
   Gtk::RadioButton::Group _RadioBGroup_LernListe;
   button_fachkenntnisse = manage(new class Gtk::RadioButton(_RadioBGroup_LernListe));
   
   Gtk::VBox *vbox33 = manage(new class Gtk::VBox(false, 0));
   Gtk::Frame *frame25 = manage(new class Gtk::Frame("Fachkenntnisse"));
   Gtk::Adjustment *spinbutton_allgemein_adj = manage(new class Gtk::Adjustment(1, 0, 95, 1, 10, 10));
   spinbutton_allgemein = manage(new class Gtk::SpinButton(*spinbutton_allgemein_adj, 1, 0));
   
   Glib::RefPtr<Gdk::Bitmap> _pixmap116_mask;
   Glib::RefPtr<Gdk::Pixmap> _pixmap116_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _pixmap116_mask, Skills_trans_50_xpm);
   Gtk::Image *pixmap116 = manage(new class Gtk::Image(_pixmap116_pixmap, _pixmap116_mask));
   Glib::RefPtr<Gdk::Bitmap> _pixmap149_mask;
   Glib::RefPtr<Gdk::Pixmap> _pixmap149_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _pixmap149_mask, Fert_Lesen_32_xpm);
   Gtk::Image *pixmap149 = manage(new class Gtk::Image(_pixmap149_pixmap, _pixmap149_mask));
   Gtk::HBox *hbox59 = manage(new class Gtk::HBox(false, 0));
   button_allgemeinwissen = manage(new class Gtk::RadioButton(_RadioBGroup_LernListe));
   
   Gtk::VBox *vbox34 = manage(new class Gtk::VBox(false, 0));
   Gtk::Frame *frame26 = manage(new class Gtk::Frame("Allgemeinwissen"));
   Gtk::Adjustment *spinbutton_unge_adj = manage(new class Gtk::Adjustment(1, 0, 95, 1, 10, 10));
   spinbutton_unge = manage(new class Gtk::SpinButton(*spinbutton_unge_adj, 1, 0));
   
   Glib::RefPtr<Gdk::Bitmap> _pixmap114_mask;
   Glib::RefPtr<Gdk::Pixmap> _pixmap114_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _pixmap114_mask, Fert_Gaukler_32_xpm);
   Gtk::Image *pixmap114 = manage(new class Gtk::Image(_pixmap114_pixmap, _pixmap114_mask));
   Glib::RefPtr<Gdk::Bitmap> _pixmap121_mask;
   Glib::RefPtr<Gdk::Pixmap> _pixmap121_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _pixmap121_mask, Angeb_Tast_32_xpm);
   Gtk::Image *pixmap121 = manage(new class Gtk::Image(_pixmap121_pixmap, _pixmap121_mask));
   Gtk::HBox *hbox50 = manage(new class Gtk::HBox(false, 0));
   button_untyp_fertigkeiten = manage(new class Gtk::RadioButton(_RadioBGroup_LernListe));
   
   Gtk::VBox *vbox35 = manage(new class Gtk::VBox(false, 0));
   Gtk::Frame *frame80 = manage(new class Gtk::Frame("Ungewöhnl. Fertigk."));
   combo_kido_stil = manage(new class Gtk::Combo());
   
   Glib::RefPtr<Gdk::Bitmap> _pixmap102_mask;
   Glib::RefPtr<Gdk::Pixmap> _pixmap102_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _pixmap102_mask, KiDo_trans_50_xpm);
   Gtk::Image *pixmap102 = manage(new class Gtk::Image(_pixmap102_pixmap, _pixmap102_mask));
   Gtk::Label *label540 = manage(new class Gtk::Label("KiDo Techniken\n"
		"auswählen"));
   Gtk::HBox *hbox54 = manage(new class Gtk::HBox(false, 0));
   button_kido_auswahl = manage(new class Gtk::RadioButton(_RadioBGroup_LernListe));
   
   Gtk::VBox *vbox45 = manage(new class Gtk::VBox(false, 0));
   frame_KiDo_lernschema = manage(new class Gtk::Frame("KiDo"));
   
   Gtk::Adjustment *spinbutton_waffen_adj = manage(new class Gtk::Adjustment(1, 0, 95, 1, 10, 10));
   spinbutton_waffen = manage(new class Gtk::SpinButton(*spinbutton_waffen_adj, 1, 0));
   
   Glib::RefPtr<Gdk::Bitmap> _pixmap107_mask;
   Glib::RefPtr<Gdk::Pixmap> _pixmap107_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _pixmap107_mask, Claymore_50_xpm);
   Gtk::Image *pixmap107 = manage(new class Gtk::Image(_pixmap107_pixmap, _pixmap107_mask));
   Glib::RefPtr<Gdk::Bitmap> _pixmap100_mask;
   Glib::RefPtr<Gdk::Pixmap> _pixmap100_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _pixmap100_mask, Weapon_trans_50_xpm);
   Gtk::Image *pixmap100 = manage(new class Gtk::Image(_pixmap100_pixmap, _pixmap100_mask));
   Gtk::HBox *hbox52 = manage(new class Gtk::HBox(false, 0));
   button_waffen = manage(new class Gtk::RadioButton(_RadioBGroup_LernListe));
   
   Gtk::VBox *vbox36 = manage(new class Gtk::VBox(false, 0));
   Gtk::Frame *frame27 = manage(new class Gtk::Frame("Waffen"));
   Gtk::Adjustment *spinbutton_zauber_adj = manage(new class Gtk::Adjustment(1, 0, 95, 1, 10, 10));
   spinbutton_zauber = manage(new class Gtk::SpinButton(*spinbutton_zauber_adj, 1, 0));
   
   Glib::RefPtr<Gdk::Bitmap> _pixmap101_mask;
   Glib::RefPtr<Gdk::Pixmap> _pixmap101_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _pixmap101_mask, Zauber_trans_50_xpm);
   Gtk::Image *pixmap101 = manage(new class Gtk::Image(_pixmap101_pixmap, _pixmap101_mask));
   Glib::RefPtr<Gdk::Bitmap> _pixmap123_mask;
   Glib::RefPtr<Gdk::Pixmap> _pixmap123_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _pixmap123_mask, Regio_Arkanum_50_xpm);
   Gtk::Image *pixmap123 = manage(new class Gtk::Image(_pixmap123_pixmap, _pixmap123_mask));
   Gtk::HBox *hbox53 = manage(new class Gtk::HBox(false, 0));
   button_zauber = manage(new class Gtk::RadioButton(_RadioBGroup_LernListe));
   
   Gtk::VBox *vbox37 = manage(new class Gtk::VBox(false, 0));
   Gtk::Frame *frame28 = manage(new class Gtk::Frame("Zauber"));
   combo_magier_spezialgebiet = manage(new class Gtk::Combo());
   
   Gtk::Table *table96 = manage(new class Gtk::Table(2, 7, false));
   frame_lernpunkte = manage(new class Gtk::Frame("Lernpunkte für"));
   
   Gtk::Table *table117 = manage(new class Gtk::Table(1, 1, false));
   fertig_typ = manage(new class Gtk::Label("label280"));
   
   Gtk::Frame *frame59 = manage(new class Gtk::Frame("Abenteurertyp"));
   label_ruestung_lernschema = manage(new class Gtk::Label("label553"));
   
   Gtk::Frame *frame101 = manage(new class Gtk::Frame("Rüstungsklasse"));
   Glib::RefPtr<Gdk::Bitmap> _pixmap122_mask;
   Glib::RefPtr<Gdk::Pixmap> _pixmap122_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _pixmap122_mask, Weapon_trans_50_xpm);
   Gtk::Image *pixmap122 = manage(new class Gtk::Image(_pixmap122_pixmap, _pixmap122_mask));
   Gtk::Label *label545 = manage(new class Gtk::Label("Spezialwaffe\n"
		"auswählen"));
   Gtk::HBox *hbox61 = manage(new class Gtk::HBox(false, 0));
   togglebutton_spezialwaffe = manage(new class Gtk::ToggleButton());
   label_herkunft_lernschema = manage(new class Gtk::Label("label553"));
   
   Gtk::Frame *frame102 = manage(new class Gtk::Frame("Herkunft"));
   Gtk::Table *table131 = manage(new class Gtk::Table(1, 4, false));
   eventbox_zusatz = manage(new class Gtk::EventBox());
   
   Gtk::Label *label565 = manage(new class Gtk::Label("zu teure Fertigkeiten zeigen"));
   togglebutton_teure_anzeigen = manage(new class Gtk::CheckButton());
   
   Gtk::Label *label562 = manage(new class Gtk::Label("Gelernte Fertigkeiten zeigen"));
   togglebutton_gelernte_anzeigen = manage(new class Gtk::CheckButton());
   
   Glib::RefPtr<Gdk::Bitmap> _pixmap145_mask;
   Glib::RefPtr<Gdk::Pixmap> _pixmap145_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _pixmap145_mask, Angeb_Sicht_32_xpm);
   Gtk::Image *pixmap145 = manage(new class Gtk::Image(_pixmap145_pixmap, _pixmap145_mask));
   Gtk::Table *table132 = manage(new class Gtk::Table(2, 2, false));
   Gtk::Frame *frame103 = manage(new class Gtk::Frame("Optionen"));
   table_lernschema_121 = manage(new class Gtk::Table(1, 4, false));
   
   Glib::RefPtr<Gdk::Bitmap> _pixmap_dfr3_mask;
   Glib::RefPtr<Gdk::Pixmap> _pixmap_dfr3_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _pixmap_dfr3_mask, Gross_dfr3_pre_xpm);
   pixmap_dfr3 = manage(new class Gtk::Image(_pixmap_dfr3_pixmap, _pixmap_dfr3_mask));
   
   Gtk::Viewport *viewport36 = manage(new class Gtk::Viewport(*manage(new Gtk::Adjustment(0,0,1)), *manage(new Gtk::Adjustment(0,0,1))));
   scrolledwindow_dfr3 = manage(new class Gtk::ScrolledWindow());
   
   Gtk::Label *label544 = manage(new class Gtk::Label("Gelernt"));
   tree_gelerntes = new class MidgardBasicTree(MidgardBasicTree::GELERNTES);
   
   Gtk::ScrolledWindow *scrolledwindow73 = manage(new class Gtk::ScrolledWindow());
   togglebutton_gelernt_verlernen = manage(new class Gtk::ToggleButton("Verlernen"));
   
   Gtk::Table *table122 = manage(new class Gtk::Table(2, 2, false));
   scrolledwindow_lernen = manage(new class Gtk::ScrolledWindow());
   Tree_Lernschema_Zusatz = new class MidgardBasicTree(MidgardBasicTree::LERNSCHEMAZUSATZ);
   
   Gtk::ScrolledWindow *scrolledwindow77 = manage(new class Gtk::ScrolledWindow());
   Gtk::Label *label602 = manage(new class Gtk::Label("Einschränkungen aufheben"));
   checkbutton_einschraenkungen_zusatz = manage(new class Gtk::CheckButton());
   
   Gtk::Table *table163 = manage(new class Gtk::Table(2, 1, false));
   frame_lernschema_zusatz = manage(new class Gtk::Frame("Titel"));
   label_lernschma_titel = manage(new class Gtk::Label("label547"));
   
   Gtk::Table *table123 = manage(new class Gtk::Table(2, 2, false));
   Gtk::HPaned *hpaned6 = manage(new class Gtk::HPaned());
   Glib::RefPtr<Gdk::Bitmap> _pixmap170_mask;
   Glib::RefPtr<Gdk::Pixmap> _pixmap170_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _pixmap170_mask, Angeb_All_32_xpm);
   Gtk::Image *pixmap170 = manage(new class Gtk::Image(_pixmap170_pixmap, _pixmap170_mask));
   Gtk::Label *label537 = manage(new class Gtk::Label("angeborene Fertigkeiten"));
   Gtk::VBox *vbox62 = manage(new class Gtk::VBox(false, 0));
   button_angeborene_fert = manage(new class Gtk::Button());
   
   Gtk::Label *label557 = manage(new class Gtk::Label("%Wurf für\n"
		"Beruf eingeben"));
   Gtk::Label *label558 = manage(new class Gtk::Label("%"));
   Gtk::Adjustment *spinbutton_beruf_adj = manage(new class Gtk::Adjustment(1, 1, 100, 1, 10, 10));
   spinbutton_beruf = manage(new class Gtk::SpinButton(*spinbutton_beruf_adj, 1, 0));
   table_berufsprozent = manage(new class Gtk::Table(2, 2, false));
   
   Gtk::Label *label542 = manage(new class Gtk::Label("Berufsnamen eingeben"));
   entry_berufsname = manage(new class Gtk::Entry());
   vbox_berufsname = manage(new class Gtk::VBox(false, 0));
   
   Gtk::VBox *vbox49 = manage(new class Gtk::VBox(false, 0));
   label_gwr = manage(new class Gtk::Label("%Wurf\n"
		"eingeben"));
   
   Gtk::Adjustment *spinbutton_waffen_lernschema_adj = manage(new class Gtk::Adjustment(1, 0, 100, 1, 10, 10));
   spinbutton_waffen_lernschema = manage(new class Gtk::SpinButton(*spinbutton_waffen_lernschema_adj, 1, 0));
   table_waffen_lernschema_eingabe = manage(new class Gtk::Table(2, 1, false));
   
   Gtk::Toolbar *toolbar3 = manage(new class Gtk::Toolbar());
   handlebox_lernschema = manage(new class Gtk::HandleBox());
   
   Glib::RefPtr<Gdk::Bitmap> _button_herkunft_img_mask;
   Glib::RefPtr<Gdk::Pixmap> _button_herkunft_img_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _button_herkunft_img_mask, CountrChar_trans_50_xpm);
   Gtk::Image *button_herkunft_img = manage(new class Gtk::Image(_button_herkunft_img_pixmap, _button_herkunft_img_mask));
   
   toolbar3->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("Herkunft", *button_herkunft_img, Gtk::Toolbar_Helpers::Callback0()));
   button_herkunft = static_cast<Gtk::Button *>(toolbar3->tools().back().get_widget());
   toolbar3->tools().push_back(Gtk::Toolbar_Helpers::Space());
   toolbar3->tools().push_back(Gtk::Toolbar_Helpers::Element(*button_angeborene_fert));
   toolbar3->tools().push_back(Gtk::Toolbar_Helpers::Space());
   
   Glib::RefPtr<Gdk::Bitmap> _button_lernpunkte_img_mask;
   Glib::RefPtr<Gdk::Pixmap> _button_lernpunkte_img_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _button_lernpunkte_img_mask, Dice_2W6_trans_50_xpm);
   Gtk::Image *button_lernpunkte_img = manage(new class Gtk::Image(_button_lernpunkte_img_pixmap, _button_lernpunkte_img_mask));
   
   toolbar3->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("Lernpunkte", *button_lernpunkte_img, Gtk::Toolbar_Helpers::Callback0()));
   button_lernpunkte = static_cast<Gtk::Button *>(toolbar3->tools().back().get_widget());
   Glib::RefPtr<Gdk::Bitmap> _togglebutton_lernpunkte_edit_img_mask;
   Glib::RefPtr<Gdk::Pixmap> _togglebutton_lernpunkte_edit_img_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _togglebutton_lernpunkte_edit_img_mask, Edit_trans_50_xpm);
   Gtk::Image *togglebutton_lernpunkte_edit_img = manage(new class Gtk::Image(_togglebutton_lernpunkte_edit_img_pixmap, _togglebutton_lernpunkte_edit_img_mask));
   
   toolbar3->tools().push_back(Gtk::Toolbar_Helpers::ToggleElem("Lernpunkte", *togglebutton_lernpunkte_edit_img, Gtk::Toolbar_Helpers::Callback0()));
   togglebutton_lernpunkte_edit = static_cast<Gtk::ToggleButton *>(toolbar3->tools().back().get_widget());
   toolbar3->tools().push_back(Gtk::Toolbar_Helpers::Space());
   
   Glib::RefPtr<Gdk::Bitmap> _button_beruf_img_mask;
   Glib::RefPtr<Gdk::Pixmap> _button_beruf_img_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _button_beruf_img_mask, Job_trans_50_xpm);
   Gtk::Image *button_beruf_img = manage(new class Gtk::Image(_button_beruf_img_pixmap, _button_beruf_img_mask));
   
   toolbar3->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("Beruf", *button_beruf_img, Gtk::Toolbar_Helpers::Callback0()));
   button_beruf = static_cast<Gtk::Button *>(toolbar3->tools().back().get_widget());
   toolbar3->tools().push_back(Gtk::Toolbar_Helpers::Element(*vbox49));
   toolbar3->tools().push_back(Gtk::Toolbar_Helpers::Space());
   
   Glib::RefPtr<Gdk::Bitmap> _button_lernschema_geld_img_mask;
   Glib::RefPtr<Gdk::Pixmap> _button_lernschema_geld_img_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _button_lernschema_geld_img_mask, Money_50_xpm);
   Gtk::Image *button_lernschema_geld_img = manage(new class Gtk::Image(_button_lernschema_geld_img_pixmap, _button_lernschema_geld_img_mask));
   
   toolbar3->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("Geld", *button_lernschema_geld_img, Gtk::Toolbar_Helpers::Callback0()));
   button_lernschema_geld = static_cast<Gtk::Button *>(toolbar3->tools().back().get_widget());
   Glib::RefPtr<Gdk::Bitmap> _button_lernschema_waffen_img_mask;
   Glib::RefPtr<Gdk::Pixmap> _button_lernschema_waffen_img_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _button_lernschema_waffen_img_mask, Weapon_trans_50_xpm);
   Gtk::Image *button_lernschema_waffen_img = manage(new class Gtk::Image(_button_lernschema_waffen_img_pixmap, _button_lernschema_waffen_img_mask));
   
   toolbar3->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("Waffen", *button_lernschema_waffen_img, Gtk::Toolbar_Helpers::Callback0()));
   button_lernschema_waffen = static_cast<Gtk::Button *>(toolbar3->tools().back().get_widget());
   toolbar3->tools().push_back(Gtk::Toolbar_Helpers::Element(*table_waffen_lernschema_eingabe));
   
   Glib::RefPtr<Gdk::Bitmap> _button_ruestung_img_mask;
   Glib::RefPtr<Gdk::Pixmap> _button_ruestung_img_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _button_ruestung_img_mask, Dice_Armor_trans_50_xpm);
   Gtk::Image *button_ruestung_img = manage(new class Gtk::Image(_button_ruestung_img_pixmap, _button_ruestung_img_mask));
   
   toolbar3->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("Rüstung", *button_ruestung_img, Gtk::Toolbar_Helpers::Callback0()));
   button_ruestung = static_cast<Gtk::Button *>(toolbar3->tools().back().get_widget());
   Glib::RefPtr<Gdk::Bitmap> _button_ausruestung_img_mask;
   Glib::RefPtr<Gdk::Pixmap> _button_ausruestung_img_pixmap = Gdk::Pixmap::create_from_xpm(get_default_colormap(), _button_ausruestung_img_mask, Dice_Ausruest_50_xpm);
   Gtk::Image *button_ausruestung_img = manage(new class Gtk::Image(_button_ausruestung_img_pixmap, _button_ausruestung_img_mask));
   
   toolbar3->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("Ausrüstung", *button_ausruestung_img, Gtk::Toolbar_Helpers::Callback0()));
   button_ausruestung = static_cast<Gtk::Button *>(toolbar3->tools().back().get_widget());
   pixmap70->set_alignment(0.5,0.5);
   pixmap70->set_padding(0,0);
   button_waffe_trans->set_flags(Gtk::CAN_FOCUS);
   button_waffe_trans->set_relief(Gtk::RELIEF_NONE);
   button_waffe_trans->add(*pixmap70);
   pixmap71->set_alignment(0.5,0.5);
   pixmap71->set_padding(0,0);
   button_fach_trans->set_flags(Gtk::CAN_FOCUS);
   button_fach_trans->set_relief(Gtk::RELIEF_NONE);
   button_fach_trans->add(*pixmap71);
   spinbutton_fach->set_flags(Gtk::CAN_FOCUS);
   spinbutton_fach->set_update_policy(Gtk::UPDATE_ALWAYS);
   spinbutton_fach->set_numeric(false);
   spinbutton_fach->set_digits(0);
   spinbutton_fach->set_wrap(false);
   spinbutton_fach->set_snap_to_ticks(false);
   pixmap119->set_alignment(0.5,0.5);
   pixmap119->set_padding(0,0);
   pixmap118->set_alignment(0.5,0.5);
   pixmap118->set_padding(0,0);
   pixmap120->set_alignment(0.5,0.5);
   pixmap120->set_padding(0,0);
   hbox60->pack_start(*pixmap119);
   hbox60->pack_start(*pixmap118);
   hbox60->pack_start(*pixmap120);
   button_fachkenntnisse->set_flags(Gtk::CAN_FOCUS);
   button_fachkenntnisse->set_mode(false);
   button_fachkenntnisse->set_active(true);
   button_fachkenntnisse->add(*hbox60);
   vbox33->pack_start(*spinbutton_fach, Gtk::PACK_SHRINK, 0);
   vbox33->pack_start(*button_fachkenntnisse, Gtk::PACK_EXPAND_PADDING, 0);
   frame25->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame25->set_label_align(0,0);
   frame25->add(*vbox33);
   spinbutton_allgemein->set_flags(Gtk::CAN_FOCUS);
   spinbutton_allgemein->set_update_policy(Gtk::UPDATE_ALWAYS);
   spinbutton_allgemein->set_numeric(false);
   spinbutton_allgemein->set_digits(0);
   spinbutton_allgemein->set_wrap(false);
   spinbutton_allgemein->set_snap_to_ticks(false);
   pixmap116->set_alignment(0.5,0.5);
   pixmap116->set_padding(0,0);
   pixmap149->set_alignment(0.5,0.5);
   pixmap149->set_padding(0,0);
   hbox59->pack_start(*pixmap116);
   hbox59->pack_start(*pixmap149);
   button_allgemeinwissen->set_flags(Gtk::CAN_FOCUS);
   button_allgemeinwissen->set_mode(false);
   button_allgemeinwissen->set_active(false);
   button_allgemeinwissen->add(*hbox59);
   vbox34->pack_start(*spinbutton_allgemein, Gtk::PACK_SHRINK, 0);
   vbox34->pack_start(*button_allgemeinwissen, Gtk::PACK_EXPAND_PADDING, 0);
   frame26->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame26->set_label_align(0,0);
   frame26->add(*vbox34);
   spinbutton_unge->set_flags(Gtk::CAN_FOCUS);
   spinbutton_unge->set_update_policy(Gtk::UPDATE_ALWAYS);
   spinbutton_unge->set_numeric(false);
   spinbutton_unge->set_digits(0);
   spinbutton_unge->set_wrap(false);
   spinbutton_unge->set_snap_to_ticks(false);
   pixmap114->set_alignment(0.5,0.5);
   pixmap114->set_padding(0,0);
   pixmap121->set_alignment(0.5,0.5);
   pixmap121->set_padding(0,0);
   hbox50->pack_start(*pixmap114);
   hbox50->pack_start(*pixmap121);
   button_untyp_fertigkeiten->set_flags(Gtk::CAN_FOCUS);
   button_untyp_fertigkeiten->set_mode(false);
   button_untyp_fertigkeiten->set_active(false);
   button_untyp_fertigkeiten->add(*hbox50);
   vbox35->pack_start(*spinbutton_unge, Gtk::PACK_SHRINK, 0);
   vbox35->pack_end(*button_untyp_fertigkeiten, Gtk::PACK_EXPAND_PADDING, 0);
   frame80->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame80->set_label_align(0,0);
   frame80->add(*vbox35);
   combo_kido_stil->get_entry()->set_flags(Gtk::CAN_FOCUS);
   combo_kido_stil->get_entry()->set_visibility(true);
   combo_kido_stil->get_entry()->set_editable(true);
   combo_kido_stil->get_entry()->set_text("");
   combo_kido_stil->set_case_sensitive(false);
   combo_kido_stil->set_use_arrows(true);
   combo_kido_stil->set_use_arrows_always(false);
   {  
      
      const char * const items[] = { "", 0 };
      combo_kido_stil->set_popdown_strings(items);
   }
   combo_kido_stil->get_entry()->set_text("");
   pixmap102->set_alignment(0.5,0.5);
   pixmap102->set_padding(0,0);
   label540->set_alignment(0.5,0.5);
   label540->set_padding(0,0);
   label540->set_justify(Gtk::JUSTIFY_CENTER);
   label540->set_line_wrap(false);
   hbox54->pack_start(*pixmap102, Gtk::PACK_SHRINK, 0);
   hbox54->pack_start(*label540, Gtk::PACK_SHRINK, 0);
   button_kido_auswahl->set_flags(Gtk::CAN_FOCUS);
   button_kido_auswahl->set_mode(false);
   button_kido_auswahl->set_active(false);
   button_kido_auswahl->add(*hbox54);
   vbox45->pack_start(*combo_kido_stil, Gtk::PACK_SHRINK, 0);
   vbox45->pack_start(*button_kido_auswahl, Gtk::PACK_SHRINK, 0);
   frame_KiDo_lernschema->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame_KiDo_lernschema->set_label_align(0,0);
   frame_KiDo_lernschema->add(*vbox45);
   spinbutton_waffen->set_flags(Gtk::CAN_FOCUS);
   spinbutton_waffen->set_update_policy(Gtk::UPDATE_ALWAYS);
   spinbutton_waffen->set_numeric(false);
   spinbutton_waffen->set_digits(0);
   spinbutton_waffen->set_wrap(false);
   spinbutton_waffen->set_snap_to_ticks(false);
   pixmap107->set_alignment(0.5,0.5);
   pixmap107->set_padding(0,0);
   pixmap100->set_alignment(0.5,0.5);
   pixmap100->set_padding(0,0);
   hbox52->pack_start(*pixmap107);
   hbox52->pack_start(*pixmap100);
   button_waffen->set_flags(Gtk::CAN_FOCUS);
   button_waffen->set_mode(false);
   button_waffen->set_active(false);
   button_waffen->add(*hbox52);
   vbox36->pack_start(*spinbutton_waffen, Gtk::PACK_SHRINK, 0);
   vbox36->pack_start(*button_waffen, Gtk::PACK_EXPAND_PADDING, 0);
   frame27->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame27->set_label_align(0,0);
   frame27->add(*vbox36);
   spinbutton_zauber->set_flags(Gtk::CAN_FOCUS);
   spinbutton_zauber->set_update_policy(Gtk::UPDATE_ALWAYS);
   spinbutton_zauber->set_numeric(false);
   spinbutton_zauber->set_digits(0);
   spinbutton_zauber->set_wrap(false);
   spinbutton_zauber->set_snap_to_ticks(false);
   pixmap101->set_alignment(0.5,0.5);
   pixmap101->set_padding(0,0);
   pixmap123->set_alignment(0.5,0.5);
   pixmap123->set_padding(0,0);
   hbox53->pack_start(*pixmap101);
   hbox53->pack_start(*pixmap123);
   button_zauber->set_flags(Gtk::CAN_FOCUS);
   button_zauber->set_mode(false);
   button_zauber->set_active(false);
   button_zauber->add(*hbox53);
   vbox37->pack_start(*spinbutton_zauber, Gtk::PACK_SHRINK, 0);
   vbox37->pack_start(*button_zauber, Gtk::PACK_EXPAND_PADDING, 0);
   frame28->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame28->set_label_align(0,0);
   frame28->add(*vbox37);
   combo_magier_spezialgebiet->get_entry()->set_flags(Gtk::CAN_FOCUS);
   combo_magier_spezialgebiet->get_entry()->set_visibility(true);
   combo_magier_spezialgebiet->get_entry()->set_editable(true);
   combo_magier_spezialgebiet->get_entry()->set_text("");
   combo_magier_spezialgebiet->set_case_sensitive(false);
   combo_magier_spezialgebiet->set_use_arrows(true);
   combo_magier_spezialgebiet->set_use_arrows_always(false);
   {  
      
      const char * const items[] = { "", 0 };
      combo_magier_spezialgebiet->set_popdown_strings(items);
   }
   combo_magier_spezialgebiet->get_entry()->set_text("");
   table96->set_row_spacings(0);
   table96->set_col_spacings(0);
   table96->attach(*button_waffe_trans, 3, 5, 1, 2, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table96->attach(*button_fach_trans, 0, 3, 1, 2, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table96->attach(*frame25, 0, 1, 0, 1, Gtk::FILL, Gtk::EXPAND|Gtk::SHRINK, 0, 0);
   table96->attach(*frame26, 1, 2, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table96->attach(*frame80, 2, 4, 0, 1, Gtk::AttachOptions(), Gtk::AttachOptions(), 0, 0);
   table96->attach(*frame_KiDo_lernschema, 6, 7, 0, 1, Gtk::AttachOptions(), Gtk::AttachOptions(), 0, 0);
   table96->attach(*frame27, 4, 5, 0, 1, Gtk::AttachOptions(), Gtk::AttachOptions(), 0, 0);
   table96->attach(*frame28, 5, 6, 0, 1, Gtk::AttachOptions(), Gtk::AttachOptions(), 0, 0);
   table96->attach(*combo_magier_spezialgebiet, 5, 6, 1, 2, Gtk::AttachOptions(), Gtk::AttachOptions(), 0, 0);
   frame_lernpunkte->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame_lernpunkte->set_label_align(0,0);
   frame_lernpunkte->add(*table96);
   table117->set_row_spacings(0);
   table117->set_col_spacings(0);
   table117->attach(*frame_lernpunkte, 0, 1, 0, 1, Gtk::SHRINK, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, 0, 0);
   fertig_typ->set_alignment(0.5,0.5);
   fertig_typ->set_padding(5,5);
   fertig_typ->set_justify(Gtk::JUSTIFY_CENTER);
   fertig_typ->set_line_wrap(false);
   frame59->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame59->set_label_align(0,0);
   frame59->add(*fertig_typ);
   label_ruestung_lernschema->set_alignment(0.5,0.5);
   label_ruestung_lernschema->set_padding(0,0);
   label_ruestung_lernschema->set_justify(Gtk::JUSTIFY_CENTER);
   label_ruestung_lernschema->set_line_wrap(false);
   frame101->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame101->set_label_align(0,0);
   frame101->add(*label_ruestung_lernschema);
   pixmap122->set_alignment(0.5,0.5);
   pixmap122->set_padding(0,0);
   label545->set_alignment(0.5,0.5);
   label545->set_padding(0,0);
   label545->set_justify(Gtk::JUSTIFY_CENTER);
   label545->set_line_wrap(false);
   hbox61->pack_start(*pixmap122);
   hbox61->pack_start(*label545, Gtk::PACK_SHRINK, 0);
   togglebutton_spezialwaffe->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*togglebutton_spezialwaffe, "Nach dem Drücken dieses Knopfes kann eine Spezialwaffe gewählt werden. Entweder eine Nahkampfwaffe die 1 LP gekostet hat, oder eine Fernkampfwaffe, die höchstens 2 LP gekostet hat.", "");
   togglebutton_spezialwaffe->set_relief(Gtk::RELIEF_NORMAL);
   togglebutton_spezialwaffe->set_active(false);
   togglebutton_spezialwaffe->add(*hbox61);
   label_herkunft_lernschema->set_alignment(0.5,0.5);
   label_herkunft_lernschema->set_padding(0,0);
   label_herkunft_lernschema->set_justify(Gtk::JUSTIFY_CENTER);
   label_herkunft_lernschema->set_line_wrap(false);
   frame102->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame102->set_label_align(0,0);
   frame102->add(*label_herkunft_lernschema);
   table131->set_row_spacings(0);
   table131->set_col_spacings(0);
   table131->attach(*frame59, 0, 1, 0, 1, Gtk::FILL, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, 0, 0);
   table131->attach(*frame101, 2, 3, 0, 1, Gtk::FILL, Gtk::FILL, 0, 0);
   table131->attach(*togglebutton_spezialwaffe, 3, 4, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table131->attach(*frame102, 1, 2, 0, 1, Gtk::FILL, Gtk::FILL, 0, 0);
   eventbox_zusatz->set_events(Gdk::LEAVE_NOTIFY_MASK);
   label565->set_alignment(0,0.5);
   label565->set_padding(0,0);
   label565->set_justify(Gtk::JUSTIFY_CENTER);
   label565->set_line_wrap(false);
   togglebutton_teure_anzeigen->set_flags(Gtk::CAN_FOCUS);
   togglebutton_teure_anzeigen->set_mode(true);
   togglebutton_teure_anzeigen->set_active(false);
   togglebutton_teure_anzeigen->add(*label565);
   label562->set_alignment(7.45058e-09,0.5);
   label562->set_padding(0,0);
   label562->set_justify(Gtk::JUSTIFY_CENTER);
   label562->set_line_wrap(false);
   togglebutton_gelernte_anzeigen->set_flags(Gtk::CAN_FOCUS);
   togglebutton_gelernte_anzeigen->set_mode(true);
   togglebutton_gelernte_anzeigen->set_active(false);
   togglebutton_gelernte_anzeigen->add(*label562);
   pixmap145->set_alignment(0.5,0.5);
   pixmap145->set_padding(0,0);
   table132->set_row_spacings(0);
   table132->set_col_spacings(0);
   table132->attach(*togglebutton_teure_anzeigen, 1, 2, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table132->attach(*togglebutton_gelernte_anzeigen, 1, 2, 1, 2, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table132->attach(*pixmap145, 0, 1, 0, 2, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, Gtk::FILL, 0, 0);
   frame103->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame103->set_label_align(0,0);
   frame103->add(*table132);
   table_lernschema_121->set_row_spacings(0);
   table_lernschema_121->set_col_spacings(0);
   table_lernschema_121->attach(*table131, 0, 1, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table_lernschema_121->attach(*eventbox_zusatz, 3, 4, 0, 1, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, Gtk::FILL, 0, 0);
   table_lernschema_121->attach(*frame103, 2, 3, 0, 1, Gtk::SHRINK|Gtk::FILL, Gtk::SHRINK, 0, 0);
   pixmap_dfr3->set_size_request(300,-1);
   pixmap_dfr3->set_alignment(0.5,0.5);
   pixmap_dfr3->set_padding(0,0);
   viewport36->set_size_request(309,-1);
   viewport36->set_shadow_type(Gtk::SHADOW_NONE);
   viewport36->add(*pixmap_dfr3);
   scrolledwindow_dfr3->set_policy(Gtk::POLICY_AUTOMATIC, Gtk::POLICY_AUTOMATIC);
   scrolledwindow_dfr3->add(*viewport36);
   label544->set_alignment(0,0.5);
   label544->set_padding(0,0);
   label544->set_justify(Gtk::JUSTIFY_CENTER);
   label544->set_line_wrap(false);
   scrolledwindow73->set_policy(Gtk::POLICY_AUTOMATIC, Gtk::POLICY_AUTOMATIC);
   scrolledwindow73->add(*tree_gelerntes);
   togglebutton_gelernt_verlernen->set_flags(Gtk::CAN_FOCUS);
   togglebutton_gelernt_verlernen->set_relief(Gtk::RELIEF_NORMAL);
   togglebutton_gelernt_verlernen->set_active(false);
   table122->set_row_spacings(0);
   table122->set_col_spacings(0);
   table122->attach(*label544, 0, 1, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table122->attach(*scrolledwindow73, 0, 2, 1, 2, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, 0, 0);
   table122->attach(*togglebutton_gelernt_verlernen, 1, 2, 0, 1, Gtk::SHRINK, Gtk::SHRINK|Gtk::FILL, 0, 0);
   scrolledwindow_lernen->set_policy(Gtk::POLICY_AUTOMATIC, Gtk::POLICY_AUTOMATIC);
   Tree_Lernschema_Zusatz->set_events(Gdk::LEAVE_NOTIFY_MASK);
   scrolledwindow77->set_policy(Gtk::POLICY_AUTOMATIC, Gtk::POLICY_AUTOMATIC);
   scrolledwindow77->add(*Tree_Lernschema_Zusatz);
   label602->set_alignment(0,0.5);
   label602->set_padding(0,0);
   label602->set_justify(Gtk::JUSTIFY_CENTER);
   label602->set_line_wrap(false);
   checkbutton_einschraenkungen_zusatz->set_flags(Gtk::CAN_FOCUS);
   checkbutton_einschraenkungen_zusatz->set_mode(true);
   checkbutton_einschraenkungen_zusatz->set_active(false);
   checkbutton_einschraenkungen_zusatz->add(*label602);
   table163->set_row_spacings(0);
   table163->set_col_spacings(0);
   table163->attach(*scrolledwindow77, 0, 1, 1, 2, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, 0, 0);
   table163->attach(*checkbutton_einschraenkungen_zusatz, 0, 1, 0, 1, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   frame_lernschema_zusatz->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame_lernschema_zusatz->set_label_align(0,0);
   frame_lernschema_zusatz->add(*table163);
   label_lernschma_titel->set_alignment(0,0.5);
   label_lernschma_titel->set_padding(0,0);
   label_lernschma_titel->set_justify(Gtk::JUSTIFY_CENTER);
   label_lernschma_titel->set_line_wrap(false);
   table123->set_row_spacings(0);
   table123->set_col_spacings(0);
   table123->attach(*scrolledwindow_lernen, 0, 1, 1, 2, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, 0, 0);
   table123->attach(*frame_lernschema_zusatz, 1, 2, 0, 2, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, 0, 0);
   table123->attach(*label_lernschma_titel, 0, 1, 0, 1, Gtk::SHRINK, Gtk::SHRINK, 0, 0);
   hpaned6->set_position(243);
   hpaned6->pack1(*table122, Gtk::EXPAND|Gtk::SHRINK);
   hpaned6->pack2(*table123, Gtk::EXPAND|Gtk::SHRINK);
   button_herkunft->set_flags(Gtk::CAN_FOCUS);
   pixmap170->set_alignment(0.5,0.5);
   pixmap170->set_padding(0,0);
   label537->set_alignment(0.5,0.5);
   label537->set_padding(0,0);
   label537->set_justify(Gtk::JUSTIFY_CENTER);
   label537->set_line_wrap(false);
   vbox62->pack_start(*pixmap170);
   vbox62->pack_start(*label537);
   button_angeborene_fert->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*button_angeborene_fert, "Linke Maustaste: Würfeln                          Rechte Maustaste: Auswählen (Abbruch dann mit 'Lernpunkte')", "");
   button_angeborene_fert->set_relief(Gtk::RELIEF_NORMAL);
   button_angeborene_fert->add(*vbox62);
   button_lernpunkte->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*button_lernpunkte, "Lernpunkte würfeln", "");
   togglebutton_lernpunkte_edit->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*togglebutton_lernpunkte_edit, "Lernpunkte editieren und/oder %Wurf für Berufswahl eingeben.", "");
   togglebutton_lernpunkte_edit->set_active(false);
   button_beruf->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*button_beruf, "Linke Maustaste: Auswahl aus Originalliste. Rechte Maustaste: Berufsnamen selber eingeben.", "");
   label557->set_alignment(0,0.5);
   label557->set_padding(0,0);
   label557->set_justify(Gtk::JUSTIFY_CENTER);
   label557->set_line_wrap(false);
   label558->set_alignment(0,0.5);
   label558->set_padding(0,0);
   label558->set_justify(Gtk::JUSTIFY_CENTER);
   label558->set_line_wrap(false);
   spinbutton_beruf->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*spinbutton_beruf, "%Wurf für den Beruf eingeben", "");
   spinbutton_beruf->set_update_policy(Gtk::UPDATE_ALWAYS);
   spinbutton_beruf->set_numeric(false);
   spinbutton_beruf->set_digits(0);
   spinbutton_beruf->set_wrap(false);
   spinbutton_beruf->set_snap_to_ticks(false);
   table_berufsprozent->set_row_spacings(0);
   table_berufsprozent->set_col_spacings(0);
   table_berufsprozent->attach(*label557, 0, 2, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table_berufsprozent->attach(*label558, 1, 2, 1, 2, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table_berufsprozent->attach(*spinbutton_beruf, 0, 1, 1, 2, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   label542->set_alignment(0,0.5);
   label542->set_padding(0,0);
   label542->set_justify(Gtk::JUSTIFY_LEFT);
   label542->set_line_wrap(false);
   entry_berufsname->set_flags(Gtk::CAN_FOCUS);
   entry_berufsname->set_visibility(true);
   entry_berufsname->set_editable(true);
   entry_berufsname->set_text("");
   vbox_berufsname->pack_start(*label542, Gtk::PACK_SHRINK, 0);
   vbox_berufsname->pack_start(*entry_berufsname, Gtk::PACK_SHRINK, 0);
   vbox49->pack_start(*table_berufsprozent);
   vbox49->pack_start(*vbox_berufsname);
   button_lernschema_geld->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*button_lernschema_geld, "Linke Maustaste: Geld würfeln             Rechte Maustaste: Geld eingeben", "");
   button_lernschema_waffen->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*button_lernschema_waffen, "Linke Maustaste: Waffen auswürfeln            Rechte Maustaste: Waffen aussuchen", "");
   label_gwr->set_alignment(0,0.5);
   label_gwr->set_padding(0,0);
   label_gwr->set_justify(Gtk::JUSTIFY_CENTER);
   label_gwr->set_line_wrap(false);
   spinbutton_waffen_lernschema->set_flags(Gtk::CAN_FOCUS);
   spinbutton_waffen_lernschema->set_update_policy(Gtk::UPDATE_ALWAYS);
   spinbutton_waffen_lernschema->set_numeric(false);
   spinbutton_waffen_lernschema->set_digits(0);
   spinbutton_waffen_lernschema->set_wrap(false);
   spinbutton_waffen_lernschema->set_snap_to_ticks(false);
   table_waffen_lernschema_eingabe->set_row_spacings(0);
   table_waffen_lernschema_eingabe->set_col_spacings(0);
   table_waffen_lernschema_eingabe->attach(*label_gwr, 0, 1, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table_waffen_lernschema_eingabe->attach(*spinbutton_waffen_lernschema, 0, 1, 1, 2, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   button_ruestung->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*button_ruestung, "Linke Maustaste: Rüstung würfeln                                 Rechte Maustaste: Rüstung aussuchen", "");
   button_ausruestung->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*button_ausruestung, "Ausrüstung aufgrund bestimmter Fertigkeiten würfeln", "");
   toolbar3->set_tooltips(true);
   handlebox_lernschema->set_shadow_type(Gtk::SHADOW_NONE);
   handlebox_lernschema->set_handle_position(Gtk::POS_LEFT);
   handlebox_lernschema->set_snap_edge(Gtk::POS_TOP);
   handlebox_lernschema->add(*toolbar3);
   table_lernschema->set_row_spacings(0);
   table_lernschema->set_col_spacings(0);
   table_lernschema->attach(*table117, 0, 1, 1, 2, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table_lernschema->attach(*table_lernschema_121, 0, 1, 2, 3, Gtk::SHRINK|Gtk::FILL, Gtk::SHRINK|Gtk::FILL, 0, 0);
   table_lernschema->attach(*scrolledwindow_dfr3, 1, 2, 0, 4, Gtk::SHRINK|Gtk::FILL, Gtk::SHRINK|Gtk::FILL, 0, 0);
   table_lernschema->attach(*hpaned6, 0, 1, 3, 4, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, Gtk::EXPAND|Gtk::SHRINK|Gtk::FILL, 0, 0);
   table_lernschema->attach(*handlebox_lernschema, 0, 1, 0, 1, Gtk::SHRINK|Gtk::FILL, Gtk::SHRINK|Gtk::FILL, 0, 0);
   pixmap70->show();
   button_waffe_trans->show();
   pixmap71->show();
   button_fach_trans->show();
   spinbutton_fach->show();
   pixmap119->show();
   pixmap118->show();
   pixmap120->show();
   hbox60->show();
   button_fachkenntnisse->show();
   vbox33->show();
   frame25->show();
   spinbutton_allgemein->show();
   pixmap116->show();
   pixmap149->show();
   hbox59->show();
   button_allgemeinwissen->show();
   vbox34->show();
   frame26->show();
   spinbutton_unge->show();
   pixmap114->show();
   pixmap121->show();
   hbox50->show();
   button_untyp_fertigkeiten->show();
   vbox35->show();
   frame80->show();
   combo_kido_stil->show();
   pixmap102->show();
   label540->show();
   hbox54->show();
   button_kido_auswahl->show();
   vbox45->show();
   frame_KiDo_lernschema->show();
   spinbutton_waffen->show();
   pixmap107->show();
   pixmap100->show();
   hbox52->show();
   button_waffen->show();
   vbox36->show();
   frame27->show();
   spinbutton_zauber->show();
   pixmap101->show();
   pixmap123->show();
   hbox53->show();
   button_zauber->show();
   vbox37->show();
   frame28->show();
   combo_magier_spezialgebiet->show();
   table96->show();
   frame_lernpunkte->show();
   table117->show();
   fertig_typ->show();
   frame59->show();
   label_ruestung_lernschema->show();
   frame101->show();
   pixmap122->show();
   label545->show();
   hbox61->show();
   togglebutton_spezialwaffe->show();
   label_herkunft_lernschema->show();
   frame102->show();
   table131->show();
   eventbox_zusatz->show();
   label565->show();
   togglebutton_teure_anzeigen->show();
   label562->show();
   togglebutton_gelernte_anzeigen->show();
   pixmap145->show();
   table132->show();
   frame103->show();
   table_lernschema_121->show();
   pixmap_dfr3->show();
   viewport36->show();
   scrolledwindow_dfr3->show();
   label544->show();
   tree_gelerntes->show();
   scrolledwindow73->show();
   togglebutton_gelernt_verlernen->show();
   table122->show();
   scrolledwindow_lernen->show();
   Tree_Lernschema_Zusatz->show();
   scrolledwindow77->show();
   label602->show();
   checkbutton_einschraenkungen_zusatz->show();
   table163->show();
   frame_lernschema_zusatz->show();
   label_lernschma_titel->show();
   table123->show();
   hpaned6->show();
   pixmap170->show();
   label537->show();
   vbox62->show();
   button_angeborene_fert->show();
   label557->show();
   label558->show();
   spinbutton_beruf->show();
   table_berufsprozent->show();
   label542->show();
   entry_berufsname->show();
   vbox_berufsname->show();
   vbox49->show();
   label_gwr->show();
   spinbutton_waffen_lernschema->show();
   toolbar3->show();
   handlebox_lernschema->show();
   table_lernschema->show();
   button_waffe_trans->signal_clicked().connect(SigC::slot(*this, &table_lernschema_glade::on_button_waffe_trans_clicked));
   button_fach_trans->signal_clicked().connect(SigC::slot(*this, &table_lernschema_glade::on_button_fach_trans_clicked));
   spinbutton_fach->signal_activate().connect(SigC::slot(*this, &table_lernschema_glade::on_spinbutton_fach_activate), true);
   spinbutton_fach->signal_focus_out_event().connect(SigC::slot(*this, &table_lernschema_glade::on_spinbutton_fach_focus_out_event));
   spinbutton_fach->signal_focus_in_event().connect(SigC::slot(*this, &table_lernschema_glade::on_spinbutton_fach_focus_in_event));
   button_fachkenntnisse->signal_toggled().connect(SigC::slot(*this, &table_lernschema_glade::on_lernliste_wahl_toggled));
   spinbutton_allgemein->signal_activate().connect(SigC::slot(*this, &table_lernschema_glade::on_spinbutton_allgemein_activate), true);
   spinbutton_allgemein->signal_focus_out_event().connect(SigC::slot(*this, &table_lernschema_glade::on_spinbutton_allgemein_focus_out_event));
   spinbutton_allgemein->signal_focus_in_event().connect(SigC::slot(*this, &table_lernschema_glade::on_spinbutton_allgemein_focus_in_event));
   button_allgemeinwissen->signal_toggled().connect(SigC::slot(*this, &table_lernschema_glade::on_lernliste_wahl_toggled));
   spinbutton_unge->signal_activate().connect(SigC::slot(*this, &table_lernschema_glade::on_spinbutton_unge_activate), true);
   spinbutton_unge->signal_focus_out_event().connect(SigC::slot(*this, &table_lernschema_glade::on_spinbutton_unge_focus_out_event));
   spinbutton_unge->signal_focus_in_event().connect(SigC::slot(*this, &table_lernschema_glade::on_spinbutton_unge_focus_in_event));
   button_untyp_fertigkeiten->signal_toggled().connect(SigC::slot(*this, &table_lernschema_glade::on_lernliste_wahl_toggled));
   combo_kido_stil->get_entry()->signal_activate().connect(SigC::slot(*this, &table_lernschema_glade::on_combo_kido_stil_activate));
   combo_kido_stil->get_entry()->signal_focus_out_event().connect(SigC::slot(*this, &table_lernschema_glade::on_combo_kido_stil_focus_out_event));
   combo_kido_stil->get_entry()->signal_changed().connect(SigC::slot(*this, &table_lernschema_glade::on_combo_kido_stil_changed));
   button_kido_auswahl->signal_toggled().connect(SigC::slot(*this, &table_lernschema_glade::on_kido_wahl_clicked));
   spinbutton_waffen->signal_activate().connect(SigC::slot(*this, &table_lernschema_glade::on_spinbutton_waffen_activate), true);
   spinbutton_waffen->signal_focus_out_event().connect(SigC::slot(*this, &table_lernschema_glade::on_spinbutton_waffen_focus_out_event));
   spinbutton_waffen->signal_focus_in_event().connect(SigC::slot(*this, &table_lernschema_glade::on_spinbutton_waffen_focus_in_event));
   button_waffen->signal_toggled().connect(SigC::slot(*this, &table_lernschema_glade::on_lernliste_wahl_toggled));
   button_waffen->signal_clicked().connect(SigC::slot(*this, &table_lernschema_glade::on_button_waffen_clicked));
   spinbutton_zauber->signal_activate().connect(SigC::slot(*this, &table_lernschema_glade::on_spinbutton_zaubern_activate), true);
   spinbutton_zauber->signal_focus_out_event().connect(SigC::slot(*this, &table_lernschema_glade::on_spinbutton_zaubern_focus_out_event));
   spinbutton_zauber->signal_focus_in_event().connect(SigC::slot(*this, &table_lernschema_glade::on_spinbutton_zaubern_focus_in_event));
   button_zauber->signal_toggled().connect(SigC::slot(*this, &table_lernschema_glade::on_lernliste_wahl_toggled));
   combo_magier_spezialgebiet->get_entry()->signal_activate().connect(SigC::slot(*this, &table_lernschema_glade::on_combo_magier_spezialgebiet_activate));
   combo_magier_spezialgebiet->get_entry()->signal_focus_out_event().connect(SigC::slot(*this, &table_lernschema_glade::on_combo_magier_spezialgebiet_focus_out_event));
   combo_magier_spezialgebiet->get_entry()->signal_changed().connect(SigC::slot(*this, &table_lernschema_glade::on_combo_magier_changed));
   togglebutton_spezialwaffe->signal_toggled().connect(SigC::slot(*this, &table_lernschema_glade::on_togglebutton_spezialwaffe_toggled));
   eventbox_zusatz->signal_leave_notify_event().connect(SigC::slot(*this, &table_lernschema_glade::on_eventbox_zusatz_leave_notify_event));
   togglebutton_teure_anzeigen->signal_toggled().connect(SigC::slot(*this, &table_lernschema_glade::on_togglebutton_teure_anzeigen_toggled));
   togglebutton_gelernte_anzeigen->signal_toggled().connect(SigC::slot(*this, &table_lernschema_glade::on_togglebutton_gelernte_anzeigen_toggled));
   tree_gelerntes->signal_leaf_selected().connect(SigC::slot(*this, &table_lernschema_glade::on_tree_gelerntes_leaf_selected));
   checkbutton_einschraenkungen_zusatz->signal_toggled().connect(SigC::slot(*this, &table_lernschema_glade::on_togglebutton_einschraenkungen_zusatz_anzeigen_toggled));
   button_herkunft->signal_clicked().connect(SigC::slot(*this, &table_lernschema_glade::on_herkunftsland_clicked));
   button_angeborene_fert->signal_button_release_event().connect(SigC::slot(*this, &table_lernschema_glade::on_angeborene_fertigkeit_button_release_event));
   button_lernpunkte->signal_clicked().connect(SigC::slot(*this, &table_lernschema_glade::on_lernpunkte_wuerfeln_clicked));
   togglebutton_lernpunkte_edit->signal_toggled().connect(SigC::slot(*this, &table_lernschema_glade::on_togglebutton_lernpunkte_edit_toggled));
   button_beruf->signal_button_release_event().connect(SigC::slot(*this, &table_lernschema_glade::on_button_beruf_release_event));
   spinbutton_beruf->signal_activate().connect(SigC::slot(*this, &table_lernschema_glade::on_spinbutton_beruf_activate));
   spinbutton_beruf->signal_focus_in_event().connect(SigC::slot(*this, &table_lernschema_glade::on_spinbutton_beruf_focus_in));
   entry_berufsname->signal_activate().connect(SigC::slot(*this, &table_lernschema_glade::on_entry_berufsname_activate));
   button_lernschema_geld->signal_button_release_event().connect(SigC::slot(*this, &table_lernschema_glade::on_button_lernschema_geld_button_release_event));
   button_lernschema_waffen->signal_button_release_event().connect(SigC::slot(*this, &table_lernschema_glade::on_button_lernschema_waffen_button_release_event));
   spinbutton_waffen_lernschema->signal_activate().connect(SigC::slot(*this, &table_lernschema_glade::on_spinbutton_waffen_lernschema_activate));
   spinbutton_waffen_lernschema->signal_focus_in_event().connect(SigC::slot(*this, &table_lernschema_glade::on_spinbutton_waffen_lernschema_focus_in_event));
   button_ruestung->signal_button_release_event().connect(SigC::slot(*this, &table_lernschema_glade::on_button_ruestung_button_release_event));
   button_ausruestung->signal_button_release_event().connect(SigC::slot(*this, &table_lernschema_glade::on_button_ausruestung_button_release_event));
}

table_lernschema_glade::~table_lernschema_glade()
{  delete tree_gelerntes;
   delete Tree_Lernschema_Zusatz;
}
